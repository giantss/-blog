<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>一个mvp框架的简单号码归属地信息查询demo</title>
      <link href="/blog/2018/10/31/%E4%B8%80%E4%B8%AAmvp%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2demo/"/>
      <url>/blog/2018/10/31/%E4%B8%80%E4%B8%AAmvp%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2demo/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><ul><li>Android studio3.1.4</li><li>gradle:3.1.4、minSdkVersion 21、 targetSdkVersion 28</li></ul></blockquote><h1 id="使用到的第三方框架"><a href="#使用到的第三方框架" class="headerlink" title="使用到的第三方框架"></a>使用到的第三方框架</h1><ul><li><a href="https://github.com/google/gson" target="_blank" rel="noopener">gson</a></li><li><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">okhttp</a></li></ul><a id="more"></a><h1 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h1><p>淘宝API：<a href="https://tcc.taobao.com/cc/json/mobile_tel_segment.htm?tel=18888888888" target="_blank" rel="noopener">https://tcc.taobao.com/cc/json/mobile_tel_segment.htm?tel=18888888888</a></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>Android studio3.0+ gradle的引入包的方式使用 “implementation”或者”api” “”代替”compile”。<br>比如</p><blockquote><p>Android studio2.0+使用: compile ‘com.squareup.okio:okio:1.9.0’<br>Android studio3.0+使用: implementation ‘com.squareup.okio:okio:1.9.0’</p></blockquote><h1 id="演示图"><a href="#演示图" class="headerlink" title="演示图"></a>演示图</h1><p><img src="https://upload-images.jianshu.io/upload_images/5683553-c28c19db5774e2e8.gif?imageMogr2/auto-orient/strip" alt="diagram.gif"></p><p><a href="https://github.com/giantss/MVPDemo" target="_blank" rel="noopener">demo下载点击这里</a></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/31/一个mvp框架的简单号码归属地信息查询demo/">https://giantss.github.io/blog/2018/10/31/一个mvp框架的简单号码归属地信息查询demo/</a> 翻版必究</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Redux for react native 指南</title>
      <link href="/blog/2018/10/13/Redux-for-react-native-%E6%8C%87%E5%8D%97/"/>
      <url>/blog/2018/10/13/Redux-for-react-native-%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果要看理论的童鞋点击这里 <a href="https://cn.redux.js.org/" target="_blank" rel="noopener">redux中文文档</a> 或者 <a href="https://redux.js.org/" target="_blank" rel="noopener">redux官方文档</a> ，本文不会太刻意去介绍大篇幅的理论，本文不做框架之间的对比，只给想学<code>redux</code>的童鞋提供实质的、高效的、易理解的学习参考资源，分享自己在学习过程中的得到。文章更新完后会比较长，请耐心阅读理解，仔细品味。不熟悉<code>redux</code>也没关系，可以跟着文章思路，将三个<code>demo</code>敲完，相信你一定获益匪浅。（文后有彩蛋 ）。</p><h3 id="已更新内容"><a href="#已更新内容" class="headerlink" title="已更新内容"></a>已更新内容</h3><ul><li><code>redux</code> 基本使用 (附demo) </li><li><code>redux</code> <code>Middleware</code>使用（附demo）</li><li><code>redux</code> 集成 <code>navigation</code> （附demo）</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5683553-edc8d5126cf1f401?imageMogr2/auto-orient/strip" alt="redux 基本使用"><br>模仿官方 <a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos" target="_blank" rel="noopener">Todos</a>  demo 的<code>react native</code>版。</p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-5aac6009d041bb4d?imageMogr2/auto-orient/strip" alt="redux Middleware使用"><br>模仿官方 <a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/async" target="_blank" rel="noopener">async</a>  demo 的<code>react native</code>版。</p><p><img src="https://upload-images.jianshu.io/upload_images/5683553-6b2ca647d5148423.gif?imageMogr2/auto-orient/strip" alt="集成react-native-navigation后ios演示图"><br><img src="https://upload-images.jianshu.io/upload_images/5683553-c0a2e3f1e8650a6e.gif?imageMogr2/auto-orient/strip" alt="集成react-native-navigation后android演示图"></p><p>集成<code>react-native-navigation</code>后把前两个<code>domo</code>综合。</p><a id="more"></a><h3 id="待更新内容"><a href="#待更新内容" class="headerlink" title="待更新内容"></a>待更新内容</h3><ul><li>待续……</li></ul><h1 id="为什么我要写这个demo"><a href="#为什么我要写这个demo" class="headerlink" title="为什么我要写这个demo"></a>为什么我要写这个demo</h1><p>有的童鞋可能会有疑问</p><p>问：官方不是<code>Todos</code>demo吗？为什么还要写这个demo？</p><p>答：官方的demo都是<code>react</code>的，而并非<code>react native</code>的。我也找过很多关于介绍<code>redux</code>的文章，但我发现找到的资料要么太基础、要么介绍不全面、提供的demo下载无法使用等等各种问题，迫使我有了自己动手造轮的冲动，而且这个<code>demo</code>并非只是介绍关于<code>redux</code>的基础的东西，而是通过三套<code>demo</code>实践连贯的图文的方式，让读者更好的理解，后面还会陆续更新在使用<code>redux</code>过程中的得到，希望大家鼓励支持。</p><h1 id="demo采用的代码规范"><a href="#demo采用的代码规范" class="headerlink" title="demo采用的代码规范"></a>demo采用的代码规范</h1><p>通常一个大项目到后期是需要很多开发者参与的，如果每个开发者都使用自己的一套代码规范做事情，这样带来的后果就是：后期的代码管理工作带来非常大的麻烦，浪费更多的时间去重构，而且也会让新人看代码时理解花更多的时间，还容易把别人带沟里去，所以一个大型项目最初构建架构的时候就必须要遵守一些规范。</p><p>那么我们怎么能敲出清爽而又优雅的代码呢？又如何检查我们代码质量合格呢？<br>我在这里极力推荐遵守<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb/javascript</a>的规范和使用<a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>来检查自己代码的代码质量（是否遵守了规范），因为它们已经得到了很多公司和开发者的认可。（这里过多的介绍<code>airbnb</code> <code>eslint</code>，本文只提供思路，想了解更多自行搜索）</p><p>在没有使用代码规范前我们可能用各自的风格写了很多年的代码了，突然要适应这套规范可能非常不适应，没关系，多敲多练习，时间长了就习惯了，谁还没有一个过程，过程是痛苦的，但痛苦过后会给你带来质的升华，自己慢慢领悟体会吧。好的事物东西是会被世界所接受，差的事物最终是要被替代的，所以做为一个合格的程序员（特别是前端程序员）要拥抱变化，因为它会使你变得更加的优秀，得到大众的认可，除非你不愿意让自己变得更优秀。</p><h1 id="redux能帮我们做什么"><a href="#redux能帮我们做什么" class="headerlink" title="redux能帮我们做什么"></a>redux能帮我们做什么</h1><p>两张图示意：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-7175d0cd962b8ae5?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="未使用redux的大型react native项目"><br><img src="http://upload-images.jianshu.io/upload_images/5683553-65432e3ea152af6b?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="使用redux后的大型react native项目"></p><h1 id="redux特性"><a href="#redux特性" class="headerlink" title="redux特性"></a>redux特性</h1><ul><li><p><strong>单一数据源： 整个应用的 <a href="https://cn.redux.js.org/docs/Glossary.html#state" target="_blank" rel="noopener">state</a> 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 <a href="https://cn.redux.js.org/docs/Glossary.html#store" target="_blank" rel="noopener">store</a> 中。</strong></p></li><li><p><strong>State 是只读的：唯一改变 state 的方法就是触发 <a href="https://cn.redux.js.org/docs/Glossary.html#action" target="_blank" rel="noopener">action</a>，action 是一个用于描述已发生事件的普通对象。</strong></p></li><li><p><strong>使用纯函数来执行修改：为了描述 action 如何改变 state tree ，你需要编写 <a href="https://cn.redux.js.org/docs/Glossary.html#reducer" target="_blank" rel="noopener">reducers</a>。</strong></p></li><li><p><strong>预见性：所有的用户的行为都是你提前定义好的。</strong></p></li><li><strong>统一管理state：所有的状态都在一个store中分配管理。</strong></li></ul><h1 id="哪些开发者和项目适合用redux"><a href="#哪些开发者和项目适合用redux" class="headerlink" title="哪些开发者和项目适合用redux"></a>哪些开发者和项目适合用redux</h1><p>这里只针对<code>react native</code>开发而言：</p><ul><li>初级：刚接触<code>react native</code>我非常不建议去使用，因为你还不知道怎么用它，建议先达到中级。</li><li>中级：使用<code>react native</code>做出一个以上已经上架的<code>不复杂</code>的应用 <code>redux</code>，也可以不使用，因为使用它并不能让你在前期快速的迭代开发，在这样的项目下使用<code>redux</code>就好比<code>大炮打蚊子</code>，副作用很大。但是可以先了解起来，并发现它的优点。这类相对简单的应用：当用户触发一个动作（程序需要<code>setState({xxx:xxx})</code>)的时候应用程序状态流程是这样的：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-feeabfaba82c0c8e?imageMogr2/auto-orient/strip" alt="简单的状态流程"></li></ul><ul><li>高级：使用<code>react native</code>做出一个以上已经上架的<code>复杂</code>的应用(涉及到即时通讯、界面布局比较复杂，组件嵌套太多层次等)，而这类复杂应用：当用户触发一个动作（程序需要<code>setState({xxx:xxx})</code>)的时候应用程序状态流程是这样的：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-47f1d99b529e1dc6?imageMogr2/auto-orient/strip" alt="复杂的状态流程"></li></ul><p>这种状态带来的后果，两方面分析：</p><ul><li>性能：祖父子组件之间多余的状态传递，导致宝贵的内存资源浪费，同时界面渲染的速度也会变慢，自然用户体验就变差了。</li><li>状态管理：当程序不断的迭代，界面布局越来越复杂，必然就会产生许多的<code>state</code>状态，那你是如何有效的管理这些状态？是什么原因导致UI多次渲染？是哪一步操作导致的UI组件的变化？在没有使用<code>redux</code>前你可能已经发现可以使用生命周期函数中的<code>shouldComponentUpdate</code>来减少子组件中没必要的渲染，但终究解决不了状态管理复杂的难题。<br>当你使用<code>redux</code>后，复杂的应用程序状态流程是这样的：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-3b877d8107d761c8?imageMogr2/auto-orient/strip" alt="使用redux后"><br>看完上面图文后，是否很直观的理解了怎样的项目才适合用redux呢，这要感谢<a href="https://segmentfault.com/u/justjavac" target="_blank" rel="noopener"><strong>@justjavac</strong></a>文章提供的动图支持。</li></ul><h1 id="redux-for-react-native-工作逻辑图"><a href="#redux-for-react-native-工作逻辑图" class="headerlink" title="redux for react native 工作逻辑图"></a>redux for react native 工作逻辑图</h1><p>感谢@<a href="https://www.jianshu.com/u/8b645668c3c4" target="_blank" rel="noopener">黑森林工作室</a>作者提供的清晰的逻辑图<br><img src="http://upload-images.jianshu.io/upload_images/5683553-efaef3516df7bb78?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="清晰逻辑图"></p><h1 id="redux工程结构分析"><a href="#redux工程结构分析" class="headerlink" title="redux工程结构分析"></a>redux工程结构分析</h1><p>我对官方的demo小部分位置做了些改造具体看代码分析：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-3ac7fc1272c8ec11?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"></p><h1 id="分工明细"><a href="#分工明细" class="headerlink" title="分工明细"></a>分工明细</h1><ul><li><code>js/actions</code><br>此文件夹下放内容做的事情是：定义用户行为。</li><li><code>js/reducers</code><br>此文件夹下放内容做的事情是：响应用户行为，返回改变后的状态，并发送到 <code>store</code>。</li><li><code>js/components</code><br>此文件夹下放内容做的事情是：自定义的组件。</li><li><code>js/containers</code><br>此文件夹下放内容做的事情是：把<code>components</code>文件夹中涉及到状态变化的组件进行第二次封装。</li><li><code>App.js</code><br>入口文件（store在这里），为什么我要把store定义在这里？ 因为它是唯一的，而且必须使用<code>react-redux</code>提供的<code>Provider</code>组件包裹入口的其他组件才能使<code>redux</code>中的<code>store</code>生效。</li><li><code>global.js</code><br>存放全局定义的变量、常量、方法等。</li></ul><h1 id="需要注意的事"><a href="#需要注意的事" class="headerlink" title="需要注意的事"></a>需要注意的事</h1><ul><li>一个工程中 <code>redux</code> 的 <code>store</code> 是唯一的，不能在多个 <code>store</code>  。</li><li>保持 <code>reducer</code> 纯净非常重要。永远不要在 <code>reducer</code> 里做这些操作：<blockquote><ul><li>修改传入参数；</li><li>执行有副作用的操作，如 <code>API</code> 请求和路由跳转；</li><li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>;</li></ul></blockquote></li><li>使用对象展开运算符<code>...</code>代替<code>Object.assign()</code>才是最好的解决方案。</li><li>组件名首字母要大写，也就是说<code>components</code>和<code>containers</code>文件夹下的文件首字母都要大写。</li><li>应该尽量减少传递到<code>action</code> 中的数据（能传单个数据就不传对象，能传对象就不传数组）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//good</span><br><span class="line">function todoApp(state = initialState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case SET_VISIBILITY_FILTER:</span><br><span class="line">      return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        visibilityFilter: action.filter</span><br><span class="line">      &#125;)</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//best</span><br><span class="line">function todoApp(state = initialState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case SET_VISIBILITY_FILTER:</span><br><span class="line">      return &#123; ...state, visibilityFilter: action.filter &#125;</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h1><p><code>js/actions/types.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//添加列表数据</span><br><span class="line">export const ADD_TODO = &apos;ADD_TODO&apos;;</span><br><span class="line">//筛选</span><br><span class="line">export const SET_VISIBILITY_FILTER = &apos;SET_VISIBILITY_FILTER&apos;;</span><br><span class="line">//文字添加／取消中划线</span><br><span class="line">export const TOGGLE_TODO = &apos;TOGGLE_TODO&apos;;</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em>action定义</em></strong></p><p>为什么我要把用户的<code>action</code>(行为)定义单独抽出来写一个<code>type.js</code>？</p><ul><li>方便状态管理。</li><li>复用性。</li></ul><hr><p><code>js/actions/index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import  &#123;</span><br><span class="line">    ADD_TODO,</span><br><span class="line">    SET_VISIBILITY_FILTER,</span><br><span class="line">    TOGGLE_TODO,</span><br><span class="line">&#125; from &apos;./types&apos;</span><br><span class="line">let nextTodoId = 0;</span><br><span class="line"></span><br><span class="line">export const addTodo = text =&gt; (&#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">    id: nextTodoId++,</span><br><span class="line">    text</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const setVisibilityFilter = (filter) =&gt; (&#123;</span><br><span class="line">    type: SET_VISIBILITY_FILTER,</span><br><span class="line">    filter</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const toggleTodo = id =&gt; (&#123;</span><br><span class="line">    type: TOGGLE_TODO,</span><br><span class="line">    id</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em>Action 创建函数</em></strong> </p><p><code>Action</code> 创建函数 就是生成 <code>action</code> 的方法。“<code>action</code>” 和 “<code>action 创建函数</code>” 这两个概念很容易混在一起，使用时最好注意区分。</p><p>在 <code>Redux</code> 中的 <code>action</code> 创建函数只是简单的返回一个 <code>action</code>:</p><hr><p><code>js/reducers/todos.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import  &#123;</span><br><span class="line">    ADD_TODO,</span><br><span class="line">    TOGGLE_TODO,</span><br><span class="line">&#125; from &apos;../actions/types&apos;</span><br><span class="line"></span><br><span class="line">const todos = (state = [], action) =&gt; &#123;</span><br><span class="line">    let &#123;id, text, type&#125; = action;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case ADD_TODO:</span><br><span class="line">            return [</span><br><span class="line">                ...state,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: id,</span><br><span class="line">                    text: text,</span><br><span class="line">                    completed: false</span><br><span class="line">                &#125;</span><br><span class="line">            ];</span><br><span class="line">        case TOGGLE_TODO:</span><br><span class="line">            return state.map(todo =&gt; (todo.id === id) ? &#123;...todo, completed: !todo.completed&#125; : todo);</span><br><span class="line">        default:</span><br><span class="line">            return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export  default  todos;</span><br></pre></td></tr></table></figure></p><p><code>js/reducers/visibilityFilter.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; SET_VISIBILITY_FILTER &#125; from &apos;../actions/types&apos;</span><br><span class="line">import &#123; visibilityFilters &#125; from &apos;../global&apos;</span><br><span class="line"></span><br><span class="line">const &#123; SHOW_ALL &#125; = visibilityFilters;</span><br><span class="line">const visibilityFilter = (state = SHOW_ALL, action) =&gt; &#123;</span><br><span class="line">    let &#123;type, filter&#125; = action;</span><br><span class="line">    switch (type)&#123;</span><br><span class="line">        case SET_VISIBILITY_FILTER:</span><br><span class="line">            return filter;</span><br><span class="line">        default:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default  visibilityFilter;</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em><code>reducer</code> 就是一个纯函数，接收旧的 <code>state</code> 和 <code>action</code>，返回新的 <code>state</code>（上面两个文件可以看着两个<code>reducer</code>）。</em></strong> </p><p><strong><em>注意：</em></strong> </p><blockquote><ul><li><code>Redux</code> 首次执行时，<code>state</code> 为 <code>undefined</code>，此时需要设置返回应用的初始 <code>state</code>。</li><li>每个 <code>reducer</code> 只负责管理全局 <code>state</code> 中它负责的一部分。每个 <code>reducer</code> 的 <code>state</code> 参数都不同，分别对应它管理的那部分 <code>state</code> 数据。</li></ul></blockquote><hr><p><code>js/reducers/index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &apos;redux&apos;</span><br><span class="line">import todos from &apos;./todos&apos;</span><br><span class="line">import visibilityFilter from &apos;./visibilityFilter&apos;</span><br><span class="line"></span><br><span class="line">export default combineReducers(&#123;</span><br><span class="line">    todos,</span><br><span class="line">    visibilityFilter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong><em>释：</em></strong> </p><p><strong>*<code>combineReducers()</code>所做的只是生成一个函数，这个函数来调用你的一系列 <code>reducer</code>，每个 <code>reducer</code> </strong>根据它们的 key 来筛选出 <code>state</code> 中的一部分数据并处理<strong>，然后这个生成的函数再将所有 <code>reducer</code> 的结果合并成一个大的对象。*</strong> </p><p>表面上看上去<code>combineReducers()</code>的作用就是把多个<code>reducer</code>合成一个的<code>reducer</code>。</p><hr><p><code>js/components/Todo.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    Text,</span><br><span class="line">    TouchableOpacity</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line"></span><br><span class="line">export default class Todo extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        onClick: PropTypes.func.isRequired,</span><br><span class="line">        completed: PropTypes.bool.isRequired,</span><br><span class="line">        text: PropTypes.string.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        let &#123; onClick, completed, text &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;TouchableOpacity</span><br><span class="line">                style=&#123;&#123;</span><br><span class="line">                    flexDirection: &apos;row&apos;,</span><br><span class="line">                    flex: 1,</span><br><span class="line">                    height: 50,</span><br><span class="line">                    alignItems: &apos;center&apos;,</span><br><span class="line">                    justifyContent: &apos;center&apos;,</span><br><span class="line">                    backgroundColor: &apos;#cccccc&apos;,</span><br><span class="line">                    marginTop: 10</span><br><span class="line">                &#125;&#125;</span><br><span class="line">                onPress=&#123;onClick&#125;&gt;</span><br><span class="line">                &lt;Text style=&#123;&#123; textDecorationLine: completed ? &apos;line-through&apos; : &apos;none&apos;&#125;&#125;&gt;&#123;text&#125;&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>js/components/TodoList.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    FlatList</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import Todo from &apos;./Todo&apos;</span><br><span class="line"></span><br><span class="line">export default class TodoList extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        todos: PropTypes.arrayOf(</span><br><span class="line">            PropTypes.shape(&#123;</span><br><span class="line">                id: PropTypes.number.isRequired,</span><br><span class="line">                completed: PropTypes.bool.isRequired,</span><br><span class="line">                text: PropTypes.string.isRequired</span><br><span class="line">            &#125;).isRequired</span><br><span class="line">        ).isRequired,</span><br><span class="line">        toggleTodo: PropTypes.func.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    _renderItem = (data) =&gt; &#123;</span><br><span class="line">       let dataItem = data.item;</span><br><span class="line">       let &#123; id &#125; = dataItem;</span><br><span class="line">       let &#123; toggleTodo &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Todo</span><br><span class="line">                &#123;...dataItem&#125;</span><br><span class="line">                onClick=&#123;() =&gt; toggleTodo(id)&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        let &#123; todos &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;FlatList</span><br><span class="line">                data=&#123;todos&#125;</span><br><span class="line">                keyExtractor=&#123;(item)=&gt;item.id.toString()&#125;</span><br><span class="line">                renderItem=&#123;this._renderItem&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>js/components/Link.js.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    TouchableOpacity,</span><br><span class="line">    Text</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line"></span><br><span class="line">export default class Link extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        active: PropTypes.bool.isRequired,</span><br><span class="line">        filter: PropTypes.string.isRequired,</span><br><span class="line">        onClick: PropTypes.func.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        let &#123; active,  filter, onClick &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">           &lt;TouchableOpacity</span><br><span class="line">               style=&#123;&#123;</span><br><span class="line">                   marginLeft: 4,</span><br><span class="line">                   height: 40,</span><br><span class="line">                   flex:1,</span><br><span class="line">                   borderWidth: 1,</span><br><span class="line">                   borderColor: &apos;#ccc&apos;,</span><br><span class="line">                   alignItems: &apos;center&apos;,</span><br><span class="line">                   justifyContent:&apos;center&apos;</span><br><span class="line">               &#125;&#125;</span><br><span class="line">               onPress=&#123;onClick&#125;</span><br><span class="line">           &gt;</span><br><span class="line">               &lt;Text style=&#123;&#123;fontSize: 10, color: active ? &apos;black&apos; : &apos;#cccccc&apos;&#125;&#125;&gt;&#123;filter&#125;&lt;/Text&gt;</span><br><span class="line">           &lt;/TouchableOpacity&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>js/components/Filters.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    View,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import FilterLink from &apos;../containers/FilterLink&apos;</span><br><span class="line">import &#123; visibilityFilters &#125; from &apos;../global&apos;</span><br><span class="line"></span><br><span class="line">const &#123; SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE  &#125; = visibilityFilters;</span><br><span class="line"></span><br><span class="line">export default  class Filters extends Component &#123;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;View style=&#123;&#123; flexDirection: &apos;row&apos;, marginTop: 20&#125;&#125;&gt;</span><br><span class="line">                &lt;FilterLink filter=&#123;SHOW_ALL&#125; /&gt;</span><br><span class="line">                &lt;FilterLink filter=&#123;SHOW_COMPLETED&#125; /&gt;</span><br><span class="line">                &lt;FilterLink filter=&#123;SHOW_ACTIVE&#125; /&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-f611ae53f10514e7?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br><strong><em>释：</em></strong> </p><p><strong><em>以上四个文件是自定义的四个UI展示组件，这些组件只定义外观并不关心数据来源和如何改变。传入什么就渲染什么。如果你把代码从 <code>Redux</code> 迁移到别的架构，这些组件可以不做任何改动直接使用。它们并不依赖于 <code>Redux</code>。</em></strong> </p><hr><p><code>js/containers/AddTodo.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    View,</span><br><span class="line">    TextInput,</span><br><span class="line">    Button,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class="line">import &#123; addTodo &#125; from &apos;../actions&apos;</span><br><span class="line"></span><br><span class="line">class AddTodo extends Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.inputValue = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        let &#123; dispatch &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;&#123;flexDirection: &apos;row&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;TextInput</span><br><span class="line">                    style=&#123;&#123;flex:1, borderWidth: 1, borderColor: &apos;#cccccc&apos;, textAlign: &apos;center&apos;&#125;&#125;</span><br><span class="line">                    onChangeText=&#123;text =&gt; this.inputValue = text&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;Button title=&quot;Add Todo&quot; onPress=&#123;() =&gt; dispatch(addTodo(this.inputValue))&#125;/&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect()(AddTodo)</span><br></pre></td></tr></table></figure></p><p><code>js/containers/FilterLink.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class="line">import &#123; setVisibilityFilter &#125; from &apos;../actions&apos;</span><br><span class="line">import Link from &apos;../components/Link&apos;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state, ownProps) =&gt; (&#123;</span><br><span class="line">    active: ownProps.filter === state.visibilityFilter,</span><br><span class="line">    filterText: ownProps.filter</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch, ownProps) =&gt; (&#123;</span><br><span class="line">    onClick: () =&gt; dispatch(setVisibilityFilter(ownProps.filter))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default connect(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps,</span><br><span class="line">)(Link)</span><br></pre></td></tr></table></figure></p><p><code>js/containers/VisibleTodoList.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class="line">import &#123; toggleTodo &#125; from &apos;../actions&apos;</span><br><span class="line">import TodoList from &apos;../components/TodoList&apos;</span><br><span class="line">import &#123; visibilityFilters &#125; from &apos;../global&apos;</span><br><span class="line"></span><br><span class="line">const &#123; SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE &#125; = visibilityFilters;</span><br><span class="line"></span><br><span class="line">const getVisibleTodos = (todos, filter) =&gt; &#123;</span><br><span class="line">    switch (filter) &#123;</span><br><span class="line">        case SHOW_COMPLETED:</span><br><span class="line">            return todos.filter(t =&gt; t.completed);</span><br><span class="line">        case SHOW_ACTIVE:</span><br><span class="line">            return todos.filter(t =&gt; !t.completed);</span><br><span class="line">        case SHOW_ALL:</span><br><span class="line">            return todos;</span><br><span class="line">        default:</span><br><span class="line">            throw new Error(&apos;Unknown filter: &apos; + filter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = state =&gt; (&#123;</span><br><span class="line">    todos: getVisibleTodos(state.todos, state.visibilityFilter)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = dispatch =&gt; (&#123;</span><br><span class="line">    toggleTodo: id =&gt; dispatch(toggleTodo(id))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default connect(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps,</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em>以上三个是容器组件，作用是把展示组件连接到 <code>Redux</code>。<br>总之：只要记住一句话就可以了：UI展示组件负责 UI 的呈现，容器组件负责管理数据和逻辑。</em></strong><br>有时很难分清到底该使用容器组件还是展示组件。如这个小的组件：</p><blockquote><ul><li><code>AddTodo.js</code> 含有“Add”按钮 和 输入框 </li></ul></blockquote><p>技术上讲可以把它分成两个组件，但一开始就这么做有点早。在一些非常小的组件里混用容器和展示是可以的。当业务变复杂后，如何拆分就很明显了。所以现在就使用混合型的吧。</p><p>上面出现了使用<code>react-redux</code>的<code>connect()</code>方法来把展示组件和容器组件关联在一起，这个方法做了性能优化来避免很多不必要的重复渲染。（这样你就不必为了性能而手动实现 <a href="https://doc.react-china.org/docs/optimizing-performance.html" target="_blank" rel="noopener">React 性能优化建议</a> 中的 <code>shouldComponentUpdate</code> 方法。）</p><p>使用 <code>connect()</code> 前，需要先定义 <code>mapStateToProps</code> 这个函数来指定如何把当前 <code>Redux store state</code> 映射到展示组件的 <code>props</code> 中。例如，<code>VisibleTodoList</code> 需要计算传到 <code>TodoList</code> 中的 <code>todos</code>，所以定义了根据 <code>state.visibilityFilter</code> 来过滤 <code>state.todos</code> 的方法，并在 <code>mapStateToProps</code> 中使用。</p><p>除了读取 <code>state</code>，容器组件还能分发 <code>action</code>。类似的方式，可以定义 <code>mapDispatchToProps()</code> 方法接收 <a href="https://cn.redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener"><code>dispatch()</code></a> 方法并返回期望注入到展示组件的 props 中的回调方法。例如，我们希望 <code>VisibleTodoList</code> 向 <code>TodoList</code> 组件中注入一个叫 <code>onTodoClick</code> 的 props ，还希望 <code>onTodoClick</code>能分发 <code>TOGGLE_TODO</code> 这个 <code>action</code>。<br>最后，使用 <code>connect()</code> 创建 <code>VisibleTodoList</code>，并传入这两个函数。</p><hr><p><code>js/components/Group.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    View</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import AddTodo from &apos;../containers/AddTodo&apos;</span><br><span class="line">import Filters from &apos;../components/Filters&apos;</span><br><span class="line">import VisibleTodoList from &apos;../containers/VisibleTodoList&apos;</span><br><span class="line"></span><br><span class="line">export default class Group extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;&#123;paddingHorizontal: 20, paddingVertical: 44&#125;&#125;&gt;</span><br><span class="line">                &lt;AddTodo/&gt;</span><br><span class="line">                &lt;Filters/&gt;</span><br><span class="line">                &lt;VisibleTodoList/&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em><code>Group.js</code> 是把所有的关联后的组件串起来，形成一个完整的界面。</em></strong> </p><hr><p><code>App.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class="line">import Group from &apos;./js/components/Group&apos;</span><br><span class="line">import rootReducer from &apos;./js/reducers&apos;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const store = createStore(rootReducer);</span><br><span class="line">        return (</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;Group /&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em>入口文件传入 <code>Store</code></em></strong> </p><ul><li>创建<code>store</code>传入<code>reducers</code>。</li><li>使用<code>Provider</code>组件包裹   <code>Group</code>组件, <code>store</code>作为属性传入<code>Provider</code>。</li></ul><hr><p>进行到这一步，代码分析完毕。本次写作到此结束。我相信大家如果仔细看完的话，多多少少会有些收获吧，如果<code>demo</code>看不太懂，那就跟着代码分析的思路多敲几遍代码，也就理解了，有空我会继续更新未完成的内容。</p><h4 id="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"><a href="#〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️" class="headerlink" title="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"></a>〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️</h4><h4 id="⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️"><a href="#⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️" class="headerlink" title="⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️"></a>⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️</h4><h4 id="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-1"><a href="#〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-1" class="headerlink" title="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"></a>〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️</h4><p>离上次更新已经有好几天了，今天抽空更新的内容是<code>Middleware</code>（中间件）。</p><h1 id="Middleware（中间件）的作用"><a href="#Middleware（中间件）的作用" class="headerlink" title="Middleware（中间件）的作用"></a>Middleware（中间件）的作用</h1><p><code>Middleware</code>是在<code>Actions</code>和<code>Dispatcher</code>之间嵌入的为了解决某些问题、提高我们开发效率而存在的工具。<br>下面介绍三种常用的中间件：</p><ul><li><a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener">redux-thunk</a> 中间件：项目中的异步操作需要用到（例如：请求服务器数据、本地存储等）。</li><li><a href="https://github.com/redux-utilities/redux-actions" target="_blank" rel="noopener">redux-actions</a> 中间件：帮助处理和创建操作<code>actions</code>（本文不做介绍，后续项目复杂后可以使用它来创建）。</li><li><a href="https://github.com/evgenyrodionov/redux-logger" target="_blank" rel="noopener">redux-logger</a> 中间件：用来打印 <code>action</code> 日志。<br>开启<code>react native</code>远程调试模式，操作demo就能在控制台看到打印的状态前后变化。<br><img src="http://upload-images.jianshu.io/upload_images/5683553-f1021a84fc996c5c?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="状态日志"></li></ul><p>加入中间件后的示意图如下：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-30f836fdac15078a?imageMogr2/auto-orient/strip" alt="加入中间件后的示意图"></p><h1 id="核心代码详解"><a href="#核心代码详解" class="headerlink" title="核心代码详解"></a>核心代码详解</h1><p>本次<code>demo</code>代码讲解为了减少文章篇幅，只会讲解涉及到<code>Middleware</code>的部分，也就是说 <code>demo</code>中在<code>reducers</code> 、<code>components</code> 、<code>containers</code>文件加下新增的文件不会做过多的解释，如果不理解，可以返回去把第一次更新的内容再解析一遍。</p><p><code>actions/types.js</code>新增如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//请求帖子列表</span><br><span class="line">export const REQUEST_POSTS = &apos;REQUEST_POSTS&apos;;</span><br><span class="line">//帖子返回数据</span><br><span class="line">export const RECEIVE_POSTS = &apos;RECEIVE_POSTS&apos;;</span><br><span class="line">//切换数据源</span><br><span class="line">export const SELECT_SUBREDDIT = &apos;SELECT_SUBREDDIT&apos;;</span><br><span class="line">//使缓存过期失效</span><br><span class="line">export const INVALIDATE_SUBREDDIT = &apos;INVALIDATE_SUBREDDIT&apos;;</span><br></pre></td></tr></table></figure></p><p><code>actions/index.js</code>新增如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">export const selectSubreddit = subreddit =&gt; (&#123;</span><br><span class="line">    type: SELECT_SUBREDDIT,</span><br><span class="line">    subreddit</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const invalidateSubreddit = subreddit =&gt; (&#123;</span><br><span class="line">    type: INVALIDATE_SUBREDDIT,</span><br><span class="line">    subreddit</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const requestPosts = subreddit =&gt; (&#123;</span><br><span class="line">    type: REQUEST_POSTS,</span><br><span class="line">    subreddit</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const receivePosts = (subreddit, json) =&gt; (&#123;</span><br><span class="line">    type: RECEIVE_POSTS,</span><br><span class="line">    subreddit,</span><br><span class="line">    posts: json.data,</span><br><span class="line">    receivedAt: Date.now()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const fetchPosts = subreddit =&gt; dispatch =&gt; &#123;</span><br><span class="line">    // API 发起请求</span><br><span class="line">    dispatch(requestPosts(subreddit));</span><br><span class="line">    return fetch(`http://localhost:8081/data/$&#123;subreddit&#125;.json`)</span><br><span class="line">        .then(response =&gt; response.json())</span><br><span class="line">        .then(json =&gt; &#123;</span><br><span class="line">            setTimeout(()=&gt;&#123;</span><br><span class="line">                //使用 API 请求结果来更新应用的 state</span><br><span class="line">                dispatch(receivePosts(subreddit, json))</span><br><span class="line">            &#125;,2000);</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const shouldFetchPosts = (state, subreddit) =&gt; &#123;</span><br><span class="line">    const posts = state.postsBySubreddit[subreddit];</span><br><span class="line">    if (!posts) &#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    if (posts.isFetching) &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    return posts.didInvalidate</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const fetchPostsIfNeeded = subreddit =&gt; (dispatch, getState) =&gt; &#123;</span><br><span class="line">    if (shouldFetchPosts(getState(), subreddit)) &#123;</span><br><span class="line">        return dispatch(fetchPosts(subreddit))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong><em>释</em></strong></p><p><strong><em>以上主要需要注意的是</em></strong></p><blockquote><ul><li><code>fetchPosts</code>返回了一个函数，而普通的 <code>Action 创建函数</code> 默认返回一个对象。</li><li>返回的函数的参数是<code>dispatch</code>和<code>getState</code>这两个 <code>Redux</code> 方法，普通的 <code>Action 创建函数</code> 的参数是 <code>Action</code> 的内容。</li><li>在返回的函数之中，先发出一个 <code>Action</code>: <strong>dispatch(requestPosts(subreddit))</strong>，表示操作开始。</li><li>异步操作结束之后，再发出一个 <code>Action</code>: <strong>receivePosts(subreddit, json)</strong>，表示操作结束。</li></ul></blockquote><p><strong><em>demo中数据源解释：</em></strong></p><blockquote><p>本来打算用官方的 <a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/async" target="_blank" rel="noopener">reddit demo</a> API，最终发现官方给出的<code>demo</code>请求数据会报错，所以使用了本地的json数据，延迟两秒模拟网络API加载数据的过程。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5683553-aa5672da45244223?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="官方提供的redditAPI无法使用"></p><hr><p><code>App.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; applyMiddleware, createStore &#125; from &apos;redux&apos;</span><br><span class="line">import &#123; createLogger &#125; from &apos;redux-logger&apos;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;</span><br><span class="line">import LoadPosts from &apos;./js/containers/LoadPosts&apos;</span><br><span class="line">import rootReducer from &apos;./js/reducers&apos;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const logger = createLogger();</span><br><span class="line">        const store = createStore(</span><br><span class="line">            rootReducer,</span><br><span class="line">            applyMiddleware(thunk, logger)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        return (</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;LoadPosts/&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>释</em></strong></p><p>相比前一个<code>demo</code>的<code>App.js</code>，在<code>createStore</code>的时候参数有变化，多了一个<code>applyMiddleware(thunk, logger)</code>中间件的参数。<br>理解了第一次更新内容的童鞋不难看出，<code>Action</code> 是由<code>store.dispatch</code>方法发送的。而<code>store.dispatch</code>方法正常情况下，参数只能是对象，不能是函数。<br>为了解决这个问题，就要使用到中间件<a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="noopener"><code>redux-thunk</code></a>改造<code>store.dispatch</code>，使<code>store.dispatch</code>可以接受函数作为参数。</p><p><strong><em>注意</em></strong></p><blockquote><p>有的中间件有次序要求，使用前要查一下文档。比如，logger就一定要放在最后，否则输出结果会不正确。</p></blockquote><hr><p>到此本次写作到此结束。</p><h4 id="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-2"><a href="#〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-2" class="headerlink" title="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"></a>〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️</h4><h4 id="⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️-1"><a href="#⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️-1" class="headerlink" title="⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️"></a>⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️</h4><h4 id="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-3"><a href="#〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-3" class="headerlink" title="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"></a>〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️</h4><p>接着更新关于集成<code>navigation</code>的集成，如果使用过比较老版本的<code>react native</code>都知道在<code>react-navigation</code>没有兴起之前，大多数开发者都使用的官方提供的 <code>Navigator</code>，直到 <code>react native</code> <a href="https://github.com/facebook/react-native/tree/v0.44.3" title="v0.44.3" target="_blank" rel="noopener">v0.44.3</a> 发布时宣布已经遗弃<code>Navigator</code>。<br><img src="https://upload-images.jianshu.io/upload_images/5683553-ba9ab49e21680ff5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br>因为我之前项目中只用过 <code>Navigator</code>或者 <code>react-navigation</code>，所以我并不知道市场上还有多少类似的导航解决方案，这次通过项目空档期，又深入了解了一下，目前市场上比较流行的三款导航器：</p><ul><li><h1 id="react-navigation"><a href="#react-navigation" class="headerlink" title="react navigation"></a><a href="https://github.com/react-navigation/react-navigation" target="_blank" rel="noopener">react navigation</a></h1><blockquote><p>这是官方推荐的，在 <code>github</code> 上已有 <code>1.35W+</code> 的 🌟，由<code>React Native</code>社区维护，目前，它是最受欢迎的<code>React Native</code>导航库。它完全用<code>JavaScript</code>编写，而不是使用本机<code>API</code>，它重新创建了一些子集。这个选择允许用户定制导航体验的任何部分，而无需学习<code>iOS</code>或<code>Android</code>导航逻辑。因为<code>React Navigation的</code>大部分逻辑都是在<code>JavaScript</code>中而不是在本机中运行，所以任何阻止<code>JavaScript</code>线程的情况都会造成卡顿显现。另外说明一下 <code>react navigation</code>的v1版本跟v2版本差别挺大的，如果想了解的童鞋可以看我前面写的这篇文章  <a href="https://www.jianshu.com/p/05fd0e9bc12a" target="_blank" rel="noopener"><a href="https://www.jianshu.com/p/05fd0e9bc12a" target="_blank" rel="noopener">react native 强大的navigation V2.0+</a></a>。</p></blockquote></li></ul><p>目前官方文档中已经明确提出:</p><p><strong><em>Warning: in the next major version of React Navigation, to be released in Fall 2018, we will no longer provide any information about how to integrate with Redux and it may cease to work. Issues related to Redux that are posted on the React Navigation issue tracker will be immediately closed. Redux integration may continue to work but it will not be tested against or considered when making any design decisions for the library.</em></strong></p><p><strong><em>Some folks like to have their navigation state stored in the same place as the rest of their application state. </em>Think twice before you consider doing this, there is an incredibly good chance that you do not need to do this!<em>. Storing your React Navigation state in your own Redux store is likely to give you a very difficult time if you don’t know what you’re doing.</em></strong></p><p><strong><em>If your only reason for doing this is that you want to be able to perform navigation actions from outside of your components (eg: from a Redux middleware), you can learn more about this in <a href="https://reactnavigation.org/docs/en/navigating-without-navigation-prop.html" target="_blank" rel="noopener">navigating without the navigation prop</a>.</em></strong></p><p>翻译：</p><p><strong><em>警告: 在下一个大版本的 React Navigation 中, 将在2018年秋季发布, 我们将不再提供有关如何集成 Redux 的任何信息, 并且它可能会停止使用。 发布在 React Navigation issue tracker 中有关 Redux 的 issue，也将立即关闭。 Redux 集成可能会继续工作，但不会在为 library 作出任何设计决策时进行测试或考虑。</em></strong></p><p><strong><em>有些人喜欢将他们的 navigation state 存储在与其他的应用程序的 state 相同的位置。 </em>在你考虑这样做之前请三思, 但是有一个非常好的机会, 你可以不需要这样做!<em>。 如果你不知道自己要做什么，将 React Navigation state 存储在你自己的 Redux store 中可能会会很困难。</em></strong></p><p><strong><em>如果你这样做的唯一原因是希望能够从组件外部执行导航操作 (例如: 从 Redux 中间件), 你可以了解更多关于<a href="https://reactnavigation.org/docs/zh-Hans/navigating-without-navigation-prop.html" target="_blank" rel="noopener"> 不使用 navigation prop 进行导航 </a>的信息。</em></strong></p><p>翻译成通俗易懂的话就是：<code>React Navigation</code>在下个版本中将不会再特意考虑去兼容 <code>Redux</code>，用是可以用，但是出了问题需要自行解决。</p><p>哎，不理解官方为什么要这么做，可能是减少维护成本吧，但是这样做无疑是一个不明智但选择，也说不定会有惊喜，暂时期待一下吧。如果项目中集成了 <code>redux</code> 我个人不太推荐使用<code>React Navigation</code>。</p><ul><li><h1 id="react-native-router-flux"><a href="#react-native-router-flux" class="headerlink" title="react-native-router-flux"></a><a href="https://github.com/RNRF/react-native-router-flux" target="_blank" rel="noopener">react-native-router-flux</a></h1></li></ul><blockquote><p>它是基于 <code>React Navigation</code>，但提供了与其交互的不同<code>API</code>。在 <code>github</code> 上已有 <code>7600+</code> 的 🌟，它允许您在一个中心位置定义场景转换，而无需传递导航器对象，并且可以在代码中的任何位置轻松访问。 </p><p>最新的beta版本 - 4，除了其他更改之外，还介绍了抽屉支持和Mob-X驱动的导航状态机，它将导航逻辑与表示层分开。</p><ul><li><h1 id="react-native-navigation"><a href="#react-native-navigation" class="headerlink" title="react-native-navigation"></a><a href="https://github.com/wix/react-native-navigation" target="_blank" rel="noopener">react-native-navigation</a></h1>另一个流行的导航库是由 <a href="https://zh.wikipedia.org/wiki/Wix.com" target="_blank" rel="noopener">Wix</a> 开源团队开发的<code>React Native Navigation</code>，在 <code>github</code> 上已经接近<code>9000+</code> 的 🌟，它的最大优势是跨平台界面覆盖的100％本机平台导航，具有开箱即用的<code>Redux</code>支持。 </li></ul><p>您需要为<code>iOS</code>和<code>Android</code>单独配置此软件包，其中包括链接<code>iOS</code>库，更新<code>iOS</code>标头搜索路径，在<code>Android</code> <code>MainActivity</code>中扩展<code>SplashActivity</code>而不是<code>ReactActivity</code>以及文档中详细描述的其他几个步骤。完成后，您只需要注册所有应用程序的屏幕并启动应用程序。</p></blockquote><p>目前官方文档中也提出:</p><p><strong><em>Note: example redux is deprecated. Since we did not have enough time and resources to maintain both example projects, we decided to stop maintaining the redux example. This does not mean redux can’t be used with react-native-navigation (In fact, we use redux in the Wix app). For a working example project which uses redux with RNN you can refer to <a href="https://github.com/JuneDomingo/movieapp" target="_blank" rel="noopener">JuneDomingo/movieapp</a>.</em></strong></p><p>翻译：</p><p><strong><em>注意：不推荐使用示例redux。由于我们没有足够的时间和资源来维护这两个示例项目，因此我们决定停止维护redux示例。这并不意味着redux不能与react-native-navigation一起使用（事实上，我们在Wix应用程序中使用redux）。对于使用带RNN的redux的工作示例项目，您可以参考JuneDomingo / movieapp。</em></strong></p><p><strong><em>综上所诉：就个人而言，从<code>react navigation</code> 和 <code>react-native-navigation</code> 官方对 <code>Redux</code>的态度完全是不一样的，至少<code>Wix</code>内部在使用<code>Redux</code>。 如果项目中需要使用<code>Redux</code>，我的第一选择会是<code>React Native Navigation</code>，因为它是纯原生体验，而且对<code>Redux</code>支持很好 。如果在不使用<code>Redux</code> 的项目中，可以尝试前两种导航，这两种导航体验也不错的，非常接近原生体验了。</em></strong></p><h1 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h1><p><strong><em>本文导航选择使用 <code>react-native-navigation</code>，关于<code>react-native-navigation</code>的集成和API使用请参考<a href="https://wix.github.io/react-native-navigation/#/" target="_blank" rel="noopener">官方文档</a>，如果想了解在  <code>React Navigation</code> 中使用 <code>redux</code> <a href="https://reactnavigation.org/docs/en/redux-integration.html" target="_blank" rel="noopener">点这里</a> 或者 <a href="https://medium.com/@relferreira/react-native-redux-react-navigation-ecec4014d648" target="_blank" rel="noopener">这里</a>，以下是这次更新改变和新增的文件代码</em></strong><br><code>index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//discard (废弃)</span><br><span class="line">import &#123; AppRegistry &#125; from &apos;react-native&apos;;</span><br><span class="line">AppRegistry.registerComponent(&apos;ReduxForReactNativeDemo&apos;, () =&gt; App);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//new</span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line">new App();</span><br></pre></td></tr></table></figure><hr><p><code>App.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; applyMiddleware, createStore &#125; from &apos;redux&apos;</span><br><span class="line">import &#123; createLogger &#125; from &apos;redux-logger&apos;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;</span><br><span class="line">import rootReducer from &apos;./js/reducers&apos;</span><br><span class="line">import &#123; Navigation &#125; from &apos;react-native-navigation&apos;</span><br><span class="line">import &#123; registerScreens &#125; from &apos;./js/components/screens&apos;</span><br><span class="line"></span><br><span class="line">const logger = createLogger();</span><br><span class="line">const store = createStore(</span><br><span class="line">    rootReducer,</span><br><span class="line">    applyMiddleware(thunk, logger)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">registerScreens(store, Provider);</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line"></span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">       super(props);</span><br><span class="line">       this._startApp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _startApp = () =&gt; &#123;</span><br><span class="line">        Navigation.startTabBasedApp(&#123;</span><br><span class="line">            tabs: [</span><br><span class="line">                &#123;</span><br><span class="line">                    label: &apos;Home&apos;,</span><br><span class="line">                    screen: &apos;ReduxForReactNativeDemo.HomeScreen&apos;,</span><br><span class="line">                    icon: require(&apos;./res/img/ic_home.png&apos;),</span><br><span class="line">                    // selectedIcon: require(&apos;./img/checkmark.png&apos;),</span><br><span class="line">                    title: &apos;Home&apos;,</span><br><span class="line">                    overrideBackPress: false,</span><br><span class="line">                    navigatorStyle: &#123;&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    label: &apos;Posts&apos;,</span><br><span class="line">                    screen: &apos;ReduxForReactNativeDemo.PostsScreen&apos;,</span><br><span class="line">                    icon: require(&apos;./res/img/ic_news.png&apos;),</span><br><span class="line">                    // selectedIcon: require(&apos;./img/checkmark.png&apos;),</span><br><span class="line">                    title: &apos;Posts&apos;,</span><br><span class="line">                    navigatorStyle: &#123;&#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>比起上个版本的<code>demo</code>，整个<code>App.js</code>文件代码基本都改了</em></strong></p><hr><p><strong><em>其他改变</em></strong></p><p>在<code>components</code>目录下新增<code>screens</code>目录，该文件夹下放一个一个的界面文件，每个界面里面又由多个组件组成。</p><ul><li><code>Group.js</code>改名为<code>HomeScreen.js</code>。</li><li>新增<code>PostsDetail.js</code>、<code>PostsScreen.js</code>、<code>index.js</code>，<code>index.js</code>文件作用是注册所有界面文件。</li><li><code>Posts.js</code>新增<code>item</code>点击事件，点击后进入列表详细界面。</li><li><code>LoadPosts.js</code> <code>68</code> 行新增 <code>{...this.props}</code>，为了在 <code>Posts.js</code>里面可以通过 <code>this.props</code>获取到<code>navigator</code>。</li><li>根目录下新增<code>res</code>资源文件夹。</li></ul><hr><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>本次结构分析就到这里了，说下三个<code>demo</code>版本连贯做下来的感受吧。讲真这次对我本人来说学到很多东西，实践过程中也遇到各种问题，查阅海量资源，有很多疑问，最终一一攻破，答案慢慢浮出水面。看过很多<code>demo</code>千奇百怪的写法都有，很少见到标准的项目工程结构，大多都是为了实现效果为目的，而不能在实际项目中去使用这种项目结构，我文章开始阶段我就介绍我了为什么要花这些时间和精力来写这篇技术文章。我会把这种工程结构运用到以后集成了<code>redux</code> 的项目中。找到一份好的学习资料真的很不容易，如果你也觉得不错的话，不妨把 ❤️ 点亮，让更多人发现它。</p><hr><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>附上  <a href="https://github.com/giantss/ReduxForReactNativeDemo" target="_blank" rel="noopener">demo</a>  ，欢迎 ❤️⭐️👏 指出错误或者发布自己的见解探讨，共勉。🤝</p><p><strong><em>注意</em></strong></p><p>直接 <code>clone</code> 下来运行的话，默认看到是最后一次(v3)更新的内容 <code>demo</code>，<br>执行<code>git tag</code>可以看到的demo有三个 <code>tag</code>，如果切换到前两次更新的 <code>demo</code>内容：根目录下执行:</p><p>切换到v0.1</p><blockquote><p>git checkout -b dev v0.1     </p></blockquote><p>切换到v0.2</p><blockquote><p>git checkout -b dev v0.2      </p></blockquote><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/13/Redux-for-react-native-指南/">https://giantss.github.io/blog/2018/10/13/Redux-for-react-native-指南/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> react native </tag>
            
            <tag> Redux </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react native 强大的navigation V2.0+</title>
      <link href="/blog/2018/10/10/react-native-%E5%BC%BA%E5%A4%A7%E7%9A%84navigation-V2-0/"/>
      <url>/blog/2018/10/10/react-native-%E5%BC%BA%E5%A4%A7%E7%9A%84navigation-V2-0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 笔者在V2版之前使用的版本是 <code>1.5.1</code>，现项目中升级到<code>2.6.2</code>。以下是我使用这两个版本的一些经验，分享给大家，希望节省大家一些宝贵的时间。</p><h1 id="注意-优化项"><a href="#注意-优化项" class="headerlink" title="注意/优化项"></a>注意/优化项</h1><h4 id="导航器导出名字改变"><a href="#导航器导出名字改变" class="headerlink" title="导航器导出名字改变"></a>导航器导出名字改变</h4><p>升级前：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; StackNavigator, TabNavigator, DrawerNavigator&#125; from &apos;react-navigation&apos;</span><br></pre></td></tr></table></figure></p><p>升级后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;  createStackNavigator, createBottomTabNavigator, createDrawerNavigator &#125; from &apos;react-navigation&apos;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="新增getParam-‘id’-‘默认值’"><a href="#新增getParam-‘id’-‘默认值’" class="headerlink" title="新增getParam(‘id’, ‘默认值’);"></a>新增getParam(‘id’, ‘默认值’);</h4><p>通过<code>navigate</code>传餐到下一个界面可以设置默认值了，再也不用在接受的界面使用三元表达式判断传入值是否存在了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123;navigation&#125; = this.props;</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            id: navigation.getParam(&apos;id&apos;, 0) //如果没有接收到id，给id赋值为0</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>我在使用 <code>1.5.1</code>版的时候遇到过下面这样的需求：</p><blockquote><p>需求一：界面跳转：需要实现 <code>A——&gt;B</code>   <code>B——&gt;C</code>   <code>C——&gt;A</code>，甚至更深层次的界面跳转到<code>A</code>。</p></blockquote><blockquote><p>需求二：需要使用多个导航器，而且相互之间不影响。(引导页，登陆，注册，忘记密码的等界面的实现)。</p></blockquote><blockquote><p>需求三：一个界面多次被使用，（比如一个社交的<code>帖子详情</code>，点击头像进入<code>个人主页</code>，在<code>个人主页</code>中点击帖子，又进入到<code>帖子详情</code>，然后再点击帖子中的头像进入到<code>个人主页</code>。这样<code>帖子详情</code> <code>个人主页</code>两个界面会被无限循环调用）。</p></blockquote><blockquote><p>需求四：快速点击时跳转下个界面，不要跳转多个相同的界面（这应该算<code>V1+</code>的一个缺陷）。</p></blockquote><p><strong><em>接下来我就根据上面的几个需求来分析在 <code>V1.0+</code> 和<code>V2.0+</code> 分别是如何实现的：</em></strong></p><blockquote><p>需求一 <code>V1.0+</code>：</p><p>我的实现思路是：<br>使用<code>DeviceEventEmitter</code>在B界面注册了一个返回上一个界面的<code>goback</code>事件, 事件触发时执行<code>this.props.naviagtion.goBack();</code>，然后在C界面先调用<code>DeviceEventEmitter.emit(&#39;B界面注册的事件名&#39;)</code>，然后再调用 <code>this.props.naviagtion.goBack()</code>就能达到  <code>C——&gt;A</code>的效果。虽然实现了，但是心里暗地里说了一句mmp。</p><p>需求一<code>V2.0+</code>：</p><p>直接在<code>C</code>界面调用<code>this.props.naviagtion.navigate(&#39;A&#39;)</code>就可以实现 <code>C——&gt;A</code>的效果，如果A是首页的话可以调用<code>this.props.naviagtion.popToTop()</code>。</p></blockquote><blockquote><p>需求二<code>V1.0+</code>：</p><p>登陆注册界面：使用的是<code>Modal</code>组件，自定义的全屏悬浮窗。</p><p>需求二<code>V2.0+</code>：</p><p>在<code>V2.0</code>中提供了一个<code>createSwitchNavigator</code>,这个组件的作用个人的理解是导航器分离，永远只展示一个导航器，你可以设置多个导航器，并且当多个导航器相互切换的时候都会销毁掉其他导航器。（如何嵌套实现请看最后面的代码）</p></blockquote><blockquote><p>需求三<code>V1.0+</code>：</p><p>正常使用<code>this.props.navigation.navigate(&#39;A&#39;)</code>可以实现这种效果（但是点击太快会多次导航到同一个界面）。</p><p>需求三<code>V2.0+</code>：</p><p>需要注意的是<code>V2.0+</code>实现这种效果需要调用 <code>this.props.navigation.push(&#39;A&#39;)</code>,如果调用了<code>this.props.navigation.navigate(&#39;A&#39;)</code>你会发现当<code>A</code>已经在导航栈中界面跳转效果是返回到这个界面的效果；如果<code>A</code>是当前界面，再次调用<code>navigate(&#39;A&#39;)</code>没有任何效果，但是<code>push(&#39;A&#39;)</code>还可以继续导航到<code>A</code>界面。</p></blockquote><blockquote><p>需求四<code>V1.0+</code>：</p><p>解决方案：在你配置导航器的<code>.js</code>文件最下面 <code>export default xxx</code>之前粘贴下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**解决点击太快跳转连续跳转多个界面**/</span><br><span class="line"></span><br><span class="line">   //主要是这一步</span><br><span class="line">   const navigateOnce = (getStateForAction) =&gt; (action, state) =&gt; &#123;</span><br><span class="line">       const &#123;type, routeName&#125; = action;</span><br><span class="line">       return (</span><br><span class="line">           state &amp;&amp;</span><br><span class="line">           type === NavigationActions.NAVIGATE &amp;&amp;</span><br><span class="line">           routeName === state.routes[state.routes.length - 1].routeName</span><br><span class="line">       ) ? null : getStateForAction(action, state);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   //这是第二步</span><br><span class="line">   MainStackNavigator.router.getStateForAction = navigateOnce(MainStackNavigator.router.getStateForAction);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>需求四<code>V2.0+</code>：</p><p>只需要正常调用<code>this.props.navigation.navigate(&#39;A&#39;)</code>就可以了，官方已经修复了这个bug。</p></blockquote><h1 id="各种导航器嵌套代码"><a href="#各种导航器嵌套代码" class="headerlink" title="各种导航器嵌套代码"></a>各种导航器嵌套代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">    createStackNavigator,</span><br><span class="line">    createBottomTabNavigator,</span><br><span class="line">    createDrawerNavigator,</span><br><span class="line">    createSwitchNavigator,</span><br><span class="line">&#125; from &apos;react-navigation&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const navigationOptions = &#123;</span><br><span class="line">    headerStyle:&#123;</span><br><span class="line">        backgroundColor: &apos;#fff&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    headerTintColor: &apos;#666666&apos;,</span><br><span class="line">    headerBackTitle: null,</span><br><span class="line">    headerTitleStyle: &#123;</span><br><span class="line">        fontWeight: &apos;bold&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">    drawerLockMode:&apos;locked-closed&apos; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">        //首页导航器</span><br><span class="line">const HomeStack = createStackNavigator(</span><br><span class="line">    &#123;</span><br><span class="line">        Home: HomeScreen,</span><br><span class="line">        HomeDetail: HomeDetailScreen,</span><br><span class="line">        //其他首页导航栈下的界面</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        navigationOptions:navigationOptions</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">        //新闻导航器</span><br><span class="line">const NewsStack = createStackNavigator(&#123;</span><br><span class="line">        News: NewsScreen,</span><br><span class="line">        NewsDetail: NewsDetailScreen,</span><br><span class="line">         //其他新闻导航栈下的界面</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        navigationOptions:navigationOptions</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //登陆、注册等导航器</span><br><span class="line">const LoginStack = createStackNavigator(</span><br><span class="line">    &#123;</span><br><span class="line">        Login: LoginScreen,</span><br><span class="line">        Register: RegisterScreen,</span><br><span class="line">        Bind: BindScreen,</span><br><span class="line">        UserProtocol: UserProtocolScreen</span><br><span class="line">      //其他登陆导航栈下的界面</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        navigationOptions:navigationOptions</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //tab点击切换导航器</span><br><span class="line">const Tab = createBottomTabNavigator(&#123;</span><br><span class="line">    Home: HomeStack,</span><br><span class="line">    News: NewsStack</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    initialRouteName: &apos;Home&apos;,</span><br><span class="line">    tabBarOptions: &#123;</span><br><span class="line">        showLabel: false,</span><br><span class="line">        style:&#123;</span><br><span class="line">            height:0 //隐藏底部切换</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    //侧滑导航器</span><br><span class="line">const drawerNavigator = createDrawerNavigator(&#123;</span><br><span class="line">    bottomTab: Tab,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    drawerWidth: width-120,</span><br><span class="line">    contentComponent: CustomDrawerContentComponent</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //最后导出Switch导航器</span><br><span class="line">export default createSwitchNavigator(&#123;</span><br><span class="line">    drawerNavigator: drawerNavigator,</span><br><span class="line">    loginStack: LoginStack,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> <strong><em>本次写作到此，欢迎❤️⭐️👏指出错误或者发布自己的见解探讨，共勉。🤝</em></strong></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/10/react-native-强大的navigation-V2-0/">https://giantss.github.io/blog/2018/10/10/react-native-强大的navigation-V2-0/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> react native </tag>
            
            <tag> react navigation </tag>
            
            <tag> 升级 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于react native 第三方组件安装、卸载的一些注意事项</title>
      <link href="/blog/2018/10/10/%E5%85%B3%E4%BA%8Ereact-native-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E3%80%81%E5%8D%B8%E8%BD%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/blog/2018/10/10/%E5%85%B3%E4%BA%8Ereact-native-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E3%80%81%E5%8D%B8%E8%BD%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>我使用的react native版本是 0.49.5，在开发的过程中经常会遇到安装、卸载的操作，一不小心（没有安装流程做）项目运行的就会报各种错误。建议在把第三方组件引入正式项目工程之前先在demo工程中跑通，否者你会浪费很多不必要的时间。下面是正常安装、卸载流程。</p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>1，正确的安装方式是 <code>npm install xxx --save</code>，经常看到许多组件安装文档上后面没有 <code>--save</code>，如果没有建议加上 否则组件信息不会出现在<code>package.json</code>中，导入组件的时候可能会找不到路径。</p><p>2，安装完成后执行一下 <code>react-native link xxx</code>。<br><a id="more"></a></p><h2 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h2><p>1，在卸载之前先执行 <code>react-native unlink xxx</code>。<br>2，然后在执行 <code>npm uninstall xxx --save</code> 别忘了加<code>--save</code>。</p><p><strong><em>卸载的时候特别注意，如果卸载的组件有<code>link</code>的，<code>uninstall</code>之前一定要先<code>unlink</code>，否则运行项目会报错的（如果你没有在<code>uninstall</code>之前先<code>unlink</code>且运行已经报错了，重新按照安装卸载流程再走一遍就ok了）。</em></strong></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/10/关于react-native-第三方组件安装、卸载的一些注意事项/">https://giantss.github.io/blog/2018/10/10/关于react-native-第三方组件安装、卸载的一些注意事项/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> react native </tag>
            
            <tag> 第三组件 </tag>
            
            <tag> 安装 </tag>
            
            <tag> 卸载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS使用的一些小技巧/高级进阶</title>
      <link href="/blog/2018/10/10/CSS%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/"/>
      <url>/blog/2018/10/10/CSS%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>最近闲暇时间在看鑫爷的<a href="http://www.cssworld.cn/" target="_blank" rel="noopener">《CSS世界》</a>，内容真的是非常精彩，很多细节分析的非常透彻，值得推荐。在日常开发中实现某种效果有很多方式，但是下面的<code>css code</code>我以前都很少用到，原来css还可以这么玩 。。</p><h2 id="实现hover改变成另一张图片效果"><a href="#实现hover改变成另一张图片效果" class="headerlink" title="实现hover改变成另一张图片效果"></a>实现hover改变成另一张图片效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**css**/</span><br><span class="line">img: hover &#123; 　</span><br><span class="line">     content: url( laugh-tear. png);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">/**html code**/</span><br><span class="line">&lt; img src=&quot; laugh. png&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong><em>局限性：content 属性 改变 的 仅仅是 视觉 呈现， 当 我们 以 右键 或 其他 形式 保存 这张 图片 的 时候， 所 保存 的 还是 原来 src 对应 的 图片。</em></strong></p><a id="more"></a><h2 id="显示网站logo"><a href="#显示网站logo" class="headerlink" title="显示网站logo"></a>显示网站logo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt; h1&gt;logo&lt;/ h1&gt;</span><br><span class="line"> h1 &#123; 　 </span><br><span class="line">   content: url( logo. svg);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>优点：</p><blockquote><p>1，不会影响网站SEO。</p><p>2，使用.svg矢量图为了适应移动 端 retina 屏幕（如果用.svg会模<br>糊）。</p></blockquote><p><strong><em>注：千万不要自以为是地把重要的文本信息使用content 属性生成，因为这对可访问性和SEO都很不友好，content 属性只能用来生成 一些 无关紧要的内容， 如装饰性图形或者序号之类； 同样，也不要担心 原本重要的文字信息会被content替换，替换的仅仅是视觉层。</em></strong></p><h2 id="设置内容无法选中、无法复制"><a href="#设置内容无法选中、无法复制" class="headerlink" title="设置内容无法选中、无法复制"></a>设置内容无法选中、无法复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user-select: none</span><br></pre></td></tr></table></figure><h2 id="“三道-杠”-小-图标-示意"><a href="#“三道-杠”-小-图标-示意" class="headerlink" title="“三道 杠” 小 图标 示意"></a>“三道 杠” 小 图标 示意</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd52c529c6?w=314&amp;h=270&amp;f=png&amp;s=300" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.icon-menu &#123; 　</span><br><span class="line">     display: inline-block; 　</span><br><span class="line">     width: 140px; </span><br><span class="line">     height: 10px; 　</span><br><span class="line">     padding: 35px 0; 　</span><br><span class="line">     border-top: 10px solid; 　</span><br><span class="line">     border-bottom: 10px solid; 　</span><br><span class="line">     background-color: currentColor; 　</span><br><span class="line">     background-clip: content-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双层-圆点-图形-示意"><a href="#双层-圆点-图形-示意" class="headerlink" title="双层 圆点 图形 示意"></a>双层 圆点 图形 示意</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd53928d89?w=288&amp;h=280&amp;f=png&amp;s=300" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.icon-dot &#123; 　</span><br><span class="line">     display: inline-block; 　 </span><br><span class="line">      width: 100px; </span><br><span class="line">      height: 100px; 　 </span><br><span class="line">      padding: 10px; 　</span><br><span class="line">      border: 10px solid; 　 　 　 </span><br><span class="line">      border-radius: 50%; 　 </span><br><span class="line">      background-color: currentColor; 　 </span><br><span class="line">      background-clip: content-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去掉最右边的margin-right：20"><a href="#去掉最右边的margin-right：20" class="headerlink" title="去掉最右边的margin-right：20"></a>去掉最右边的margin-right：20</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586ce1588a993?w=317&amp;h=209&amp;f=png&amp;s=908" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  /**方案一：使用css3 nth-of-type属性（不考虑兼容IE8**/</span><br><span class="line">li: nth-of-type(3n) &#123; </span><br><span class="line">　 margin-right: 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  /**方案二：通过给父容器添加margin属性， 增加容器的可用宽度来实现**/</span><br><span class="line">ul &#123; 　</span><br><span class="line">     margin-right: -20px; </span><br><span class="line">&#125;</span><br><span class="line"> ul &gt; li &#123; 　</span><br><span class="line">     float: left; 　</span><br><span class="line">     width: 100px; 　 </span><br><span class="line">     margin-right: 20px;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="margin：auto的妙用"><a href="#margin：auto的妙用" class="headerlink" title="margin：auto的妙用"></a>margin：auto的妙用</h2><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd5555f087?w=311&amp;h=166&amp;f=png&amp;s=372" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;demo&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .father &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            border: red solid 1px;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            position: absolute;  /**key code here**/</span><br><span class="line">            background-color: orange;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            margin: auto;  /**key code here**/</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="左／右对齐效果。"><a href="#左／右对齐效果。" class="headerlink" title="左／右对齐效果。"></a>左／右对齐效果。</h3><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd53c92097?w=320&amp;h=221&amp;f=png&amp;s=454" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        .father &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: red solid 1px;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            margin-right: 50px; /**左对齐margin-right、margin-left值交换**/</span><br><span class="line">            margin-left: auto;  /**key code here**/</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd5593f646?w=318&amp;h=210&amp;f=png&amp;s=455" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        .father &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: red solid 1px;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            margin-right: auto; /**key code here**/</span><br><span class="line">            margin-left: auto;  /**key code here**/</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>###垂直居中<br><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd56bbab63?w=310&amp;h=211&amp;f=png&amp;s=453" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        .father &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            writing-mode: vertical-lr;  /**key code here**/</span><br><span class="line">            border: red solid 1px;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            margin: auto;  /**key code here**/</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="实现最高渲染性能的去除下边框css"><a href="#实现最高渲染性能的去除下边框css" class="headerlink" title="实现最高渲染性能的去除下边框css"></a>实现最高渲染性能的去除下边框css</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div &#123; 　 </span><br><span class="line">    border: 1px solid; 　 </span><br><span class="line">    border-bottom: 0 none;  /**key code here**/</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="优雅的增加icon按钮点击区域"><a href="#优雅的增加icon按钮点击区域" class="headerlink" title="优雅的增加icon按钮点击区域"></a>优雅的增加icon按钮点击区域</h2><p>点击 区域 大小 从 16 × 16 一下子 提升 到 38 × 38，<br><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd7912d56e?w=668&amp;h=138&amp;f=png&amp;s=43797" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.icon- clear &#123; 　</span><br><span class="line">     width: 16px; 　 </span><br><span class="line">      height: 16px; 　 </span><br><span class="line">      border: 11px solid transparent; 　 /**key code here**/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最高性能等边三角图形绘制"><a href="#最高性能等边三角图形绘制" class="headerlink" title="最高性能等边三角图形绘制"></a>最高性能等边三角图形绘制</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd7f1625de?w=112&amp;h=41&amp;f=png&amp;s=168" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">     width: 0;</span><br><span class="line">     border: 10px solid;</span><br><span class="line">     border-color: #f30 transparent transparent;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="最高性能等腰三角图形绘制"><a href="#最高性能等腰三角图形绘制" class="headerlink" title="最高性能等腰三角图形绘制"></a>最高性能等腰三角图形绘制</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd85ba6e7e?w=42&amp;h=41&amp;f=png&amp;s=218" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    border-width: 20px 10px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: #f30 transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="又或者是这种三角形（对话框气泡下的三角形）"><a href="#又或者是这种三角形（对话框气泡下的三角形）" class="headerlink" title="又或者是这种三角形（对话框气泡下的三角形）"></a>又或者是这种三角形（对话框气泡下的三角形）</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd8651cd50?w=56&amp;h=58&amp;f=png&amp;s=251" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    border-width: 20px 10px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: #f30 #f30 transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最高性能梯形图形绘制"><a href="#最高性能梯形图形绘制" class="headerlink" title="最高性能梯形图形绘制"></a>最高性能梯形图形绘制</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd8b57e230?w=114&amp;h=31&amp;f=png&amp;s=166" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 10px;</span><br><span class="line">    height: 10px;</span><br><span class="line">    border: 10px solid;</span><br><span class="line">    border-color: #f30 transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逼真-的-3D-效果"><a href="#逼真-的-3D-效果" class="headerlink" title="逼真 的 3D 效果"></a>逼真 的 3D 效果</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd9757be69?w=49&amp;h=51&amp;f=png&amp;s=249" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 10px;</span><br><span class="line">    height: 10px;</span><br><span class="line">    border: 10px solid;</span><br><span class="line">    border-color: #f30 #00f #396 #0f0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="被遗忘的ex单位"><a href="#被遗忘的ex单位" class="headerlink" title="被遗忘的ex单位"></a>被遗忘的<code>ex</code>单位</h2><p>实现箭头居中文字垂直方向（不受字体、字号影响）<br><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cda4148848?w=203&amp;h=56&amp;f=png&amp;s=200" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;demo&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">        .icon-arrow &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 1ex;</span><br><span class="line">            background: url(arrow.svg) no-repeat center/20px 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div style=&quot;font-size: 18px&quot;&gt;</span><br><span class="line">       箭头居中对齐</span><br><span class="line">        &lt;i class=&quot;icon-arrow&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="永远居中的dialog（可兼容到IE7）"><a href="#永远居中的dialog（可兼容到IE7）" class="headerlink" title="永远居中的dialog（可兼容到IE7）"></a>永远居中的<code>dialog</code>（可兼容到IE7）</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cdab980a2b?w=455&amp;h=374&amp;f=png&amp;s=300" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;demo&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">       .container &#123;</span><br><span class="line">           position: fixed;</span><br><span class="line">           top:0;</span><br><span class="line">           right: 0;</span><br><span class="line">           left: 0;</span><br><span class="line">           bottom: 0;</span><br><span class="line">           background-color: rgba(0,0,0,.5);</span><br><span class="line">           text-align: center;</span><br><span class="line">           font-size: 0;</span><br><span class="line">           white-space: nowrap;</span><br><span class="line">           overflow: auto;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       .container:after &#123;</span><br><span class="line">           content: &apos;&apos;;</span><br><span class="line">           display: inline-block;</span><br><span class="line">           height: 100%;</span><br><span class="line">           vertical-align: middle;</span><br><span class="line">       &#125;</span><br><span class="line">       .content &#123;</span><br><span class="line">           width: 240px;</span><br><span class="line">           height: 120px;</span><br><span class="line">           padding: 20px;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       .dialog &#123;</span><br><span class="line">           display: inline-block;</span><br><span class="line">           vertical-align: middle;</span><br><span class="line">           border-radius: 6px;</span><br><span class="line">           background-color: #fff;</span><br><span class="line">           font-size: 14px;</span><br><span class="line">           white-space: normal;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;content&quot;&gt;这dialog永远居中&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="去除页面默认滚动条-PC端有效"><a href="#去除页面默认滚动条-PC端有效" class="headerlink" title="去除页面默认滚动条(PC端有效)"></a>去除页面默认滚动条(PC端有效)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**good code**/</span><br><span class="line"> html &#123;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">/**bad code**/</span><br><span class="line"> html, body &#123;    </span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong><em>本次写作到此，欢迎❤️⭐️👏指出错误或者发布自己的见解探讨，共勉。🤝</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react native 国际化(多语言)</title>
      <link href="/blog/2018/10/10/react-native-%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
      <url>/blog/2018/10/10/react-native-%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>效果图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-514187ccb600f7cf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="5ACF79A333C7F62349D712BC29EC5BA9.jpg"></p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-7302a6b7ae026bf3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="C8412602F259771C656EF19DD62A93A0.jpg"><br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/5683553-9ba73124db94d1fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="B20051984E994AB1EE5588476BE245B7.jpg"><br>应留言的要求，我觉得需要花点时间整理一下关于多语言的资料了，献给各位小伙伴希望能带给大家一些思路。由于一些特殊的原因上图项目不好做为开源项目提供给大家，所以我自己写了一个小demo（<code>源码见文尾</code>），废话不多说开始正题。</p><h2 id="准备阶段："><a href="#准备阶段：" class="headerlink" title="准备阶段："></a>准备阶段：</h2><ul><li><a href="https://github.com/AlexanderZaytsev/react-native-i18n" target="_blank" rel="noopener">react-native-i18n</a> 第三方多语言库<br>安装: <code>yarn add react-native-i18n</code> </li><li><a href="[https://github.com/rebeccahughes/react-native-device-info](https://github.com/rebeccahughes/react-native-device-info">react-native-device-info</a><br>)   用户获取系统本地语言环境<br>安装: <code>yarn add react-native-device-info</code> and <code>react-native link react-native-device-info</code><h2 id="实践阶段："><a href="#实践阶段：" class="headerlink" title="实践阶段："></a>实践阶段：</h2>在项目中创建<code>zh.js</code>、<code>en.js</code>、<code>I18n.js</code>三个js文件，<code>DataRepository.js</code>是一个我自定义的数据持久化类，在这个demo中的作用是存取用户改变后的语言环境，直接拷贝过去就可以用(不是必须的)。<br><img src="http://upload-images.jianshu.io/upload_images/5683553-ab5d5a207b19973d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br>代码分别为：<br><code>zh.js</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    english: &apos;英文&apos;,</span><br><span class="line">    chinese: &apos;中文&apos;,</span><br><span class="line">    changeToEnglish: &apos;切换到英文&apos;,</span><br><span class="line">    changeToChinese: &apos;切换到中文&apos;,</span><br><span class="line">    changeToSystem: &apos;切换到系统语言&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>en.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    english: &apos;english&apos;,</span><br><span class="line">    chinese: &apos;chinese&apos;,</span><br><span class="line">    changeToEnglish: &apos;change to english&apos;,</span><br><span class="line">    changeToChinese: &apos;change to chinese&apos;,</span><br><span class="line">    changeToSystem: &apos;change to System&apos;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>I18n.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import I18n,&#123; getLanguages &#125; from &apos;react-native-i18n&apos;</span><br><span class="line">import DeviceInfo from &apos;react-native-device-info&apos;</span><br><span class="line">import DataRepository from &apos;../dao/DataRepository&apos;</span><br><span class="line">import en from &apos;./en&apos;</span><br><span class="line">import zh from &apos;./zh&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">I18n.defaultLocale = &apos;en&apos;;</span><br><span class="line"></span><br><span class="line">I18n.fallbacks = true;</span><br><span class="line"></span><br><span class="line">I18n.translations = &#123;</span><br><span class="line">    en,</span><br><span class="line">    zh,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">I18n.localeLanguage = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    new DataRepository().fetchLocalRepository(&apos;localLanguage&apos;)</span><br><span class="line">        .then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">            I18n.locale = res;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">            I18n.locale = DeviceInfo.getDeviceLocale();</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    return I18n.locale;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export &#123; I18n, getLanguages &#125;;</span><br></pre></td></tr></table></figure></p><h2 id="重点方法、属性讲解"><a href="#重点方法、属性讲解" class="headerlink" title="重点方法、属性讲解"></a>重点方法、属性讲解</h2><ul><li><code>I18n.t()</code> : 使用频率是最高的，举个栗子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">            &#123;I18n.t(&apos;english&apos;)&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br></pre></td></tr></table></figure></li></ul><p>以上<code>I18n.t(&#39;english&#39;)</code>中的<code>english</code>参数就是在<code>zh.js</code>、<code>en.js</code>文件中的语言配置项<br><img src="http://upload-images.jianshu.io/upload_images/5683553-f81ddb8b7c482946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/5683553-b9a76745699fe6d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br>具体显示内容会随着语言环境调用相应的语言配置文件，呈现给用户相应的语言内容。</p><ul><li><code>I18n.getLanguages</code> 获取用户首选的语言环境</li><li><code>I18n.locale</code> : 设置本地语言环境。</li><li><code>I18n.defaultLocale</code> 首选默认语言</li><li><code>I18n.fallbacks</code> : 看文档说明我理解的意思是：如果获取到的系统语言类似<code>en_US</code> <code>en-GB</code>这样的，插件初始化的时候发现没有<code>en_US.js</code> <code>en-GB.js</code>，这个时候如果设置了<code>I18n.fallbacks = true;</code>系统就会按这样的（<code>en_US</code> <code>en.js</code>）顺序去查找文件，就会去找有一个<code>en.js</code>这样的文件， 官方建议使用<code>I18n.fallbacks = true;</code><h4 id="更多关于i18n-js-的属性和方法请-点击这里查看"><a href="#更多关于i18n-js-的属性和方法请-点击这里查看" class="headerlink" title="更多关于i18n-js 的属性和方法请 点击这里查看"></a>更多关于<code>i18n-js</code> 的属性和方法请 <a href="https://github.com/fnando/i18n-js#setting-up" target="_blank" rel="noopener">点击这里查看</a></h4></li></ul><h1 id="ios需要配置语言环境："><a href="#ios需要配置语言环境：" class="headerlink" title="ios需要配置语言环境："></a>ios需要配置语言环境：</h1><p><img src="http://upload-images.jianshu.io/upload_images/5683553-87934a28a3fb8eb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"></p><h1 id="使用过程中发现一个刷新的问题："><a href="#使用过程中发现一个刷新的问题：" class="headerlink" title="使用过程中发现一个刷新的问题："></a>使用过程中发现一个刷新的问题：</h1><p>我在使用过程中发现调用了<code>I18n.locale=‘我设置的语言’</code>后，当前的界面语言并没有改变，而其他界面的语言已经改变了，就比如说我上面截图的侧滑菜单，当我在侧滑菜单切换语言后发现侧滑菜单里面的语言并没有发现变化，而首页的语言环境已经改变了，我不知道为什么，摸索最后找到了一种解决方案（可能不是最佳方案，但是解决了刷新当前界面语言的问题，如果有更好的方法欢迎👏分享），解决方案：调用一下<code>setState</code>（无论设置的这个<code>state</code>属性在<code>render</code>中有没有被使用，都有效）。 具体代码看<code>App.js</code>，我项目中有使用<code>localeLanguage</code>所以我把改变后的语言存到<code>state</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">           localeLanguage: I18n.locale</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-79a2f1e3eb27e3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/5683553-9edd85731af59d47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"></p><p><strong><em><a href="https://github.com/giantss/RNInternationalizedDemo" target="_blank" rel="noopener">demo</a> 在此 ，本次写作到此，欢迎❤️⭐️👏指出错误或者发布自己的见解探讨，共勉。🤝</em></strong></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/10/react-native-国际化-多语言/">https://giantss.github.io/blog/2018/10/10/react-native-国际化-多语言/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> react native </tag>
            
            <tag> 国际化 </tag>
            
            <tag> 多语言 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
