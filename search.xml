<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Redux for react native 指南(持续更新)</title>
      <link href="/blog/2018/09/27/Redux-for-react-native-%E6%8C%87%E5%8D%97-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/blog/2018/09/27/Redux-for-react-native-%E6%8C%87%E5%8D%97-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果要看理论的童鞋点击这里 <a href="https://cn.redux.js.org/" target="_blank" rel="noopener">redux中文文档</a> 或者 <a href="https://redux.js.org/" target="_blank" rel="noopener">redux官方文档</a> ，本文不会太刻意去介绍大篇幅的理论，本文不做框架之间的对比，只给想学<code>redux</code>的童鞋提供实质的、高效的、易理解的学习参考资源，分享自己在学习过程中的得到（文后有彩蛋 😄）。</p><p>老规矩先上图：<br><img src="https://user-gold-cdn.xitu.io/2018/9/27/16618756337e963c?w=270&amp;h=480&amp;f=gif&amp;s=226268" alt="效果图"><br>看过<a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos" target="_blank" rel="noopener">官方Todos demo</a>的童鞋可能会有点熟悉上图的操作，没错，这就是它的<code>react native</code>版。<br><a id="more"></a></p><h1 id="为什么我要写这个demo"><a href="#为什么我要写这个demo" class="headerlink" title="为什么我要写这个demo"></a>为什么我要写这个demo</h1><p>有的童鞋可能会有疑问<br>问：官方不是<code>Todos</code>demo吗？为什么还要写这个demo？<br>答：官方的demo都是<code>react</code>的，而并非<code>react native</code>的。我也找过很多关于介绍redux的文章，但我发现找到的资料要么太基础、要么介绍不全面、提供的demo下载无法使用等等各种问题，迫使我有了自己动手造轮的冲动，而且这个demo并非只是介绍关于redux的基础的东西，有空我还没陆续更新在使用<code>redux</code>过程中的得到，希望大家鼓励支持。</p><h1 id="demo采的代码规范"><a href="#demo采的代码规范" class="headerlink" title="demo采的代码规范"></a>demo采的代码规范</h1><p>通常一个大项目到后期是需要很多开发者参与的，如果每个开发者都使用自己的一套代码规范做事情，这样带来的后果就是：后期的代码管理工作带来非常大的麻烦，浪费更多的时间去重构，而且也会让新人看代码时理解花更多的时间，还容易把别人带沟里去，所以一个大型项目最初构建架构的时候就必须要遵守一些规范。<br>那么我们怎么能敲出清爽而又优雅的代码呢？又如何检查我们代码质量合格呢？<br>我在这里极力推荐遵守<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb/javascript</a>的规范和使用<a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>来检查自己代码的代码质量（是否遵守了规范），因为它们已经得到了很多公司和开发者的认可。（这里过多的介绍<code>airbnb</code> <code>eslint</code>，本文只提供思路，想了解更多自行搜索）<br>在没有使用代码规范前我们可能用各自的风格写了很多年的代码了，突然要适应这套规范可能非常不适应，没关系，多敲多练习，时间长了就习惯了，谁还没有一个过程，过程是痛苦的，但痛苦过后会给你带来质的升华，自己慢慢领悟体会。<br>如果还是坚持我行我素，那我也没办法的，我只能说好的东西是会被世界所接受，差的东西最终是要被淘汰的，所以做为一个合格的程序员（特别是前端程序员）要拥抱变化，因为它会使你变得更加的优秀，得到大众的认可。除非你不愿意让自己变得更优秀。（我回看几年前我写的代码，只能用一坨一坨的来形容 ，不知道你们是否也有这种感脚呢？😁）</p><h1 id="redux能帮我们做什么"><a href="#redux能帮我们做什么" class="headerlink" title="redux能帮我们做什么"></a>redux能帮我们做什么</h1><p>两张图示意：<br><img src="https://user-gold-cdn.xitu.io/2018/9/27/166187563364a099?w=600&amp;h=399&amp;f=png&amp;s=428741" alt="未使用redux的大型react native项目"><br><img src="https://user-gold-cdn.xitu.io/2018/9/27/166187563375203d?w=481&amp;h=586&amp;f=png&amp;s=400514" alt="使用redux后的大型react native项目"></p><h1 id="redux特性"><a href="#redux特性" class="headerlink" title="redux特性"></a>redux特性</h1><ul><li><p><strong>单一数据源： 整个应用的 <a href="https://cn.redux.js.org/docs/Glossary.html#state" target="_blank" rel="noopener">state</a> 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 <a href="https://cn.redux.js.org/docs/Glossary.html#store" target="_blank" rel="noopener">store</a> 中。</strong></p></li><li><p><strong>State 是只读的：唯一改变 state 的方法就是触发 <a href="https://cn.redux.js.org/docs/Glossary.html#action" target="_blank" rel="noopener">action</a>，action 是一个用于描述已发生事件的普通对象。</strong></p></li><li><p><strong>使用纯函数来执行修改：为了描述 action 如何改变 state tree ，你需要编写 <a href="https://cn.redux.js.org/docs/Glossary.html#reducer" target="_blank" rel="noopener">reducers</a>。</strong></p></li><li><p><strong>预见性：所有的用户的行为都是你提前定义好的。</strong></p></li><li><strong>统一管理state：所有的状态都在一个store中分配管理。</strong></li></ul><h1 id="哪些开发者和项目适合用redux"><a href="#哪些开发者和项目适合用redux" class="headerlink" title="哪些开发者和项目适合用redux"></a>哪些开发者和项目适合用redux</h1><p>这里只针对<code>react native</code>开发而言：</p><ul><li>初级：刚接触<code>react native</code>我非常不建议去使用，因为你还不知道怎么用它，建议先达到中级。</li><li>中级：使用<code>react native</code>做出一个以上已经上架的<code>不复杂</code>的应用 <code>redux</code>，也可以不使用，因为使用它并不能让你在前期快速的迭代开发，在这样的项目下使用<code>redux</code>就好比<code>大炮打蚊子</code>，副作用很大。但是可以先了解起来，并发现它的优点。这类相对简单的应用：当用户触发一个动作（程序需要<code>setState({xxx:xxx})</code>)的时候应用程序状态流程是这样的：<br><img src="https://user-gold-cdn.xitu.io/2018/9/27/16618756351af2b4?w=550&amp;h=325&amp;f=gif&amp;s=384959" alt="简单的状态流程"></li></ul><ul><li>高级：使用<code>react native</code>做出一个以上已经上架的<code>复杂</code>的应用(涉及到即时通讯、界面布局比较复杂，组件嵌套太多层次等)，而这类复杂应用：当用户触发一个动作（程序需要<code>setState({xxx:xxx})</code>)的时候应用程序状态流程是这样的：<br><img src="https://user-gold-cdn.xitu.io/2018/9/27/1661875634f01d51?w=550&amp;h=475&amp;f=gif&amp;s=2170979" alt="复杂的状态流程"></li></ul><p>这种状态带来的后果，两方面分析：</p><ul><li>性能：祖父子组件之间多余的状态传递，导致宝贵的内存资源浪费，同时界面渲染的速度也会变慢，自然用户体验就变差了。</li><li>状态管理：当程序不断的迭代，界面布局越来越复杂，必然就会产生许多的<code>state</code>状态，那你是如何有效的管理这些状态？是什么原因导致UI多次渲染？是哪一步操作导致的UI组件的变化？在没有使用<code>redux</code>前你可能已经发现可以使用生命周期函数中的<code>shouldComponentUpdate</code>来减少子组件中没必要的渲染，但终究解决不了状态管理复杂的难题。<br>当你使用<code>redux</code>后，复杂的应用程序状态流程是这样的：<br><img src="https://user-gold-cdn.xitu.io/2018/9/27/1661875634d62ba9?w=700&amp;h=475&amp;f=gif&amp;s=2555904" alt="使用redux后"><br>看完上面图文后，是否感觉很好理解我们什么时候要使用<code>redux</code>呢？这要感谢<a href="https://segmentfault.com/u/justjavac" target="_blank" rel="noopener"><strong>@justjavac</strong></a>文章提供的动图支持。</li></ul><h1 id="redux-for-react-native-工作逻辑图"><a href="#redux-for-react-native-工作逻辑图" class="headerlink" title="redux for react native 工作逻辑图"></a>redux for react native 工作逻辑图</h1><p>感谢@<a href="https://www.jianshu.com/u/8b645668c3c4" target="_blank" rel="noopener">黑森林工作室</a>作者提供的清晰的逻辑图<br><img src="https://user-gold-cdn.xitu.io/2018/9/27/166187566435a4a7?w=800&amp;h=504&amp;f=png&amp;s=57344" alt="清晰逻辑图"></p><h1 id="redux工程结构分析"><a href="#redux工程结构分析" class="headerlink" title="redux工程结构分析"></a>redux工程结构分析</h1><p>我对官方的demo小部分位置做了些改造具体看代码分析：<br><img src="https://user-gold-cdn.xitu.io/2018/9/27/1661875667d5e332?w=600&amp;h=662&amp;f=png&amp;s=99629" alt="image.png"></p><h1 id="分工明细"><a href="#分工明细" class="headerlink" title="分工明细"></a>分工明细</h1><ul><li><code>js/actions</code><br>此文件夹下放内容做的事情是：定义用户行为。</li><li><code>js/reducers</code><br>此文件夹下放内容做的事情是：响应用户行为，返回改变后的状态，并发送到 <code>store</code>。</li><li><code>js/components</code><br>此文件夹下放内容做的事情是：自定义的组件。</li><li><code>js/containers</code><br>此文件夹下放内容做的事情是：把<code>components</code>文件夹中涉及到状态变化的组件进行第二次封装。</li><li><code>App.js</code><br>入口文件（store在这里），为什么我要把store定义在这里？ 因为它是唯一的，而且必须使用<code>react-redux</code>提供的<code>Provider</code>组件包裹入口的其他组件才能使<code>redux</code>中的<code>store</code>生效。</li><li><code>global.js</code><br>存放全局定义的变量、常量、方法等。</li></ul><h1 id="需要注意的事"><a href="#需要注意的事" class="headerlink" title="需要注意的事"></a>需要注意的事</h1><ul><li>一个工程中 <code>redux</code> 的 <code>store</code> 是唯一的，不能在多个 <code>store</code>  。</li><li>保持 <code>reducer</code> 纯净非常重要。永远不要在 <code>reducer</code> 里做这些操作：<blockquote><ul><li>修改传入参数；</li><li>执行有副作用的操作，如 <code>API</code> 请求和路由跳转；</li><li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>;</li></ul></blockquote></li><li>使用对象展开运算符<code>...</code>代替<code>Object.assign()</code>才是最好的解决方案。</li><li>组件名首字母要大写，也就是说<code>components</code>和<code>containers</code>文件夹下的文件首字母都要大写。</li><li>应该尽量减少传递到<code>action</code> 中的数据（能传单个数据就不传对象，能传对象就不传数组）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//good</span><br><span class="line">function todoApp(state = initialState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case SET_VISIBILITY_FILTER:</span><br><span class="line">      return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        visibilityFilter: action.filter</span><br><span class="line">      &#125;)</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//best</span><br><span class="line">function todoApp(state = initialState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case SET_VISIBILITY_FILTER:</span><br><span class="line">      return &#123; ...state, visibilityFilter: action.filter &#125;</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#代码详解<br><code>js/actions/types.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//添加列表数据</span><br><span class="line">export const ADD_TODO = &apos;ADD_TODO&apos;;</span><br><span class="line">//筛选</span><br><span class="line">export const SET_VISIBILITY_FILTER = &apos;SET_VISIBILITY_FILTER&apos;;</span><br><span class="line">//文字添加／取消中划线</span><br><span class="line">export const TOGGLE_TODO = &apos;TOGGLE_TODO&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="释："><a href="#释：" class="headerlink" title="释："></a>释：</h3><h4 id="action定义"><a href="#action定义" class="headerlink" title="action定义"></a>action定义</h4><p>为什么我要把用户的<code>action</code>(行为)定义单独抽出来写一个<code>type.js</code>？</p><ul><li>方便状态管理。</li><li>复用性。</li></ul><hr><p><code>js/actions/index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import  &#123;</span><br><span class="line">    ADD_TODO,</span><br><span class="line">    SET_VISIBILITY_FILTER,</span><br><span class="line">    TOGGLE_TODO,</span><br><span class="line">&#125; from &apos;./types&apos;</span><br><span class="line">let nextTodoId = 0;</span><br><span class="line"></span><br><span class="line">export const addTodo = text =&gt; (&#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">    id: nextTodoId++,</span><br><span class="line">    text</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const setVisibilityFilter = (filter) =&gt; (&#123;</span><br><span class="line">    type: SET_VISIBILITY_FILTER,</span><br><span class="line">    filter</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const toggleTodo = id =&gt; (&#123;</span><br><span class="line">    type: TOGGLE_TODO,</span><br><span class="line">    id</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="释：-1"><a href="#释：-1" class="headerlink" title="释："></a>释：</h3><h4 id="Action-创建函数"><a href="#Action-创建函数" class="headerlink" title="Action 创建函数"></a>Action 创建函数</h4><p>Action 创建函数 就是生成 action 的方法。“action” 和 “action 创建函数” 这两个概念很容易混在一起，使用时最好注意区分。</p><p>在 Redux 中的 action 创建函数只是简单的返回一个 action:</p><hr><p><code>js/reducers/todos.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import  &#123;</span><br><span class="line">    ADD_TODO,</span><br><span class="line">    TOGGLE_TODO,</span><br><span class="line">&#125; from &apos;../actions/types&apos;</span><br><span class="line"></span><br><span class="line">const todos = (state = [], action) =&gt; &#123;</span><br><span class="line">    let &#123;id, text, type&#125; = action;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case ADD_TODO:</span><br><span class="line">            return [</span><br><span class="line">                ...state,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: id,</span><br><span class="line">                    text: text,</span><br><span class="line">                    completed: false</span><br><span class="line">                &#125;</span><br><span class="line">            ];</span><br><span class="line">        case TOGGLE_TODO:</span><br><span class="line">            return state.map(todo =&gt; (todo.id === id) ? &#123;...todo, completed: !todo.completed&#125; : todo);</span><br><span class="line">        default:</span><br><span class="line">            return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export  default  todos;</span><br></pre></td></tr></table></figure></p><p><code>js/reducers/visibilityFilter.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; SET_VISIBILITY_FILTER &#125; from &apos;../actions/types&apos;</span><br><span class="line">import &#123; visibilityFilters &#125; from &apos;../global&apos;</span><br><span class="line"></span><br><span class="line">const &#123; SHOW_ALL &#125; = visibilityFilters;</span><br><span class="line">const visibilityFilter = (state = SHOW_ALL, action) =&gt; &#123;</span><br><span class="line">    let &#123;type, filter&#125; = action;</span><br><span class="line">    switch (type)&#123;</span><br><span class="line">        case SET_VISIBILITY_FILTER:</span><br><span class="line">            return filter;</span><br><span class="line">        default:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default  visibilityFilter;</span><br></pre></td></tr></table></figure></p><h3 id="释：-2"><a href="#释：-2" class="headerlink" title="释："></a>释：</h3><h4 id="reducer-就是一个纯函数，接收旧的-state-和-action，返回新的-state（上面两个文件可以看着两个reducer）。"><a href="#reducer-就是一个纯函数，接收旧的-state-和-action，返回新的-state（上面两个文件可以看着两个reducer）。" class="headerlink" title="reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state（上面两个文件可以看着两个reducer）。"></a>reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state（上面两个文件可以看着两个reducer）。</h4><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li><code>Redux</code> 首次执行时，<code>state</code> 为 <code>undefined</code>，此时需要设置返回应用的初始 <code>state</code>。</li><li>每个 <code>reducer</code> 只负责管理全局 <code>state</code> 中它负责的一部分。每个 <code>reducer</code> 的 <code>state</code> 参数都不同，分别对应它管理的那部分 <code>state</code> 数据。</li></ul><hr><p><code>js/reducers/index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &apos;redux&apos;</span><br><span class="line">import todos from &apos;./todos&apos;</span><br><span class="line">import visibilityFilter from &apos;./visibilityFilter&apos;</span><br><span class="line"></span><br><span class="line">export default combineReducers(&#123;</span><br><span class="line">    todos,</span><br><span class="line">    visibilityFilter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="释：-3"><a href="#释：-3" class="headerlink" title="释："></a>释：</h3><h4 id="combineReducers-所做的只是生成一个函数，这个函数来调用你的一系列-reducer，每个-reducer-根据它们的-key-来筛选出-state-中的一部分数据并处理，然后这个生成的函数再将所有-reducer-的结果合并成一个大的对象。"><a href="#combineReducers-所做的只是生成一个函数，这个函数来调用你的一系列-reducer，每个-reducer-根据它们的-key-来筛选出-state-中的一部分数据并处理，然后这个生成的函数再将所有-reducer-的结果合并成一个大的对象。" class="headerlink" title="combineReducers()所做的只是生成一个函数，这个函数来调用你的一系列 reducer，每个 reducer 根据它们的 key 来筛选出 state 中的一部分数据并处理，然后这个生成的函数再将所有 reducer 的结果合并成一个大的对象。"></a><code>combineReducers()</code>所做的只是生成一个函数，这个函数来调用你的一系列 reducer，每个 reducer <strong>根据它们的 key 来筛选出 state 中的一部分数据并处理</strong>，然后这个生成的函数再将所有 reducer 的结果合并成一个大的对象。</h4><p>表面上看上去<code>combineReducers()</code>的作用就是把多个<code>reducer</code>合成一个的<code>reducer</code>。</p><hr><p><code>js/components/Todo.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    Text,</span><br><span class="line">    TouchableOpacity</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line"></span><br><span class="line">export default class Todo extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        onClick: PropTypes.func.isRequired,</span><br><span class="line">        completed: PropTypes.bool.isRequired,</span><br><span class="line">        text: PropTypes.string.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        let &#123; onClick, completed, text &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;TouchableOpacity</span><br><span class="line">                style=&#123;&#123;</span><br><span class="line">                    flexDirection: &apos;row&apos;,</span><br><span class="line">                    flex: 1,</span><br><span class="line">                    height: 50,</span><br><span class="line">                    alignItems: &apos;center&apos;,</span><br><span class="line">                    justifyContent: &apos;center&apos;,</span><br><span class="line">                    backgroundColor: &apos;#cccccc&apos;,</span><br><span class="line">                    marginTop: 10</span><br><span class="line">                &#125;&#125;</span><br><span class="line">                onPress=&#123;onClick&#125;&gt;</span><br><span class="line">                &lt;Text style=&#123;&#123; textDecorationLine: completed ? &apos;line-through&apos; : &apos;none&apos;&#125;&#125;&gt;&#123;text&#125;&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>js/components/TodoList.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    FlatList</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import Todo from &apos;./Todo&apos;</span><br><span class="line"></span><br><span class="line">export default class TodoList extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        todos: PropTypes.arrayOf(</span><br><span class="line">            PropTypes.shape(&#123;</span><br><span class="line">                id: PropTypes.number.isRequired,</span><br><span class="line">                completed: PropTypes.bool.isRequired,</span><br><span class="line">                text: PropTypes.string.isRequired</span><br><span class="line">            &#125;).isRequired</span><br><span class="line">        ).isRequired,</span><br><span class="line">        toggleTodo: PropTypes.func.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    _renderItem = (data) =&gt; &#123;</span><br><span class="line">       let dataItem = data.item;</span><br><span class="line">       let &#123; id &#125; = dataItem;</span><br><span class="line">       let &#123; toggleTodo &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Todo</span><br><span class="line">                &#123;...dataItem&#125;</span><br><span class="line">                onClick=&#123;() =&gt; toggleTodo(id)&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        let &#123; todos &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;FlatList</span><br><span class="line">                data=&#123;todos&#125;</span><br><span class="line">                keyExtractor=&#123;(item)=&gt;item.id.toString()&#125;</span><br><span class="line">                renderItem=&#123;this._renderItem&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>js/components/Link.js.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    TouchableOpacity,</span><br><span class="line">    Text</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line"></span><br><span class="line">export default class Link extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        active: PropTypes.bool.isRequired,</span><br><span class="line">        filter: PropTypes.string.isRequired,</span><br><span class="line">        onClick: PropTypes.func.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        let &#123; active,  filter, onClick &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">           &lt;TouchableOpacity</span><br><span class="line">               style=&#123;&#123;</span><br><span class="line">                   marginLeft: 4,</span><br><span class="line">                   height: 40,</span><br><span class="line">                   flex:1,</span><br><span class="line">                   borderWidth: 1,</span><br><span class="line">                   borderColor: &apos;#ccc&apos;,</span><br><span class="line">                   alignItems: &apos;center&apos;,</span><br><span class="line">                   justifyContent:&apos;center&apos;</span><br><span class="line">               &#125;&#125;</span><br><span class="line">               onPress=&#123;onClick&#125;</span><br><span class="line">           &gt;</span><br><span class="line">               &lt;Text style=&#123;&#123;fontSize: 10, color: active ? &apos;black&apos; : &apos;#cccccc&apos;&#125;&#125;&gt;&#123;filter&#125;&lt;/Text&gt;</span><br><span class="line">           &lt;/TouchableOpacity&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>js/components/Filters.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    View,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import FilterLink from &apos;../containers/FilterLink&apos;</span><br><span class="line">import &#123; visibilityFilters &#125; from &apos;../global&apos;</span><br><span class="line"></span><br><span class="line">const &#123; SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE  &#125; = visibilityFilters;</span><br><span class="line"></span><br><span class="line">export default  class Filters extends Component &#123;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;View style=&#123;&#123; flexDirection: &apos;row&apos;, marginTop: 20&#125;&#125;&gt;</span><br><span class="line">                &lt;FilterLink filter=&#123;SHOW_ALL&#125; /&gt;</span><br><span class="line">                &lt;FilterLink filter=&#123;SHOW_COMPLETED&#125; /&gt;</span><br><span class="line">                &lt;FilterLink filter=&#123;SHOW_ACTIVE&#125; /&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/166187566cc9bb2d?w=800&amp;h=361&amp;f=png&amp;s=34551" alt="image.png"></p><h3 id="释：-4"><a href="#释：-4" class="headerlink" title="释："></a>释：</h3><h4 id="以上四个文件是自定义的四个展示组件，这些组件只定义外观并不关心数据来源和如何改变。传入什么就渲染什么。如果你把代码从-Redux-迁移到别的架构，这些组件可以不做任何改动直接使用。它们并不依赖于-Redux。"><a href="#以上四个文件是自定义的四个展示组件，这些组件只定义外观并不关心数据来源和如何改变。传入什么就渲染什么。如果你把代码从-Redux-迁移到别的架构，这些组件可以不做任何改动直接使用。它们并不依赖于-Redux。" class="headerlink" title="以上四个文件是自定义的四个展示组件，这些组件只定义外观并不关心数据来源和如何改变。传入什么就渲染什么。如果你把代码从 Redux 迁移到别的架构，这些组件可以不做任何改动直接使用。它们并不依赖于 Redux。"></a>以上四个文件是自定义的四个展示组件，这些组件只定义外观并不关心数据来源和如何改变。传入什么就渲染什么。如果你把代码从 Redux 迁移到别的架构，这些组件可以不做任何改动直接使用。它们并不依赖于 Redux。</h4><hr><p><code>js/containers/AddTodo.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    View,</span><br><span class="line">    TextInput,</span><br><span class="line">    Button,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class="line">import &#123; addTodo &#125; from &apos;../actions&apos;</span><br><span class="line"></span><br><span class="line">class AddTodo extends Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.inputValue = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        let &#123; dispatch &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;&#123;flexDirection: &apos;row&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;TextInput</span><br><span class="line">                    style=&#123;&#123;flex:1, borderWidth: 1, borderColor: &apos;#cccccc&apos;, textAlign: &apos;center&apos;&#125;&#125;</span><br><span class="line">                    onChangeText=&#123;text =&gt; this.inputValue = text&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;Button title=&quot;Add Todo&quot; onPress=&#123;() =&gt; dispatch(addTodo(this.inputValue))&#125;/&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect()(AddTodo)</span><br></pre></td></tr></table></figure></p><p><code>js/containers/FilterLink.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class="line">import &#123; setVisibilityFilter &#125; from &apos;../actions&apos;</span><br><span class="line">import Link from &apos;../components/Link&apos;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state, ownProps) =&gt; (&#123;</span><br><span class="line">    active: ownProps.filter === state.visibilityFilter,</span><br><span class="line">    filterText: ownProps.filter</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch, ownProps) =&gt; (&#123;</span><br><span class="line">    onClick: () =&gt; dispatch(setVisibilityFilter(ownProps.filter))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default connect(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps,</span><br><span class="line">)(Link)</span><br></pre></td></tr></table></figure></p><p><code>js/containers/VisibleTodoList.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class="line">import &#123; toggleTodo &#125; from &apos;../actions&apos;</span><br><span class="line">import TodoList from &apos;../components/TodoList&apos;</span><br><span class="line">import &#123; visibilityFilters &#125; from &apos;../global&apos;</span><br><span class="line"></span><br><span class="line">const &#123; SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE &#125; = visibilityFilters;</span><br><span class="line"></span><br><span class="line">const getVisibleTodos = (todos, filter) =&gt; &#123;</span><br><span class="line">    switch (filter) &#123;</span><br><span class="line">        case SHOW_COMPLETED:</span><br><span class="line">            return todos.filter(t =&gt; t.completed);</span><br><span class="line">        case SHOW_ACTIVE:</span><br><span class="line">            return todos.filter(t =&gt; !t.completed);</span><br><span class="line">        case SHOW_ALL:</span><br><span class="line">            return todos;</span><br><span class="line">        default:</span><br><span class="line">            throw new Error(&apos;Unknown filter: &apos; + filter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = state =&gt; (&#123;</span><br><span class="line">    todos: getVisibleTodos(state.todos, state.visibilityFilter)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = dispatch =&gt; (&#123;</span><br><span class="line">    toggleTodo: id =&gt; dispatch(toggleTodo(id))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default connect(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps,</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure></p><h3 id="释：-5"><a href="#释：-5" class="headerlink" title="释："></a>释：</h3><h4 id="以上三个是容器组件，作用是把展示组件连接到-Redux。"><a href="#以上三个是容器组件，作用是把展示组件连接到-Redux。" class="headerlink" title="以上三个是容器组件，作用是把展示组件连接到 Redux。"></a>以上三个是容器组件，作用是把展示组件连接到 Redux。</h4><p>有时很难分清到底该使用容器组件还是展示组件。如这个小的组件：</p><blockquote><ul><li><code>AddTodo.js</code> 含有“Add”按钮 和 输入框</li></ul></blockquote><p>技术上讲可以把它分成两个组件，但一开始就这么做有点早。在一些非常小的组件里混用容器和展示是可以的。当业务变复杂后，如何拆分就很明显了。所以现在就使用混合型的吧。</p><p>上面出现了使用<code>react-redux</code>的<code>connect()</code>方法来把展示组件和容器组件关联在一起，这个方法做了性能优化来避免很多不必要的重复渲染。（这样你就不必为了性能而手动实现 <a href="https://doc.react-china.org/docs/optimizing-performance.html" target="_blank" rel="noopener">React 性能优化建议</a> 中的 <code>shouldComponentUpdate</code> 方法。）</p><p>使用 <code>connect()</code> 前，需要先定义 <code>mapStateToProps</code> 这个函数来指定如何把当前 <code>Redux store state</code> 映射到展示组件的 <code>props</code> 中。例如，<code>VisibleTodoList</code> 需要计算传到 <code>TodoList</code> 中的 <code>todos</code>，所以定义了根据 <code>state.visibilityFilter</code> 来过滤 <code>state.todos</code> 的方法，并在 <code>mapStateToProps</code> 中使用。</p><p>除了读取 <code>state</code>，容器组件还能分发 <code>action</code>。类似的方式，可以定义 <code>mapDispatchToProps()</code> 方法接收 <a href="https://cn.redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener"><code>dispatch()</code></a> 方法并返回期望注入到展示组件的 props 中的回调方法。例如，我们希望 <code>VisibleTodoList</code> 向 <code>TodoList</code> 组件中注入一个叫 <code>onTodoClick</code> 的 props ，还希望 <code>onTodoClick</code>能分发 <code>TOGGLE_TODO</code> 这个 <code>action</code>。<br>最后，使用 <code>connect()</code> 创建 <code>VisibleTodoList</code>，并传入这两个函数。</p><hr><p><code>js/components/Group.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    View</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import AddTodo from &apos;../containers/AddTodo&apos;</span><br><span class="line">import Filters from &apos;../components/Filters&apos;</span><br><span class="line">import VisibleTodoList from &apos;../containers/VisibleTodoList&apos;</span><br><span class="line"></span><br><span class="line">export default class Group extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;&#123;paddingHorizontal: 20, paddingVertical: 44&#125;&#125;&gt;</span><br><span class="line">                &lt;AddTodo/&gt;</span><br><span class="line">                &lt;Filters/&gt;</span><br><span class="line">                &lt;VisibleTodoList/&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="释：-6"><a href="#释：-6" class="headerlink" title="释："></a>释：</h3><h4 id="Group-js-是把所有的关联后的组件串起来，形成一个完整的界面。"><a href="#Group-js-是把所有的关联后的组件串起来，形成一个完整的界面。" class="headerlink" title="Group.js 是把所有的关联后的组件串起来，形成一个完整的界面。"></a>Group.js 是把所有的关联后的组件串起来，形成一个完整的界面。</h4><hr><p><code>App.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class="line">import Group from &apos;./js/components/Group&apos;</span><br><span class="line">import rootReducer from &apos;./js/reducers&apos;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const store = createStore(rootReducer);</span><br><span class="line">        return (</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;Group /&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="释：-7"><a href="#释：-7" class="headerlink" title="释："></a>释：</h3><h4 id="入口文件传入-Store"><a href="#入口文件传入-Store" class="headerlink" title="入口文件传入 Store"></a>入口文件传入 Store</h4><ul><li>创建<code>store</code>传入<code>reducers</code>。</li><li>使用<code>Provider</code>组件包裹   <code>Group</code>组件, <code>store</code>作为属性传入<code>Provider</code>。</li></ul><hr><p>进行到这一步，代码分析完毕。本次写作到此结束。我相信大家如果仔细看完的话，多多少少会有些收获吧，如果demo看不太懂，那就跟着代码分析的思路多敲几遍代码，也就理解了，有空我会继续更新未完成的内容。</p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>附上 github demo <a href="https://github.com/giantss/ReduxForReactNativeDemo" target="_blank" rel="noopener">ReduxForReactNativeDemo</a> 好使的话，别忘了给出宝贵的❤️⭐️，没有比这个更能鼓舞人心的了 😂。最后欢迎👏指出错误或者发布自己的见解探讨，共勉。🤝</p><h3 id="待更新内容"><a href="#待更新内容" class="headerlink" title="待更新内容"></a>待更新内容</h3><ul><li>Middleware的使用。</li><li>配合react-navigation使用。</li><li>……</li></ul><p>hello <a href="https://giantss.github.io/blog/2018/09/27/Redux-for-react-native-指南-持续更新/">https://giantss.github.io/blog/2018/09/27/Redux-for-react-native-指南-持续更新/</a> bye</p>]]></content>
      
      
      
        <tags>
            
            <tag> react native </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
