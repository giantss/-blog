<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java设计模式之简单工厂模式</title>
      <link href="/blog/2018/11/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2018/11/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong><em>简单工厂模式不属于23种 <a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_(%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="noopener">GoF</a>)（Gang of Four）设计模式之一。</em></strong></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>简单工厂模式（又叫作静态方法工厂模式），其属于创建型设计模式，由一个工厂对象决定创建出那一种产品类的实例。</p></blockquote><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul><li>工厂类负责创建的对象比较少。</li><li>客户只需要知道传入工厂类的参数，而无需关心创建对象的逻辑。<a id="more"></a></li></ul><h1 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h1><p>简单工厂模式有如下角色：</p><ul><li><p><strong>Factory</strong>：工厂类，这是简单工厂模式的核心。它负责实现创建所有实例的内部逻辑。工厂类的创建产品类的方法可以被外界直接调用，创建所需的产品对象。</p></li><li><p><strong>IProduct</strong>：抽象产品类，这是简单工厂模式所创建的所有对象的父类，它负责描述所有实例所有的公共接口。</p></li><li><p><strong>Product：</strong>具体产品类，这是简单工厂模式的创建目标。</p></li></ul><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>这里我们用生产计算机来举例，假设有一个计算机的代工生产商，它目前已经可以带工生产联想计算机了。随着业务的拓展，这家代工厂还要生产惠普和华硕计算机。这样我们就需要用一个单独的类来专门生产计算机，这就用到了简单工厂模式。写下来具体看代码详解：</p><ol><li><p>首先创建一个计算机的抽象产品类，其中有一个抽象方法用户启动计算机生产：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Computer &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 产品的抽象方法，由具体的产品类实现</span><br><span class="line">     */</span><br><span class="line">    public abstract void start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接着我们创建各个品牌的计算机，其都继承了自己的父类 <code>Computer</code> ，并实现了父类的 <code>start</code> 方法。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class LenovoComputer extends Computer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;联想计算机启动&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class HpComputer extends Computer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;惠普计算机启动&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class AsusComputer extends Computer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        System.out.println(&quot;华硕计算机启动&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>接下来创建工厂类， 它提供一个静态方法 <code>creatComputer</code> 用来生产计算机。你只需要传入自己想生产的计算机品牌，它就会实例化相应品牌的计算机对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class ComputerFactory &#123;</span><br><span class="line">    public static Computer createComputer(String type) &#123;</span><br><span class="line">        Computer mComputer = null;</span><br><span class="line">        switch (type)&#123;</span><br><span class="line">            case &quot;lenovo&quot;:</span><br><span class="line">                mComputer = new LenovoComputer();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;hp&quot;:</span><br><span class="line">                mComputer = new HpComputer();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;asus&quot;:</span><br><span class="line">                mComputer = new AsusComputer();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return mComputer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端调用工厂类，传入 <code>hp</code> 生产出惠普计算机并调用该计算机对象的 <code>start</code> 方法。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class CreateComputer &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ComputerFactory.createComputer(&quot;hp&quot;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：使用户根据参数获得相应的类实例，避免了直接实例化类，降低了耦合度。</p><p><strong>缺点</strong>：可实例化的类型在编译期间已经被确定，如果增加新类型，则需要修改工厂，这违背了封闭原则。简单工厂需要知道所有要生产的类型，其当子类过多或者子类层次过多时不适合使用。</p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/11/13/Java设计模式之简单工厂模式/">https://giantss.github.io/blog/2018/11/13/Java设计模式之简单工厂模式/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java设计模式之单例模式</title>
      <link href="/blog/2018/11/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2018/11/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p></blockquote><h2 id="单例的使用场景"><a href="#单例的使用场景" class="headerlink" title="单例的使用场景"></a>单例的使用场景</h2><blockquote><p>在一个系统中，要求一个类有且仅有一个对象，具体使用场景如下：</p><ul><li>整个项目需要一个共享访问点或共享数据。</li><li>创建一个对象需要耗费的资源过多，比如访问 I/O或者数据库等资源。</li><li>工具类对象。<a id="more"></a></li></ul></blockquote><h2 id="单例模式的6六种写法"><a href="#单例模式的6六种写法" class="headerlink" title="单例模式的6六种写法"></a>单例模式的6六种写法</h2><h3 id="1-饿汉模式"><a href="#1-饿汉模式" class="headerlink" title="1. 饿汉模式"></a>1. 饿汉模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance = new Singleton();</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>这种方式在类加载时就完成初始化了，获取对象但速度快。</li><li>避免多线程但同步问题。</li></ul><p><strong>缺点：</strong></p><ul><li>类加载较慢。</li><li>没有达到懒加载的效果，如果从始至终都未使用果这个实例，这会造成内存的浪费。</li></ul><hr><h3 id="2-懒汉模式（线程不安全）"><a href="#2-懒汉模式（线程不安全）" class="headerlink" title="2. 懒汉模式（线程不安全）"></a>2. 懒汉模式（线程不安全）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance;</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>节省资源</li></ul><p><strong>缺点：</strong></p><ul><li>第一次实例化对象时较慢。</li><li>多线程时不能正常工作。</li></ul><hr><h3 id="3-懒汉模式（线程安全）"><a href="#3-懒汉模式（线程安全）" class="headerlink" title="3. 懒汉模式（线程安全）"></a>3. 懒汉模式（线程安全）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance;</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static synchronized Singleton getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>多线程中很好的工作。</li></ul><p><strong>缺点：</strong></p><ul><li>每次调用 <code>getInstance</code> 方法时都需要同步，这会造成不必要的同步开销。<blockquote><p>大部分时候我们是用不到同步的，所以，不建议用这种模式。</p></blockquote></li></ul><hr><h3 id="4-双重检查模式"><a href="#4-双重检查模式" class="headerlink" title="4. 双重检查模式"></a>4. 双重检查模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private volatile static Singleton instance;</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static  Singleton getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                if(instance == null) &#123;</span><br><span class="line">                    instance = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>资源利用率高。</li><li>避免多余同步。</li><li>线程安全。</li></ul><p><strong>缺点：</strong></p><ul><li>使用了 <code>volatile</code> 或多或少会影响性能。</li><li>第一次实例化对象时较慢。</li><li>在高并发某些情况下会出现失效问题。<blockquote><p><code>DCL</code> (Double Check Lock) 在高并发环境下也会有一定的缺陷，<code>DCL</code> 虽然在一定程度上解决了资源的消耗、多余的同步、线程安全问题等问题，但还是在某些情况会出现失效的问题，也就是 <code>DCL</code> 失效。这里建议用静态内部类单例模式来代替 <code>DCL</code> 。</p></blockquote></li></ul><hr><h3 id="5-静态内部类单例模式-推荐使用"><a href="#5-静态内部类单例模式-推荐使用" class="headerlink" title="5. 静态内部类单例模式 (推荐使用)"></a>5. 静态内部类单例模式 (推荐使用)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static  Singleton getInstance()&#123;</span><br><span class="line">        return SingletonHolder.sInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    private static class SingletonHolder &#123;</span><br><span class="line">        private static final Singleton sInstance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 第一次加载 <code>Singleton</code> 类时并不会初始化 <code>sInstance</code>。 只有在第一次调用 <code>getInstance</code> 方法时虚拟机才会加载 <code>SingletonHolder</code> 并初始化 sInstance。</p></blockquote><p><strong>优点：</strong></p><ul><li>资源利用率高。</li><li>避免多余同步。</li><li>线程安全。</li></ul><p><strong>缺点：</strong></p><ul><li>暂无</li></ul><h3 id="6-枚举单例"><a href="#6-枚举单例" class="headerlink" title="6. 枚举单例"></a>6. 枚举单例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    public void doSomeThing() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>任何情况下都是单例。</li><li>默认线程安全。</li></ul><p><strong>缺点：</strong></p><ul><li>简单</li><li>可读性不高。</li></ul><hr><p><strong><em>总结：到这里6种单例写法已介绍完，至于选择那种形势的单例模式，取决与你项目本身情况：是否复杂的高并发环境，或者是否需要控制单例对象的资源消耗。</em></strong></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/11/13/Java设计模式之单例模式/">https://giantss.github.io/blog/2018/11/13/Java设计模式之单例模式/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mapbox词汇表中文文档(查找Mapbox相关的术语及其定义)</title>
      <link href="/blog/2018/11/07/Mapbox%E8%AF%8D%E6%B1%87%E8%A1%A8%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3-%E6%9F%A5%E6%89%BEMapbox%E7%9B%B8%E5%85%B3%E7%9A%84%E6%9C%AF%E8%AF%AD%E5%8F%8A%E5%85%B6%E5%AE%9A%E4%B9%89/"/>
      <url>/blog/2018/11/07/Mapbox%E8%AF%8D%E6%B1%87%E8%A1%A8%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3-%E6%9F%A5%E6%89%BEMapbox%E7%9B%B8%E5%85%B3%E7%9A%84%E6%9C%AF%E8%AF%AD%E5%8F%8A%E5%85%B6%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.mapbox.com/help/glossary" target="_blank" rel="noopener">Mapbox词汇表英文文档</a></p><p> <strong><em>本文词汇表按照字母顺序排序</em></strong></p><hr><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><hr><h5 id="access-token-访问令牌"><a href="#access-token-访问令牌" class="headerlink" title="access token (访问令牌)"></a><a href="https://www.mapbox.com/help/define-access-token/" target="_blank" rel="noopener">access token</a> (访问令牌)</h5><blockquote><p>要使用 <code>Mapbox</code> 的任何工具，<code>API</code> 或 <code>SDK</code> ，您需要一个 <code>Mapbox</code> <strong>access token</strong>。<code>Mapbox</code>使用<strong>access token</strong>将 <code>API</code> 资源请求与您的帐户相关联。您可以在 <a href="https://www.mapbox.com/account/access-tokens" target="_blank" rel="noopener"><strong>access token page</strong></a> 上找到所有<strong>access token</strong>，创建新令牌或删除现有令牌。</p></blockquote><blockquote><p>以下是我们的 <code>API</code> 中的<strong>access token page</strong>：<br><a href="https://api.mapbox.com/v4/mapbox.emerald/page.html?access_token=pk.eyJ1Ijoiemhvbm5ncGVuZyIsImEiOiJjam5rMXhzNjYwbG1wM3BtenNpczV0NXgxIn0.RmIRNHLPKgyJtDvrWhiQQg" target="_blank" rel="noopener">https://api.mapbox.com/v4/mapbox.emerald/page.html?access_token=pk.eyJ1Ijoiemhvbm5ncGVuZyIsImEiOiJjam5rMXhzNjYwbG1wM3BtenNpczV0NXgxIn0.RmIRNHLPKgyJtDvrWhiQQg</a></p></blockquote><h4 id="Public-vs-secret-tokens-公共vs-secret令牌"><a href="#Public-vs-secret-tokens-公共vs-secret令牌" class="headerlink" title="Public vs.secret tokens (公共vs.secret令牌)"></a>Public vs.secret tokens (公共vs.secret令牌)</h4><blockquote><p>创建访问令牌时，您可以选择为其提供一组零个或多个范围，这些范围定义该令牌可以访问哪些 <code>Mapbox API</code> 以及可以使用哪些方法来访问它们。</p></blockquote><h4 id="Public-scopes-and-tokens-公共范围和令牌"><a href="#Public-scopes-and-tokens-公共范围和令牌" class="headerlink" title="Public scopes and tokens (公共范围和令牌)"></a>Public scopes and tokens (公共范围和令牌)</h4><a id="more"></a><blockquote><p><strong>Public scopes</strong>仅允许从 <code>API</code> 检索数据。这些令牌放入公共应用程序更安全，因为它们不能用于更改帐户中的数据。具有公共范围的标记以 <code>sk</code> 开头。</p></blockquote><blockquote><p>创建公共令牌后，可以重命名令牌并添加和删除公共范围。秘密范围无法添加到公共令牌中。</p></blockquote><h4 id="Secret-scopes-and-tokens-私密范围和令牌"><a href="#Secret-scopes-and-tokens-私密范围和令牌" class="headerlink" title="Secret scopes and tokens (私密范围和令牌)"></a>Secret scopes and tokens (私密范围和令牌)</h4><blockquote><p><strong>Secret scopes</strong>允许创建和修改对 <code>Mapbox API</code> 的访问以及对可能包含特定于帐户的信息的 <code>API</code> 的访问。这些令牌只能在安全的上下文中使用。具有私密范围的标记以 <code>sk</code> 开头。</p></blockquote><blockquote><p>创建私密令牌后，只能查看一次 - 如果您刷新或离开 <code>API</code> 访问令牌页面，令牌本身将消失。<br>可以重命名令牌，并随时添加或删除任何作用域。</p></blockquote><h4 id="Default-Public-Token-默认的公共令牌"><a href="#Default-Public-Token-默认的公共令牌" class="headerlink" title="Default Public Token (默认的公共令牌)"></a>Default Public Token (默认的公共令牌)</h4><blockquote><p>您的帐户将始终至少拥有一个<strong>Default Public Token</strong>，并将作为您的<strong>Default Public Token</strong>显示在 <code>Mapbox</code>网站上。<br>如果删除此令牌，则另一个公共令牌将成为您的<strong>Default Public Token</strong>。<br>当您登录到您的帐户时，此令牌将自动嵌入到 <code>Mapbox.com</code> 上的示例代码中。</p></blockquote><blockquote><p>您可能还想阅读：<a href="https://www.mapbox.com/help/create-api-access-token/" target="_blank" rel="noopener">如何创建一个API访问令牌？</a></p></blockquote><h1 id="annotation-标注物"><a href="#annotation-标注物" class="headerlink" title="annotation (标注物)"></a><a href="https://www.mapbox.com/help/define-annotation/" target="_blank" rel="noopener">annotation</a> (标注物)</h1><blockquote><p>在适用于 <a href="https://www.mapbox.com/ios-sdk/" target="_blank" rel="noopener">iOS的Mapbox Maps SDK</a> 中，<strong>annotation</strong> 是地图上的已定义位置，由自定义 <a href="https://developer.apple.com/documentation/uikit/uiview" target="_blank" rel="noopener">UIView</a> 或 <a href="https://developer.apple.com/documentation/uikit/uiimage" target="_blank" rel="noopener">UIImage</a> 表示。您可以使用注释来表示点数据，例如城市中的餐馆，沿路线的公交车站或地震位置。您可以通过多种方式向地图添加注释。有关添加注释的详细信息，请参阅 <a href="https://www.mapbox.com/ios-sdk/api/4.5.0/adding-points-to-a-map.html" target="_blank" rel="noopener">Mapbox Maps SDK for iOS文档</a> 中的添加指向地图指南。</p></blockquote><h1 id="API-应用编程接口"><a href="#API-应用编程接口" class="headerlink" title="API (应用编程接口)"></a><a href="https://www.mapbox.com/help/define-api/" target="_blank" rel="noopener">API</a> (应用编程接口)</h1><blockquote><p><strong>API</strong> 是软件库应如何相互交互的规范。将 <code>API</code> 视为从网站或服务获取数据的一种方式，而无需亲自访问该网站或服务。 查看 <code>Developers</code> 页面上的所有 <code>Mapbox API</code> 。</p></blockquote><blockquote><p>查看所有的Mapbox API <a href="https://www.mapbox.com/developers" target="_blank" rel="noopener">开发者页面</a>。</p></blockquote><h1 id="attribution-Mapbox的logo"><a href="#attribution-Mapbox的logo" class="headerlink" title="attribution (Mapbox的logo)"></a><a href="https://www.mapbox.com/help/define-attribution/" target="_blank" rel="noopener">attribution</a> (Mapbox的logo)</h1><blockquote><p><strong>attribution</strong> 是放置在所有 <code>Mapbox</code> 地图上的两个视觉元素的组合，表明使用 <code>Mapbox</code> 工具和数据创建了地图，类似百度和高德的左下的角标。</p></blockquote><blockquote><p><code>Mapbox</code> 要求所有地图都包含 <code>Mapbox</code> 字标和文本。 <code>Mapbox</code> 字标是一个小图像，包含程式化的单词 <code>Mapbox</code> 和 <code>Mapbox</code> 徽标。<br>文本属性至少包含三个链接：©Mapbox，©OpenStreetMap和改进此地图。<br>由于 <code>OpenStreetMap</code> 的数据源 <code>ODbL</code> 许可证，使用 <code>Mapbox Streets tileset</code> 时严格要求此属性。<br>有关如何以及何时需要 <code>attribution</code> 的详细信息，请参阅我们的 <a href="https://www.mapbox.com/help/attribution/" target="_blank" rel="noopener">attribution guide</a>。</p></blockquote><hr><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><hr><h1 id="baselayer-基础图层"><a href="#baselayer-基础图层" class="headerlink" title="baselayer (基础图层)"></a><a href="https://www.mapbox.com/help/define-baselayer/" target="_blank" rel="noopener">baselayer</a> (基础图层)</h1><blockquote><p><strong>baselayer</strong> 通常是指您在 <a href="https://www.mapbox.com/help/define-mapbox-studio-classic" target="_blank" rel="noopener">Mapbox Studio Classic</a> 或 <a href="https://www.mapbox.com/api-documentation/#maps" target="_blank" rel="noopener">Mapbox classic styles</a> 中设计的地图样式。<strong>baselayer</strong> 提供地理上下文，并作为地图的起点。</p></blockquote><h1 id="bearing-方位"><a href="#bearing-方位" class="headerlink" title="bearing (方位)"></a><a href="https://www.mapbox.com/help/define-bearing/" target="_blank" rel="noopener">bearing</a> (方位)</h1><blockquote><p><strong>bearing</strong> 或 <a href="https://www.mapbox.com/help/define-heading" target="_blank" rel="noopener">航向</a>，是你面对从正北上的罗盘的角度顺时针测得的方向，顺时针测量为指南针上的真北角（北为0°，东为90°，南为180°，和西是270°）。</p></blockquote><h1 id="bounding-box-边界框"><a href="#bounding-box-边界框" class="headerlink" title="bounding box (边界框)"></a><a href="https://www.mapbox.com/help/define-bounding-box/" target="_blank" rel="noopener">bounding box</a> (边界框)</h1><blockquote><p><strong>bounding box</strong> 是用于描述地图的特定区域的机制。它通常表示为坐标对的数组，第一个坐标对指的是盒子的西南角，第二个坐标对指盒子的东北角。创建地图或启动地理编码请求的任何 <code>Mapbox</code> 库都有一个类或对象，用于在代码中使用<strong>bounding box</strong>：创建地图或发起地址解析请求任何 <code>Mapbox</code> 库中有在代码中使用<strong>bounding box</strong>类或对象：</p></blockquote><ul><li><a href="https://www.mapbox.com/help/define-mapbox-js" target="_blank" rel="noopener">Mapbox.js</a> and <a href="https://www.mapbox.com/help/define-leaflet" target="_blank" rel="noopener">Leaflet</a> - <a href="https://www.mapbox.com/mapbox.js/api/v2.3.0/l-latlngbounds/" target="_blank" rel="noopener"><code>L.LatLngBounds</code></a></li><li><a href="https://www.mapbox.com/help/define-mapbox-gl-js" target="_blank" rel="noopener">Mapbox GL JS</a> - <a href="https://www.mapbox.com/mapbox-gl-js/api/#LngLatBounds" target="_blank" rel="noopener"><code>LngLatBounds</code></a></li><li><a href="https://www.mapbox.com/help/define-turf" target="_blank" rel="noopener">Turf.js</a> - <a href="http://turfjs.org/docs#bbox" target="_blank" rel="noopener"><code>turf.bbox</code></a></li><li><a href="https://www.mapbox.com/help/define-ios-sdk" target="_blank" rel="noopener">Mapbox Maps SDK for iOS</a> - <a href="https://www.mapbox.com/ios-sdk/api/3.1.1/Structs/MGLCoordinateBounds.html" target="_blank" rel="noopener"><code>MGLCoordinateBounds</code></a></li><li><a href="https://www.mapbox.com/help/define-android-sdk" target="_blank" rel="noopener">Mapbox Maps SDK for Android</a> - <a href="https://www.mapbox.com/android-docs/api/map-sdk/5.5.1/com/mapbox/mapboxsdk/geometry/LatLngBounds.html" target="_blank" rel="noopener"><code>BoundingBox</code> class</a></li><li><a href="https://www.mapbox.com/android-docs/java-sdk/overview/geocoder" target="_blank" rel="noopener">Mapbox Java SDK</a> – <a href="https://www.mapbox.com/android-docs/api/mapbox-java/libjava-services/3.0.0/com/mapbox/api/geocoding/v5/MapboxGeocoding.Builder.html#bbox-java.lang.String-" target="_blank" rel="noopener"><code>MapboxGeocoding.Builder.bbox()</code> method</a></li><li><a href="https://github.com/mapbox/MapboxGeocoder.swift" target="_blank" rel="noopener">MapboxGeocoder.swift</a> – <a href="https://github.com/mapbox/MapboxGeocoder.swift/blob/master/MapboxGeocoder/MBRectangularRegion.swift" target="_blank" rel="noopener"><code>RectangularRegion</code> class</a></li></ul><hr><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><hr><h1 id="camera-摄像机"><a href="#camera-摄像机" class="headerlink" title="camera (摄像机)"></a><a href="https://www.mapbox.com/help/define-camera/" target="_blank" rel="noopener">camera</a> (摄像机)</h1><blockquote><p>在使用 <code>Mapbox GL</code> 的地图中，<strong>camera</strong>是地图的视野。<strong>camera</strong>的视口是由几个因素决定：</p><ul><li><strong>中心：</strong>定义地图的中心坐标。</li><li><strong>缩放级别：</strong>一个数字，确定视口有多接近地图的表面。缩放级别为零将显示整个世界。缩放级别越高，视口越接近地图的表面。</li><li><strong>间距：</strong>以度为单位测量地平线的角度，范围在0到60度之间。零度会产生二维地图，就好像您的视线与地球表面形成一个垂直角度。。</li><li><strong>方位：</strong>目的地的旋转角度，以度为单位从北向逆时针测量，范围在0到360度之间。</li></ul></blockquote><h1 id="CartoCSS"><a href="#CartoCSS" class="headerlink" title="CartoCSS"></a><a href="https://www.mapbox.com/help/define-cartocss/" target="_blank" rel="noopener">CartoCSS</a></h1><blockquote><p><strong>CartoCSS</strong> 是 <code>Mapbox Studio Classic</code> 用于构建经典样式的语言。您可以使用 <code>CartoCSS</code> 选择颜色，在特定缩放级别应用不同的渲染，并且通常将样式应用于矢量数据。</p></blockquote><p>以下是<strong>CartoCSS</strong>样式道路标签的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#road_label &#123;</span><br><span class="line">  text-name: @name;</span><br><span class="line">  text-placement: line;</span><br><span class="line">  text-face-name: @sans;</span><br><span class="line">  text-fill: #333;</span><br><span class="line">  text-halo-fill: fadeout(#fff, 75%);</span><br><span class="line">  text-halo-radius: 2;</span><br><span class="line">  text-halo-rasterizer: fast;</span><br><span class="line">  text-size: 12;</span><br><span class="line">  text-margin: 20;</span><br><span class="line">  text-avoid-edges: true;</span><br><span class="line">  [zoom&gt;=15] &#123; text-size: 13; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顾名思义，<code>CartoCSS</code> 就像 <code>CSS</code>，用于 <code>HTML</code> 样式的语言。 <code>CartoCSS</code> 是地图数据的 <code>CSS</code>。阅读  <a href="https://www.mapbox.com/carto/" target="_blank" rel="noopener">CartoCSS 文档</a> 以了解更多信息。</p></blockquote><h1 id="classic-style-经典样式"><a href="#classic-style-经典样式" class="headerlink" title="classic style (经典样式)"></a><a href="https://www.mapbox.com/help/define-classic-style/" target="_blank" rel="noopener">classic style</a> (经典样式)</h1><blockquote><p>在 <a href="https://www.mapbox.com/help/define-mapbox-studio-classic" target="_blank" rel="noopener">Mapbox Studio Classic</a> 中，<code>classic style</code> 包含  <a href="https://www.mapbox.com/help/define-cartocss" target="_blank" rel="noopener">CartoCSS</a> 样式表，基本精简元数据（名称，描述，属性等）以及对 <a href="https://www.mapbox.com/help/define-source" target="_blank" rel="noopener">source</a>的引用。 将 <code>classic style</code> 上传到 <code>Mapbox.com</code> 后，它将显示在 <a href="https://www.mapbox.com/studio/classic/styles/" target="_blank" rel="noopener">Classic styles page</a> 页面上。 </p></blockquote><h1 id="coordinate-坐标"><a href="#coordinate-坐标" class="headerlink" title="coordinate (坐标)"></a><a href="https://www.mapbox.com/help/define-coordinate/" target="_blank" rel="noopener">coordinate</a> (坐标)</h1><blockquote><p><strong>coordinate</strong> 是纬度和经度的组合。海拔高度可以作为第三个值包含在内。</p></blockquote><h1 id="CSV-逗号分隔值"><a href="#CSV-逗号分隔值" class="headerlink" title="CSV (逗号分隔值)"></a><a href="https://www.mapbox.com/help/define-csv/" target="_blank" rel="noopener">CSV</a> (逗号分隔值)</h1><blockquote><p> <strong>CSV</strong>  (<a href="https://zh.wikipedia.org/wiki/逗号分隔值" target="_blank" rel="noopener">维基百科解释</a>) 的格式对于表格数据很常见，例如您可以在 <code>Excel</code> 或其他电子表格中使用的格式。 <code>CSV</code> 文件不一定是可映射的，除非它们包含地理信息（如纬度和经度）。<br>阅读 <code>CSV</code> 文件疑难解答，了解有关如何格式化文件的示例。<a href="https://www.mapbox.com/help/data/airports.csv" target="_blank" rel="noopener"> Download a sample CSV file</a></p></blockquote><p>上传 <code>CSV</code> 文件时，请注意以下事项： </p><blockquote><ul><li>查看 <code>Mapbox</code> 上传 <code>API</code>  <a href="https://www.mapbox.com/developers/api/uploads" target="_blank" rel="noopener">文档</a>，了解 <code>CSV</code> 文件的当前大小限制。 </li><li><code>CSV</code> 文件必须采用 <code>UTF-8</code> 编码。 </li><li>在 <code>Mapbox Studio</code> 或 <code>Mapbox Studio Classic</code> 中上传时，<code>CSV</code> 文件必须包含坐标（纬度和经度）。 </li><li><code>CSV</code> 文件仅用于点数据。 </li><li>通过 <code>CSV</code> 导入的数据将在 <code>Mapbox Studio</code> 数据集编辑器中编码为字符串类型。<br>如果要将任何导入的数据编码为数字，可以在数据集编辑器中单独编辑字段，也可以 <a href="https://www.mapbox.com/help/define-geojson" target="_blank" rel="noopener">GeoJSON format</a> 上传数据。</li></ul></blockquote><hr><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><hr><h1 id="data-driven-styling"><a href="#data-driven-styling" class="headerlink" title="data-driven styling"></a><a href="https://www.mapbox.com/help/define-data-driven-styling/" target="_blank" rel="noopener">data-driven styling</a></h1><blockquote><p><strong>data-driven styling</strong> 允许您根据空间数据的属性设置样式。例如，使用<strong>data-driven styling</strong>，您可以根据穿越十字路口的行人数量更改交叉点处的圆的半径，根据根据每个州的人口更改状态多边形的颜色，或使用条件逻辑创建双语标签。 <code>Mapbox Studio</code>，<code>Mapbox GL JS</code>，适用于 <code>iOS</code> 的 <code>Mapbox Maps SDK</code> 以及适用于 <code>Android</code> 的 <code>Mapbox Maps SDK</code> 均提供<strong>data-driven styling</strong>。</p></blockquote><blockquote><p><strong>Property functions vs property expressions（属性函数与属性表达式）</strong> </p><p>我们最近改变了<strong>data-driven styling</strong>的工作方式 - 从属性函数到属性表达式。属性表达式可帮助您实现与属性函数类似的效果，并具有更多的灵活性和功能。属性表达式在 <code>Mapbox GL JS v0.41.0</code> 中引入。虽然属性函数目前仍然可用，但它们最终将被弃用并由属性表达式替换。</p><p><strong>表达式兼容：</strong> </p><ul><li>Mapbox GL JS 0.41.0及以上版本。 </li><li>Mapbox Android SDK 6.0.0及更高版本。 </li><li>Mapbox iOS SDK 4.0.0及更高版本。</li></ul></blockquote><h1 id="dataset-数据集合"><a href="#dataset-数据集合" class="headerlink" title="dataset (数据集合)"></a><a href="https://www.mapbox.com/help/define-dataset/" target="_blank" rel="noopener">dataset</a> (数据集合)</h1><blockquote><p><strong>dataset</strong> 是 <a href="https://www.mapbox.com/help/define-geojson" target="_blank" rel="noopener">GeoJSON</a> <a href="https://www.mapbox.com/help/define-features" target="_blank" rel="noopener">features</a> 的可编辑集合。<strong>dataset</strong>可以通过 <code>Mapbox Studio</code> 或 <code>Mapbox Datasets API</code> 上传到 <code>Mapbox</code> ，也可以在 <code>Mapbox Studio</code> 数据集编辑器中进行编辑。<br>有关更多信息，请查看 <a href="https://www.mapbox.com/studio-manual/reference/datasets/" target="_blank" rel="noopener">Mapbox Studio手册</a>。</p></blockquote><h1 id="dataset-ID-数据集ID"><a href="#dataset-ID-数据集ID" class="headerlink" title="dataset ID (数据集ID)"></a><a href="https://www.mapbox.com/help/define-dataset-id/" target="_blank" rel="noopener">dataset ID</a> (数据集ID)</h1><blockquote><p>每次使用  <a href="https://www.mapbox.com/studio/datasets" target="_blank" rel="noopener">Mapbox Studio数据集编辑器</a> 创建数据集时，它都会生成<strong>dataset ID</strong>。您可以使用<strong>dataset ID</strong> <a href="https://www.mapbox.com/api-documentation/#datasets" target="_blank" rel="noopener">Mapbox数据集API</a> 发出与数据集相关的请求。</p></blockquote><hr><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><hr><h1 id="expression-表达式"><a href="#expression-表达式" class="headerlink" title="expression (表达式)"></a><a href="https://www.mapbox.com/help/define-expression/" target="_blank" rel="noopener">expression</a> (表达式)</h1><blockquote><p><strong>expression</strong> 定义用于计算地图样式中任何布局属性，绘制属性或过滤器的值的公式。表达式允许您一次为多个要素属性设置数据样式，应用条件逻辑，并使用数学，逻辑和字符串运算符操作数据。这允许复杂的 <a href="https://www.mapbox.com/help/define-runtime-styling" target="_blank" rel="noopener">runtime styling</a>。<br>有关在地图样式中使用表达式的更多信息，请查看 <a href="https://www.mapbox.com/mapbox-gl-js/style-spec#expressions" target="_blank" rel="noopener">Mapbox样式规范</a> 或 <a href="https://www.mapbox.com/ios-sdk/api/4.5.0/predicates-and-expressions.html" target="_blank" rel="noopener">Mapbox iOS SDK表达式</a> 参考。</p></blockquote><hr><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><hr><h1 id="features"><a href="#features" class="headerlink" title="features"></a><a href="https://www.mapbox.com/help/define-features/" target="_blank" rel="noopener">features</a></h1><blockquote><p><strong>features</strong> 指的是数据集或图块集中的地理空间要素。例如，表示休闲公园的单个多边形是可以属于包含城市公园多边形的数据集的特征的一个示例。</p></blockquote><h1 id="feature-querying-要素查询"><a href="#feature-querying-要素查询" class="headerlink" title="feature querying (要素查询)"></a><a href="https://www.mapbox.com/help/define-feature-querying/" target="_blank" rel="noopener">feature querying</a> (要素查询)</h1><blockquote><p><strong>feature querying</strong> 是在特定位置识别区块集中的 <a href="https://www.mapbox.com/help/define-features/" target="_blank" rel="noopener">要素</a> 的过程。例如，如果您有一个带有公园的图层的地图，则可以使用 <code>Mapbox</code> 工具查看特定坐标中是否存在公园要素。</p></blockquote><blockquote><p><strong>feature querying</strong>支持许多高级地图可视化，允许用户选择特定点以发现位于下方的数据。可以使用  <a href="https://www.mapbox.com/mapbox-gl-js/api/#map#queryrenderedfeatures" target="_blank" rel="noopener">Mapbox GL JS</a> ，适用于 <a href="https://www.mapbox.com/ios-sdk/api/4.5.0/Classes/MGLMapView.html#/Accessing%20the%20Underlying%20Map%20Data" target="_blank" rel="noopener">Mapbox Maps SDK for iOS</a>,或适用于 <a href="https://www.mapbox.com/android-docs/api/map-sdk/6.6.5/com/mapbox/mapboxsdk/maps/MapboxMap.html#queryRenderedFeatures-android.graphics.PointF-com.mapbox.mapboxsdk.style.layers.Filter.Statement-java.lang.String...-" target="_blank" rel="noopener">Mapbox Maps SDK for Android</a> 在 <code>Web</code> 地图上执行要素查询。</p></blockquote><h1 id="filter-过滤器"><a href="#filter-过滤器" class="headerlink" title="filter (过滤器)"></a><a href="https://www.mapbox.com/help/define-filter/" target="_blank" rel="noopener">filter</a> (过滤器)</h1><blockquote><p><strong>filter</strong>（也就是<code>iOS</code> 和 <code>macOS</code>中的断言）可以对样式层的内容进行细粒度控制。从 <code>GeoJSON</code> 或矢量源获取其功能的样式图层仅包含满足您定义的过滤器或断言条件的功能。<br>有关更多信息，请参阅过 <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#types-filter" target="_blank" rel="noopener">过滤器</a> 和 <a href="https://www.mapbox.com/ios-sdk/api/https://www.mapbox.com/predicates-and-expressions.html#using-predicates-to-filter-vector-data" target="_blank" rel="noopener">断言</a>的文档。</p></blockquote><h1 id="font-stack-字体堆"><a href="#font-stack-字体堆" class="headerlink" title="font stack (字体堆)"></a><a href="https://www.mapbox.com/help/define-font-stack/" target="_blank" rel="noopener">font stack</a> (字体堆)</h1><blockquote><p><strong>font stack</strong> 是包含主要字体和可选后备字体的字体的有序列表，如图层中所定义。在字体堆中，主要和后备字体的组合定义了渲染器应尝试查找图层中使用的字符的顺序。如果在第一个<strong>font stack</strong>中找不到字符，渲染器将尝试使用下一个字符，直到找到一个。</p></blockquote><p>看完上面官方的描述可能有点懵来看段 <code>ccs</code> 样式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    font-family: Georgia, &quot;Times New Roman&quot;, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的就是所以的<strong>font stack</strong>，浏览器在加载样式的时候会先从 <code>font-family</code>的属性后面的第一个开始匹配，如果第一个 <code>Georgia</code> 字体找到了，那后面的就不会在找了，如果第一个字体没有找到，浏览器将尝试找下一个字符，直到找到一个为止。</p><blockquote><p>样式对象本身没有<strong>font stack</strong>。<br>相反，单个图层具有自己的<strong>font stack</strong>，这些<strong>font stack</strong>在符号图层的 <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-text-font" target="_blank" rel="noopener">text-font</a> 属性中定义，如 <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/" target="_blank" rel="noopener">Mapbox样式规范</a> 中所述。</p></blockquote><blockquote><p>您可以管理样式中使用的<strong>font stack</strong>，以缩短渲染时间并减小离线地图的大小。</p></blockquote><hr><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><hr><h1 id="geocoding-地理编码"><a href="#geocoding-地理编码" class="headerlink" title="geocoding (地理编码)"></a><a href="https://www.mapbox.com/help/define-geocoding/" target="_blank" rel="noopener">geocoding</a> (地理编码)</h1><blockquote><p><strong>geocoding</strong> 是获取地点的地址或名称并将其转换为纬度和经度值的过程。 <code>Mapbox geocoding API</code> 允许您执行两种类型的地理编码：<strong>Forward geocoding（地理编码）</strong> 和 <strong>Reverse geocoding（逆向地理编码）</strong>。</p></blockquote><blockquote><p><strong>Forward geocoding</strong> 将文本转换为地理坐标。<br>例如，将2 Lincoln Memorial Circle NW的地址转换为-77.050,38.889的坐标值。</p></blockquote><blockquote><p><strong>Reverse geocoding</strong> 将地理坐标转换为文本描述，例如，将-77.050,38.889转换为2 Lincoln Memorial Circle NW的地址。</p></blockquote><blockquote><p>有关更多信息，请参阅 <a href="https://www.mapbox.com/developers/api/geocoding/" target="_blank" rel="noopener">Mapbox地理编码API文档</a>。</p></blockquote><h1 id="GeoJSON"><a href="#GeoJSON" class="headerlink" title="GeoJSON"></a><a href="https://www.mapbox.com/help/define-geojson/" target="_blank" rel="noopener">GeoJSON</a></h1><blockquote><p><strong>GeoJSON</strong> 是 <code>Mapbox Web</code> 服务和 <code>API</code> 提供的地图数据的文件格式。作为 <code>JSON</code> 格式的子集，它可以在现代软件中解析，并且可以使用 <code>JavaScript</code> 语言本地化。</p></blockquote><blockquote><p>您可以将 <code>GeoJSON</code> 文件上传到 <code>Mapbox</code> 帐户，以便在自定义地图样式中使用。有关详细信息，请参阅 <code>Mapbox Studio</code> 手动上载页面。下面是一个示例 <code>GeoJSON</code> 文件供参考。<a href="https://www.mapbox.com/help/data/stations.geojson" target="_blank" rel="noopener"> Download a sample GeoJSON file</a></p></blockquote><blockquote><p>有几种开源工具可用于将其他地理空间数据格式转换为 <code>GeoJSON</code>。<br>比较受欢迎的有： </p><ul><li><strong>togeojson</strong>，一个用于转换KML和GPX（XML格式）的节点包。 </li><li><strong>ogr2ogr</strong>，最终的40合1矢量数据转换工具。 </li><li><strong>geojson.io</strong>, 用于创建，转换和编辑 <code>GeoJSON</code>。</li></ul></blockquote><h1 id="GPX"><a href="#GPX" class="headerlink" title="GPX"></a><a href="https://www.mapbox.com/help/define-gpx/" target="_blank" rel="noopener">GPX</a></h1><blockquote><p><strong>GPX</strong> 或GPS交换格式是通常由<strong>GPX</strong>接收器创建的数据格式。</p></blockquote><blockquote><p>您可以将 <strong>GPX</strong> 文件上传到 <code>Mapbox</code> 帐户，以便在自定义地图样式中使用。有关详细信息，请参阅 <a href="https://www.mapbox.com/studio-manual/overview/geospatial-data/" target="_blank" rel="noopener">Mapbox Studio手动上传页面</a>。下面是一个示例 <strong>GPX</strong> 文件供参考。</p></blockquote><blockquote><p>请注意，<code>Mapbox</code> 不支持沿线的值（例如，沿着慢跑路线的各个点的海拔和时间）。可以上载沿一行的值的 <strong>GPX</strong> 文件，但 <code>Mapbox</code> 将忽略该行的任何数据。<br><a href="https://www.mapbox.com/help/data/run.gpx" target="_blank" rel="noopener"> Download a sample GPX file</a></p></blockquote><hr><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><hr><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a><a href="https://www.mapbox.com/help/define-iframe/" target="_blank" rel="noopener">iframe</a></h1><blockquote><p>注意：不推荐使用Mapbox编辑器。<br>您可以在 <a href="https://www.mapbox.com/studio/classic/projects/" target="_blank" rel="noopener">此处</a> 找到现有项目。<br>有关更多信息，请参阅我们的 <a href="https://www.mapbox.com/blog/fall-cleaning" target="_blank" rel="noopener">公告</a> 和  <a href="https://www.mapbox.com/blog/migrating-from-editor/" target="_blank" rel="noopener">迁移Mapbox编辑器项目</a> 指南。</p></blockquote><blockquote><p><code>Mapbox</code> 编辑器会为您生成嵌入代码，以便将地图添加到您的网站或博客中。嵌入代码使用  <code>&lt;iframe&gt;</code> 来显示您的地图。 此 <code>HTML</code> 元素允许您将网页放入另一个网页，从而使您的地图的所有代码与您网站上的代码隔离开来。</p></blockquote><hr><h1 id="K"><a href="#K" class="headerlink" title="K"></a>K</h1><hr><h1 id="KML"><a href="#KML" class="headerlink" title="KML"></a><a href="https://www.mapbox.com/help/define-kml/" target="_blank" rel="noopener">KML</a></h1><blockquote><p><strong>KML</strong> 是一种类似 <code>GeoJSON</code> 的文件格式，但在 <code>Google</code> 产品中更常用。与 <code>GeoJSON</code> 一样，它可以存储点，线，多边形和其他矢量数据。与 <code>GeoJSON</code> 不同，它基于 <code>XML</code> 而不是JSON。</p></blockquote><blockquote><p>您可以将 <code>KML</code> 文件上传到 <code>Mapbox Studio</code> ，以将自定义数据添加到地图中。<br>当您上传 <code>KML</code> 文件时，<code>Mapbox</code> 会将您的数据转换为矢量切片，以便您可以从中创建样式。</p></blockquote><blockquote><p>上传 <code>KML</code> 时，请注意 <code>Mapbox</code> 不支持任何 <code>KML</code> 扩展。有关上载 <code>shapefile</code> 的更多信息，请查看 <a href="https://www.mapbox.com/studio-manual/overview/geospatial-data/" target="_blank" rel="noopener">Mapbox Studio手册上传页面</a>。<a href="https://www.mapbox.com/help/data/farmers_markets.kml" target="_blank" rel="noopener"> Download a sample KML file</a></p></blockquote><hr><h1 id="L"><a href="#L" class="headerlink" title="L"></a>L</h1><hr><h1 id="Landsat-live"><a href="#Landsat-live" class="headerlink" title="Landsat-live"></a><a href="https://www.mapbox.com/help/define-landsat-live/" target="_blank" rel="noopener">Landsat-live</a></h1><blockquote><p><strong>Landsat-live</strong> 拥有世界各地的最新卫星图像。在过去32天内捕获每个像素并直接渲染到我们的图层中。</p></blockquote><blockquote><p>要在项目中使用图像，可以使用 <code>mapbox.landsat-live</code> <a href="https://www.mapbox.com/help/define-map-id" target="_blank" rel="noopener">map ID</a> 将其添加到 <code>Web</code> 地图或移动应用程序中。</p></blockquote><blockquote><p>您还可以使用 <code>mapbox.landsat-live-vt</code> <a href="https://www.mapbox.com/help/define-map-id" target="_blank" rel="noopener">map ID</a> 为矢量流添加矢量轮廓和元数据流。</p></blockquote><h1 id="latitude-and-longitude-纬度和经度"><a href="#latitude-and-longitude-纬度和经度" class="headerlink" title="latitude and longitude (纬度和经度)"></a><a href="https://www.mapbox.com/help/define-lat-lon/" target="_blank" rel="noopener">latitude and longitude</a> (纬度和经度)</h1><blockquote><p><strong>latitude and longitude</strong> 是用于描述 <a href="http://en.wikipedia.org/wiki/Latitude_and_longitude" target="_blank" rel="noopener">地理坐标系</a> 平面上的位置的一对数字（坐标）。数字为十进制度数，纬度为-90至90，经度为-180至180。</p></blockquote><blockquote><p>例如，华盛顿特区的纬度为38.8951，经度为-77.0364。在 <code>API</code> 调用中，您经常会看到数字放在一起并用逗号分隔：-77.0364,38.8951。</p></blockquote><blockquote><p>一个常见问题是混合坐标的顺序。一些工具和API格式化经度，纬度，而其他工具和 <code>API</code> 使用纬度，经度。请务必查看文档以了解如何格式化坐标。如果一个点没有显示您期望的位置 - 通过切换顺序进行故障排除！</p></blockquote><h1 id="layer-层"><a href="#layer-层" class="headerlink" title="layer (层)"></a><a href="https://www.mapbox.com/help/define-layer/" target="_blank" rel="noopener">layer</a> (层)</h1><blockquote><p>在 <a href="https://www.mapbox.com/help/define-style" target="_blank" rel="noopener">样式</a> 中使用图层将样式规则添加到特定的 <a href="https://www.mapbox.com/help/define-tileset" target="_blank" rel="noopener">数据</a> 子集。 （例如，如果您希望地图中的所有河流都是粉红色的，那么您可以为它创建一个样式的图层。）图层包含对数据的引用，它们用于定义样式以及样式要应用的规则。</p></blockquote><blockquote><p>阅读有关 <a href="https://www.mapbox.com/mapbox-gl-style-spec/#layers" target="_blank" rel="noopener">Mapbox样式规范 </a> 中图层的更多信息。</p></blockquote><h1 id="layout-and-paint-properties-布局和绘制属性"><a href="#layout-and-paint-properties-布局和绘制属性" class="headerlink" title="layout and paint properties (布局和绘制属性)"></a><a href="https://www.mapbox.com/help/define-layout-paint-property/" target="_blank" rel="noopener">layout and paint properties</a> (布局和绘制属性)</h1><blockquote><p><strong>layout and paint properties</strong> 是图层的两个子属性，用于定义在 <a href="https://www.mapbox.com/help/define-mapbox-gl/" target="_blank" rel="noopener">Mapbox GL</a> 贴图中如何渲染空间数据。</p></blockquote><blockquote><p><strong>layout properties</strong> 定义如何绘制该图层的数据，并在渲染过程中应用。布局属性的示例包括可见性，线帽和符号放置。</p></blockquote><blockquote><p><strong>paint properties</strong> 定义如何设置该图层的数据样式，并在稍后的渲染属性中应用。涂料属性的示例包括填充颜色，背景图案和线条不透明度。</p></blockquote><blockquote><p>有关<strong>layout and paint properties</strong>的更多信息，请参阅 <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layers" target="_blank" rel="noopener">Mapbox样式规范</a>。</p></blockquote><h1 id="Leaflet"><a href="#Leaflet" class="headerlink" title="Leaflet"></a><a href="https://www.mapbox.com/help/define-leaflet/" target="_blank" rel="noopener">Leaflet</a></h1><blockquote><p><strong>Leaflet</strong> 是一个开源的 <code>Web</code> 映射库，它构成了 <code>Mapbox.js</code> 的基础。它是在网页上运行的软件，可以使交互式地图成为可能。 <code>Leaflet</code> 从 <code>Mapbox</code> 等服务器请求切片，显示和动画它们，并支持其他叠加。</p></blockquote><hr><h1 id="M"><a href="#M" class="headerlink" title="M"></a>M</h1><hr><h1 id="Maki"><a href="#Maki" class="headerlink" title="Maki"></a><a href="https://www.mapbox.com/help/define-maki/" target="_blank" rel="noopener">Maki</a></h1><blockquote><p><strong>Maki</strong> 是 <code>Mapbox</code> 为地图设计师开发的一个图标集。它包括公共兴趣点图标，如公园，餐馆，露营地等。 <code>Mapbox Studio</code> 中的每个 <code>Mapbox</code> 模板样式都包含一组风格独特的 <strong>Maki</strong> 图标。</p></blockquote><h1 id="map-ID-地图ID"><a href="#map-ID-地图ID" class="headerlink" title="map ID   (地图ID)"></a><a href="https://www.mapbox.com/help/define-map-id/" target="_blank" rel="noopener">map ID</a>   (地图ID)</h1><blockquote><p>每当您将数据作为图块集上传到您的帐户时，都会获得一个 <strong>map ID</strong>。<strong>map ID</strong>还用于标识使用旧版 <code>Mapbox</code> 编辑器创建的项目以及使用 <code>Mapbox Studio Classic</code> 创建的样式。</p></blockquote><blockquote><p>地图ID将始终以您的 <code>Mapbox</code> 用户名开头，后跟您的 <code>tileset</code> 的唯一句柄：<code>username.handle</code>。请注意，在<code>Mapbox Studio</code> 样式编辑器中创建的样式和上载到 <code>Mapbox Studio</code> 或通过 <code>Mapbox Studio</code> 数据集编辑器创建的数据集没有<strong>map ID</strong> - 它们用 <a href="https://www.mapbox.com/help/define-style-url" target="_blank" rel="noopener">style URLs</a> 和 <a href="https://www.mapbox.com/help/define-dataset-id" target="_blank" rel="noopener">dataset IDs</a> 标识。</p></blockquote><blockquote><p>您可以使用 <a href="https://www.mapbox.com/api-documentation/#maps" target="_blank" rel="noopener">Mapbox Maps API</a> 直接请求 <code>tileset</code>。</p></blockquote><h1 id="map-view"><a href="#map-view" class="headerlink" title="map view"></a><a href="https://www.mapbox.com/help/define-map-view/" target="_blank" rel="noopener">map view</a></h1><blockquote><p><code>Web</code> 地图由单独的切片组成，可在浏览器中快速有效地呈现。当用户通过平移或缩放与地图交互时，会加载更多图块。要跟踪地图的使用情况，已加载的切片数将计为 <strong>map view</strong>。</p></blockquote><blockquote><p> <strong>瓦片可以通过三种方式呈现：</strong></p><ul><li>Mapbox Studio Styles</li><li>Mapbox Static API </li><li>Mapbox Classic Styles</li></ul></blockquote><blockquote><p>每种方法的地图视图都有所不同</p></blockquote><h4 id="Mapbox-Studio-Styles-4-tiles"><a href="#Mapbox-Studio-Styles-4-tiles" class="headerlink" title="Mapbox Studio Styles (4 tiles)"></a>Mapbox Studio Styles (4 tiles)</h4><blockquote><p>使用 <code>Mapbox Studio</code> 样式时，在视口中加载四个图块时会记录单个地图视图。当用户缩放经过缩放16时，可以节省过度索引以节省切片负载。</p></blockquote><h4 id="Mapbox-Static-API-1-request"><a href="#Mapbox-Static-API-1-request" class="headerlink" title="Mapbox Static API (1 request)"></a>Mapbox Static API (1 request)</h4><blockquote><p>当您对 <code>Mapbox Static API</code> 发出单个请求（用于创建静态地图图像）时，会计算一个地图视图。</p></blockquote><h4 id="Mapbox-Studio-Classic-15-tiles"><a href="#Mapbox-Studio-Classic-15-tiles" class="headerlink" title="Mapbox Studio Classic (15 tiles)"></a>Mapbox Studio Classic (15 tiles)</h4><blockquote><p>如果您使用了 <a href="https://www.mapbox.com/help/define-mapbox-editor" target="_blank" rel="noopener">Mapbox编辑器</a> 项目或 <a href="https://www.mapbox.com/help/define-mapbox-studio-classic" target="_blank" rel="noopener">Mapbox Studio Classic</a> 样式，则在地图上加载15个图块时会计算地图视图。</p></blockquote><blockquote><p>这些计数通常适用于大多数网站上的单页面视图。当用户与地图交互时，可以在单个会话期间生成多个地图视图。</p></blockquote><blockquote><p>为什么 <code>Mapbox</code> 工具中每个地图视图的切片数量不同？来自 <code>Mapbox Studio</code> 样式的图块覆盖更多像素，使得 <code>Mapbox Studio</code> 样式中的四个图块大致相当于来自 <code>Mapbox Editor</code> 项目和<code>Mapbox Studio Classic</code> 样式的15个图块。</p></blockquote><blockquote><p>请参阅我们的 <a href="https://www.mapbox.com/pricing" target="_blank" rel="noopener">定价页面</a> ，了解您的计划包含的地图视图数量。如需大批量年度折扣，请联系我们的销售团队，详细了解我们的定制计划产品。</p></blockquote><blockquote><p>对于本机移动应用程序和 <code>Unity</code> 应用程序，<code>Mapbox</code> 通过每月活跃用户而不是地图视图来计算使用情况。</p></blockquote><h1 id="Mapbox-Maps-SDK-for-Android"><a href="#Mapbox-Maps-SDK-for-Android" class="headerlink" title="Mapbox Maps SDK for Android"></a><a href="https://www.mapbox.com/help/define-android-sdk/" target="_blank" rel="noopener">Mapbox Maps SDK for Android</a></h1><blockquote><p>适用于 <code>Android</code> 的 <code>Mapbox Maps SDK</code> 是一个开源工具集，用于为 <code>Android</code> 设备构建地图应用程序，具有极大的视觉样式和可定制性灵活性。</p></blockquote><blockquote><ul><li><a href="https://www.mapbox.com/android-sdk/" target="_blank" rel="noopener">Maps SDK for Android文档</a></li><li><a href="https://github.com/mapbox/mapbox-gl-native/" target="_blank" rel="noopener">GitHub上的Maps SDK for Android</a></li><li><a href="https://www.mapbox.com/help/first-steps-android-sdk/" target="_blank" rel="noopener">开始使用Android的Mapbox Maps SDK</a></li></ul></blockquote><h1 id="Mapbox-Maps-SDK-for-iOS"><a href="#Mapbox-Maps-SDK-for-iOS" class="headerlink" title="Mapbox Maps SDK for iOS"></a><a href="https://www.mapbox.com/help/define-mapbox-ios-sdk/" target="_blank" rel="noopener">Mapbox Maps SDK for iOS</a></h1><blockquote><p>适用于 <code>iOS</code> 的 <code>Mapbox Maps SDK</code> 是一个开源工具集，用于为 <code>iPhone</code> 和 <code>iPad</code> 设备构建地图应用程序，具有极大的视觉样式和可定制性灵活性。</p></blockquote><blockquote><ul><li><a href="https://www.mapbox.com/ios-sdk/" target="_blank" rel="noopener">Maps SDK for iOS 文档</a></li><li><a href="https://github.com/mapbox/mapbox-gl-native/" target="_blank" rel="noopener">Maps SDK for iOS on GitHub</a></li><li><a href="https://www.mapbox.com/help/first-steps-ios-sdk/" target="_blank" rel="noopener">开始使用ios的Mapbox Maps SDK</a></li></ul></blockquote><h1 id="Mapbox-Directions-API-路线"><a href="#Mapbox-Directions-API-路线" class="headerlink" title="Mapbox Directions API (路线)"></a><a href="https://www.mapbox.com/help/define-directions-api/" target="_blank" rel="noopener">Mapbox Directions API</a> (路线)</h1><blockquote><p>借助 <code>Mapbox Directions API</code>，您可以向地图添加带有转弯路线的路线。 Mapbox提供三种不同的配置文件：驾驶，步行和骑自行车。</p></blockquote><blockquote><p>有关更多信息和示例，请查看：</p><ul><li><a href="https://www.mapbox.com/developers/api/directions/" target="_blank" rel="noopener">路线API文档</a></li><li><a href="https://www.mapbox.com/help/getting-started-directions-api/" target="_blank" rel="noopener">路线 API入门</a></li><li><a href="https://www.mapbox.com/mapbox-gl-js/example/mapbox-gl-directions/" target="_blank" rel="noopener">路线 API的GL JS插件</a></li><li><a href="https://github.com/mapbox/mapbox-directions.js" target="_blank" rel="noopener">Mapbox 路线 API的Leaflet插件 </a></li><li><a href="https://www.mapbox.com/mapbox.js/example/v1.0.0/mapbox-directions/" target="_blank" rel="noopener">Mapbox.js和路线 API插件示例</a></li></ul></blockquote><h1 id="Mapbox-Editor（一个过期的地图编辑器）"><a href="#Mapbox-Editor（一个过期的地图编辑器）" class="headerlink" title="Mapbox Editor（一个过期的地图编辑器）"></a><a href="https://www.mapbox.com/help/define-mapbox-editor/" target="_blank" rel="noopener">Mapbox Editor</a>（一个过期的地图编辑器）</h1><blockquote><p>注意：不推荐使用 <code>Mapbox</code> 编辑器。您可以在 <a href="https://www.mapbox.com/studio/classic/projects/" target="_blank" rel="noopener">这里</a> 找到现有项目。有关更多信息，请参阅我们的 <a href="https://www.mapbox.com/blog/fall-cleaning" target="_blank" rel="noopener">公告</a> 和 <a href="https://www.mapbox.com/blog/migrating-from-editor/" target="_blank" rel="noopener">迁移Mapbox编辑器项目指南</a>。</p></blockquote><blockquote><p><strong>Mapbox Editor</strong> 是一个用于设计地图的在线界面。 <code>Mapbox 编辑器</code> 不再处于快速迭代开发阶段。<br>有关我们最新的地图设计工具，请查看 <a href="https://www.mapbox.com/studio" target="_blank" rel="noopener">Mapbox Studio</a>。</p></blockquote><h1 id="Mapbox-GL"><a href="#Mapbox-GL" class="headerlink" title="Mapbox GL"></a><a href="https://www.mapbox.com/help/define-mapbox-gl/" target="_blank" rel="noopener">Mapbox GL</a></h1><blockquote><p><strong>Mapbox GL</strong> 是一套开源库，用于在 <code>Web</code>，移动和桌面应用程序中嵌入高度可定制和响应的客户端映射。地图以超高帧速率渲染。您可以使用 <code>Mapbox Studio</code> 中设计的自定义样式。您还可以动态操作样式外观的各个方面，因为 <strong>Mapbox GL</strong> 渲染矢量切片。缩写 <code>GL</code> 来自 <code>OpenGL</code> ，行业标准的开放图形库。</p></blockquote><blockquote><p><code>Mapbox GL</code> 在以下平台上得到官方支持：</p><ul><li>在 <code>Web</code> 上，使用 <a href="https://www.mapbox.com/mapbox-gl-js/" target="_blank" rel="noopener">Mapbox GL JS</a>。 </li><li>在 <code>Android</code> 上，使用 <a href="https://www.mapbox.com/android-sdk/" target="_blank" rel="noopener">Mapbox Maps SDK for Android</a>。 </li><li>在 <code>iOS</code> 上，使用 <a href="https://www.mapbox.com/ios-sdk/" target="_blank" rel="noopener">Mapbox Maps SDK for iOS</a>。 </li><li>在 <code>Qt</code> 上，使用 <a href="https://doc.qt.io/qt-5/location-plugin-mapboxgl.html" target="_blank" rel="noopener">Mapbox Maps SDK for Qt (Qt Location Mapbox GL Plugin)</a>。<br>本机 <code>macOS</code> 应用程序可以使用社区维护 <a href="https://mapbox.github.io/mapbox-gl-native/macos/" target="_blank" rel="noopener">Mapbox Maps SDK for macOS</a></li></ul></blockquote><blockquote><p>如果您希望将 <code>Mapbox</code> 地图合并到混合 <code>Android</code> 或 <code>iOS</code> 应用程序中，请查看我们关于构建 <a href="https://www.mapbox.com/help/hybrid-apps/" target="_blank" rel="noopener">混合应用程序</a> 的页面。请注意，我们无法为混合框架提供支持。</p></blockquote><h1 id="Mapbox-GL-JS"><a href="#Mapbox-GL-JS" class="headerlink" title="Mapbox GL JS"></a><a href="https://www.mapbox.com/help/define-mapbox-gl-js/" target="_blank" rel="noopener">Mapbox GL JS</a></h1><blockquote><p><strong>Mapbox GL JS</strong> 是一个使用 <code>Mapbox GL</code> 渲染交互式地图的 <code>JavaScript</code> 库。它可以免费使用。</p></blockquote><blockquote><p>您可以将 <code>Mapbox Studio</code> 创建的 <a href="https://www.mapbox.com/mapbox-gl-js/examples/" target="_blank" rel="noopener">Mapbox 样式</a> 或 <a href="https://www.mapbox.com/mapbox-gl-js/example/custom-style-id/" target="_blank" rel="noopener">自定义样式</a> 添加到 <strong>Mapbox GL JS</strong> 应用程序中。</p></blockquote><h1 id="Mapbox-js"><a href="#Mapbox-js" class="headerlink" title="Mapbox.js"></a><a href="https://www.mapbox.com/help/define-mapbox-js/" target="_blank" rel="noopener">Mapbox.js</a></h1><blockquote><p><strong>Mapbox.js</strong> 是一个 <code>JavaScript</code> 库，允许您向网站添加交互式地图。它是 <code>Leaflet</code> 的插件，是一个可以免费使用的开源库。</p></blockquote><blockquote><p>您可以将任何 <a href="https://www.mapbox.com/help/define-style/" target="_blank" rel="noopener">Mapbox Studio style</a> 或 <a href="https://www.mapbox.com/help/define-classic-style/" target="_blank" rel="noopener">Mapbox Studio Classic style</a> 用作 <code>Mapbox.js</code> 中的底图。有关更多信息，请参阅 <a href="https://www.mapbox.com/mapbox.js/api/" target="_blank" rel="noopener">Mapbox.js文档</a>。</p></blockquote><h1 id="Mapbox-Map-Matching-API"><a href="#Mapbox-Map-Matching-API" class="headerlink" title="Mapbox Map Matching API"></a><a href="https://www.mapbox.com/help/define-map-matching/" target="_blank" rel="noopener">Mapbox Map Matching API</a></h1><blockquote><p><strong>Mapbox Map Matching API</strong> 允许您记录记录的迹线，例如 <code>GPS</code> 跟踪器中的数据，并将它们捕捉到 <code>OpenStreetMap</code> 道路和路径网络。这有助于对齐嘈杂的轨迹并在地图上干净地显示它们。</p></blockquote><h1 id="Mapbox-Maps-SDK-for-React-Native"><a href="#Mapbox-Maps-SDK-for-React-Native" class="headerlink" title="Mapbox Maps SDK for React Native"></a><a href="https://www.mapbox.com/help/define-mapbox-maps-sdk-for-react-native/" target="_blank" rel="noopener">Mapbox Maps SDK for React Native</a></h1><blockquote><p>适用于 <code>React Native</code> 的 <code>Mapbox Maps SDK</code> 是一个跨平台解决方案，提供可重用的 <code>JavaScript</code> 组件，用于构建 <code>Android</code> 和 <code>iOS</code> 应用程序中的映射和位置。</p><ul><li><a href="https://github.com/mapbox/react-native-mapbox-gl/tree/master/docs" target="_blank" rel="noopener">Maps SDK for React Native文档</a></li><li><a href="https://github.com/mapbox/react-native-mapbox-gl/" target="_blank" rel="noopener">适用于React Native的Maps SDK </a></li><li><a href="https://www.mapbox.com/help/first-steps-react-native-sdk/" target="_blank" rel="noopener">开始使用 React Native Maps SDK </a></li></ul></blockquote><h1 id="Mapbox-Maps-SDK-for-Unity"><a href="#Mapbox-Maps-SDK-for-Unity" class="headerlink" title="Mapbox Maps SDK for Unity"></a><a href="https://www.mapbox.com/help/define-mapbox-maps-sdk-for-unity/" target="_blank" rel="noopener">Mapbox Maps SDK for Unity</a></h1><p><strong>Mapbox Maps SDK for Unity</strong> 是一组用于从真实地图数据构建 <code>Unity</code> 应用程序的工具。它包含一个强大的 <code>API</code>，用于连接 <code>Mapbox Web</code> 服务，将地图资源转换为游戏对象，以及构建在 <code>Unity</code> 平台之上的强大的图形用户界面。</p><blockquote><p>要在您的应用程序中包含Mapbox Maps SDK for Unity，请访问文档页面以获取安装说明，API参考和教程：</p><ul><li><a href="https://www.mapbox.com/unity-sdk/" target="_blank" rel="noopener">Mapbox Maps SDK for Unity概述</a></li><li><a href="https://www.mapbox.com/mapbox-unity-sdk/api/" target="_blank" rel="noopener">API文档</a></li><li><a href="https://www.mapbox.com/unity-sdk/tutorials/" target="_blank" rel="noopener">教程</a></li><li><a href="https://www.mapbox.com/help/account-faq/#how-are-unity-apps-priced" target="_blank" rel="noopener">Unity应用的定价</a></li></ul></blockquote><h1 id="Mapbox-Matrix-API-矩阵"><a href="#Mapbox-Matrix-API-矩阵" class="headerlink" title="Mapbox Matrix API (矩阵)"></a><a href="https://www.mapbox.com/help/define-matrix-api/" target="_blank" rel="noopener">Mapbox Matrix API</a> (矩阵)</h1><blockquote><p><strong>Mapbox Matrix API</strong>（以前称为距离 API）计算一个API请求中多个点之间的行程时间。</p></blockquote><blockquote><p><code>Matrix API</code> 返回多个位置之间的行程时间，专门用于构建时间表或矩阵。多播源和目标的数量以创建矩阵或时间表，并计算发出请求所需的元素数量。例如，给定3个位置A，B，C，<code>Matrix API</code> 将返回所有位置之间所有行程时间（以秒为单位）的矩阵：</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5683553-e48edfb448bc40b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="image.png"></p><table><thead><tr><th></th><th></th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>A</td><td>A → A</td><td>A → B</td><td>A → C</td></tr><tr><td>B</td><td>B → A</td><td>B → B</td><td>B → C</td></tr><tr><td>C</td><td>C → A</td><td>C → B</td><td>C → C     </td></tr></tbody></table><blockquote><p><code>Matrix API</code> 适用于全球范围，可用于驾驶，骑行和步行路线配置文件。详细了解<code>Mapbox Matrix API</code>  <a href="https://www.mapbox.com/help/how-directions-work/" target="_blank" rel="noopener">工作原理教程</a> 。 <code>Mapbox Matrix API</code> 适用于所有计划级别。</p></blockquote><h1 id="Mapbox-Matrix-API-elements"><a href="#Mapbox-Matrix-API-elements" class="headerlink" title="Mapbox Matrix API elements"></a><a href="https://www.mapbox.com/help/define-matrix-api-elements/" target="_blank" rel="noopener">Mapbox Matrix API elements</a></h1><blockquote><p><strong>Mapbox Matrix API</strong> 处理不同大小的批量请求，因此会根据返回的元素数量而不是请求来跟踪 <a href="https://www.mapbox.com/account/statistics/" target="_blank" rel="noopener">计费</a><br>。<br>例如，来自 <code>Matrix API</code> 的一个请求可以是许多不同的源和目标对，因此来自 <code>Matrix API</code> 的一个请求等于源的数量乘以目的地的数量（例如：2个源x 3个目的地等于6个元素）。<br><img src="https://upload-images.jianshu.io/upload_images/5683553-0e9dcc0c8e6e9972.gif?imageMogr2/auto-orient/strip" alt="演示.gif"></p></blockquote><blockquote><p>阅读有关 <code>Mapbox Matrix API</code> 如何在我们全面的方向工作指南中工作的 <a href="https://www.mapbox.com/help/how-directions-work/#mapbox-matrix-api" target="_blank" rel="noopener">更多信息</a>。</p></blockquote><h1 id="Mapbox-Navigation-SDK-导航"><a href="#Mapbox-Navigation-SDK-导航" class="headerlink" title="Mapbox Navigation SDK (导航)"></a><a href="https://www.mapbox.com/help/define-mapbox-navigation-sdk/" target="_blank" rel="noopener">Mapbox Navigation SDK</a> (导航)</h1><blockquote><p><strong>Mapbox Navigation SDK</strong> 构建于 <code>Mapbox Directions API</code> 之上，<code>Mapbox Navigation SDK</code> 包含以下关键功能：</p><ul><li>插入式的turn-by-turn导航UI。</li><li>汽车，自行车和步行路线。</li><li>避免交通堵塞。</li><li>机动公告。</li><li>文字说明。</li><li>文本到语音支持。</li><li>自动重新规划路线。</li><li>快速路线。</li></ul></blockquote><blockquote><p>要在应用程序中包含 <code>Mapbox Navigation SDK</code>，请访问相应的文档页面以获取安装说明，API参考和示例代码： </p><ul><li><a href="https://www.mapbox.com/ios-sdk/navigation/" target="_blank" rel="noopener">Mapbox Navigation for iOS</a></li><li><a href="https://www.mapbox.com/android-docs/navigation/" target="_blank" rel="noopener">Mapbox Navigation for Android</a></li></ul></blockquote><h1 id="Mapbox-Satellite-卫星"><a href="#Mapbox-Satellite-卫星" class="headerlink" title="Mapbox Satellite (卫星)"></a><a href="https://www.mapbox.com/help/define-mapbox-satellite/" target="_blank" rel="noopener">Mapbox Satellite</a> (卫星)</h1><blockquote><p><strong>Mapbox Satellite</strong> 是高分辨率卫星图像的全球底图。 图像数据来自各种商业提供商，以及来自 <code>NASA</code>，<code>USGS</code> 和其他公司的开放数据。 它经过颜色校正并混合在一起成为一个光栅图块集。</p></blockquote><blockquote><p><strong>Mapbox Satellite</strong> 免费提供给 <code>Mapbox Studio</code> 样式编辑器中缩放级别0-19的所有用户，以及使用样式URL mapbox：// styles / mapbox / satellite-v9或map ID mapbox.satellite的API和SDK。</p></blockquote><h1 id="Mapbox-Static-API"><a href="#Mapbox-Static-API" class="headerlink" title="Mapbox Static API"></a><a href="https://www.mapbox.com/help/define-static-api/" target="_blank" rel="noopener">Mapbox Static API</a></h1><blockquote><p>您可以使用 <strong>Mapbox Static API</strong> 生成地图的静态图像。 这是在没有 <code>JavaScript</code> 或插件的情况下将地图添加到您的网站或博客的好方法。 每个静态地图图像都计为1个地图视图。</p></blockquote><blockquote><p>如果您正在使用 <code>Mapbox Studio</code> 中的样式，则可以使用 <code>Static API</code> 检索静态图像。</p></blockquote><blockquote><p>如果您使用的是 <code>Mapbox Studio Classic</code>、<code>Mapbox Editor</code>、 <code>Mapbox map ID</code>，请使用<code>Classic Static API</code>。</p></blockquote><blockquote><p>要了解更多信息，请阅读 <a href="https://www.mapbox.com/help/how-static-maps-work/#creating-static-maps" target="_blank" rel="noopener">创建静态地图</a>。</p></blockquote><h1 id="Mapbox-Studio-Classic"><a href="#Mapbox-Studio-Classic" class="headerlink" title="Mapbox Studio Classic"></a><a href="https://www.mapbox.com/help/define-mapbox-studio-classic/" target="_blank" rel="noopener">Mapbox Studio Classic</a></h1><blockquote><p><strong>Mapbox Studio Classic</strong> 是一个用于设计地图的桌面应用程序。 它允许您使用矢量切片和 <code>CartoCSS</code> 创建地图。 <strong>Mapbox Studio Classic</strong> 允许您以 <code>MBTiles</code> 格式将地图直接导出并上传到 <code>Mapbox</code> 帐户，然后与我们的开发人员工具一起使用。</p></blockquote><blockquote><p>创建新地图？<code>Mapbox Studio</code> 是 <strong>Mapbox Studio Classic</strong> 的现代替代品。 如果您今天开始创建地图，我们建议您使用 <code>Mapbox Studio</code> 而不是 <strong>Mapbox Studio Classic</strong>。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5683553-809d720111fc8871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="image.png"></p><h1 id="Mapbox-Studio"><a href="#Mapbox-Studio" class="headerlink" title="Mapbox Studio"></a><a href="https://www.mapbox.com/help/define-mapbox-studio/" target="_blank" rel="noopener">Mapbox Studio</a></h1><blockquote><p><strong>Mapbox Studio</strong> 是一个用于创建自定义地图的 <code>Web</code> 应用程序。 您可以管理和创建数据集，切片集和地图样式。</p></blockquote><blockquote><p>要开始使用 <code>Mapbox Studio</code>，请查看 <a href="https://www.mapbox.com/studio-manual/" target="_blank" rel="noopener">Mapbox Studio手册</a>。</p></blockquote><h1 id="Mapbox-Uploads-API-上传"><a href="#Mapbox-Uploads-API-上传" class="headerlink" title="Mapbox Uploads API (上传)"></a><a href="https://www.mapbox.com/help/define-uploads-api/" target="_blank" rel="noopener">Mapbox Uploads API</a> (上传)</h1><blockquote><p>使用 <strong>Mapbox Uploads API</strong>，您可以将 <code>Mapbox</code> 强大的数据上传功能集成到您的应用程序中。 我们提供临时凭证以在 <code>S3</code> 上暂存空间文件，然后将其处理为 <code>Mapbox GL和Mapbox.js</code> 可读的栅格切片或 <code>Mapbox</code> 矢量切片。</p></blockquote><blockquote><p>API支持各种空间文件类型，包括<a href="https://www.mapbox.com/help/define-geojson" target="_blank" rel="noopener">GeoJSON</a>, <a href="https://www.mapbox.com/help/define-kml" target="_blank" rel="noopener">KML</a>, <a href="https://www.mapbox.com/help/define-gpx" target="_blank" rel="noopener">GPX</a>, <a href="https://www.mapbox.com/help/define-shapefile" target="_blank" rel="noopener">Shapefiles</a>, <a href="https://www.mapbox.com/help/define-csv" target="_blank" rel="noopener">CSV</a>, <a href="https://www.mapbox.com/help/define-tiff" target="_blank" rel="noopener">GeoTIFF</a>, and <a href="https://www.mapbox.com/help/define-mbtiles" target="_blank" rel="noopener">MBTiles</a> 我们不断增加对更多类型和更大文件的支持。</p></blockquote><h1 id="Mapbox-web-services-Mapbox-Web服务"><a href="#Mapbox-web-services-Mapbox-Web服务" class="headerlink" title="Mapbox web services (Mapbox Web服务)"></a><a href="https://www.mapbox.com/help/define-rest-api/" target="_blank" rel="noopener">Mapbox web services</a> (Mapbox Web服务)</h1><blockquote><p><strong>Mapbox Web服务</strong> 是 <code>Mapbox</code> 的最低级别接口 - 它们是我们的 <code>JavaScript</code>，<code>Objective-C</code> 和其他系统构建的 <code>API</code>。</p></blockquote><blockquote><p>您可以从任何语言或环境连接到 <strong>Mapbox Web服务</strong> - 您可以使用 <code>Python</code> 请求模块，<code>node.js</code> 请求模块，用于 <code>Ruby</code> 的 <code>HTTParty</code> 或您选择的语言的其他 <code>HTTP</code> 请求库。</p></blockquote><h1 id="mapnik"><a href="#mapnik" class="headerlink" title="mapnik"></a><a href="https://www.mapbox.com/help/define-mapnik/" target="_blank" rel="noopener">mapnik</a></h1><blockquote><p><strong>Mapnik</strong> 是一个开源地图工具包，用于桌面和基于服务器的地图渲染，为空间数据访问和可视化提供算法和模式。 它是地理对象的集合，如地图，图层，数据源，要素和几何。</p></blockquote><blockquote><p><strong>Mapnik</strong> 用于在从 <a href="https://www.mapbox.com/api-documentation/#maps" target="_blank" rel="noopener">Mapbox Maps API</a> 请求切片时呈现 <a href="https://www.mapbox.com/help/define-classic-style/" target="_blank" rel="noopener">classic styles</a>。 它还用于在 <a href="https://www.mapbox.com/help/define-mapbox-studio-classic/" target="_blank" rel="noopener">Mapbox Studio Classic</a> 中渲染地图。</p></blockquote><h1 id="marker-地图中的标记"><a href="#marker-地图中的标记" class="headerlink" title="marker (地图中的标记)"></a><a href="https://www.mapbox.com/help/define-marker/" target="_blank" rel="noopener">marker</a> (地图中的标记)</h1><blockquote><p>在 <code>Web</code> 地图中，标记通常是地图上特定坐标的直观表示。 可以通过各种方式添加和自定义标记，以便在 <code>Mapbox Web</code> 地图和移动应用程序中使用。 您可以在我们的添加自定义图标和 <a href="https://www.mapbox.com/help/markers/" target="_blank" rel="noopener">标记指南</a> 中阅读有关可视化点数据的选项以及查找分步教程的更多信息。</p></blockquote><h1 id="MBTiles"><a href="#MBTiles" class="headerlink" title="MBTiles"></a><a href="https://www.mapbox.com/help/define-mbtiles/" target="_blank" rel="noopener">MBTiles</a></h1><blockquote><p><strong>MBTiles</strong> 是用于存储 <code>tileset</code> 的文件格式。 它的设计使您可以打包组成 <code>tileset</code> 的潜在数千个文件并移动它们，最终上传到 <code>Mapbox</code> 或在 <code>Web</code> 或移动应用程序中使用。 <code>MBTiles</code> 是一个开放的规范，基于 <code>SQLite</code> 数据库。 <code>MBTiles</code> 可以包含栅格或矢量 <code>tileset</code>。</p></blockquote><blockquote><p>您可以导出 <code>MBTiles</code> 格式的 <code>Mapbox Studio Classic</code> 源以直接上载到 <code>Mapbox Studio</code>。 有关详细信息，请参阅 <a href="https://www.mapbox.com/help/define-mapbox-studio" target="_blank" rel="noopener">Mapbox Studio</a> 手动上载页面。 </p></blockquote><blockquote><p>下面是一个示例MBTiles文件供参考。<br><a href="https://www.mapbox.com/help/data/trails.mbtiles" target="_blank" rel="noopener"> Download sample MBTiles</a></p></blockquote><h1 id="monthly-active-users-月活跃用户"><a href="#monthly-active-users-月活跃用户" class="headerlink" title="monthly active users (月活跃用户)"></a><a href="https://www.mapbox.com/help/define-monthly-active-users/" target="_blank" rel="noopener">monthly active users</a> (月活跃用户)</h1><blockquote><p>对于使用适用于 <code>iOS</code>，<code>Android</code>，<code>React Native</code> 或 <code>Unity</code> 的 <code>Mapbox Maps SDK</code> 构建的本机移动应用程序，我们会跟踪每月活跃用户<code>（MAU）</code>，也称为移动用户，而不是地图视图。 这是在给定月份内访问应用程序中的地图的用户数。</p></blockquote><blockquote><p>请参阅我们的定价页面，了解您的计划包含的移动用户数量。 如果没有符合您需求的计划，<a href="https://www.mapbox.com/contact/sales" target="_blank" rel="noopener">请联系我们的销售团队</a> 以了解有关我们的自定义计划产品。</p></blockquote><blockquote><p>对于使用任何其他API构建的地图，我们会计算 <a href="https://www.mapbox.com/help/define-map-view/" target="_blank" rel="noopener">每月地图视图</a>。</p></blockquote><hr><h1 id="O"><a href="#O" class="headerlink" title="O"></a>O</h1><hr><h1 id="offline-regions-and-offline-packs-离线区域和离线包"><a href="#offline-regions-and-offline-packs-离线区域和离线包" class="headerlink" title="offline regions and offline packs (离线区域和离线包)"></a><a href="https://www.mapbox.com/help/define-offline-region/" target="_blank" rel="noopener">offline regions and offline packs</a> (离线区域和离线包)</h1><blockquote><p><strong>offline regions</strong>（也称为适用于 <code>iOS</code> 的 <code>Mapbox Maps SDK</code> 中的脱机包）是地图的已定义区域，可用于具有有限网络连接或无网络连接的条件，使用适用于 <a href="https://www.mapbox.com/ios-sdk/" target="_blank" rel="noopener">Mapbox Maps SDK for iOS</a> 和  <a href="https://www.mapbox.com/android-sdk/" target="_blank" rel="noopener">Mapbox Maps SDK for Android</a>。 有关更多信息，请查看我们的<a href="https://www.mapbox.com/help/mobile-offline/" target="_blank" rel="noopener">离线地图指南</a>。</p></blockquote><h1 id="OpenStreetMap-（OSM维基百科）"><a href="#OpenStreetMap-（OSM维基百科）" class="headerlink" title="OpenStreetMap （OSM维基百科）"></a><a href="https://www.mapbox.com/help/define-osm/" target="_blank" rel="noopener">OpenStreetMap</a> （<strong><a href="https://en.wikipedia.org/wiki/OpenStreetMap" target="_blank" rel="noopener">OSM维基百科</a></strong>）</h1><blockquote><p><strong>OpenStreetMap</strong> 是一个<a href="https://en.wikipedia.org/wiki/Virtual_community" title="虚拟社区" target="_blank" rel="noopener">合作项目</a>，以创造一个<a href="https://en.wikipedia.org/wiki/Free_content" title="免费内容" target="_blank" rel="noopener">自由</a>编辑<a href="https://en.wikipedia.org/wiki/Map" title="地图" target="_blank" rel="noopener">地图</a>的世界，任何人都可以向该地图贡献数据。<strong>OpenStreetMap</strong> 的数据可以免费共享和使用。<code>Mapbox Streets tileset</code> 源数据源自<strong>OpenStreetMap</strong>。 为<code>Directions API</code>和相关 <code>API</code> 提供支持的路由网络也基于<strong>OpenStreetMap</strong>。</p></blockquote><h1 id="overzoom"><a href="#overzoom" class="headerlink" title="overzoom"></a><a href="https://www.mapbox.com/help/define-overzoom/" target="_blank" rel="noopener">overzoom</a></h1><blockquote><p><strong>Overzoom</strong> 是 <code>tileset</code> 被放大超出其给定缩放范围的结果。</p></blockquote><blockquote><p>如果出现 <strong>Overzoom</strong> ，则光栅图块集将显得不清晰。 例如，如果要显示 <code>z0</code> 和 <code>z6</code> 之间缩放范围的光栅图块集，如果缩放到 <code>z6</code> 之后的更高缩放级别，图像将变得模糊且难以看清。</p></blockquote><blockquote><p>由于矢量数据不是以基于像素的格式存储，而是从一系列点，线和多边形进行编码和计算，因此过度变换的效果对于矢量图块集并不明显。 因此，矢量数据可以被过度显示并可视化以进行缩放22。</p></blockquote><hr><h1 id="P"><a href="#P" class="headerlink" title="P"></a>P</h1><hr><h1 id="projection-投影"><a href="#projection-投影" class="headerlink" title="projection (投影)"></a><a href="https://www.mapbox.com/help/define-projection/" target="_blank" rel="noopener">projection</a> (投影)</h1><blockquote><p><strong>projection</strong> 是将行星上的位置坐标转换为二维平面的方法。 <code>Mapbox</code> 支持流行的 <a href="http://en.wikipedia.org/wiki/Mercator_projection" target="_blank" rel="noopener">Web Mercator projection</a>。 <code>Web Mercator</code> 被绝大多数 <code>Web</code> 地图采用，它的使用允许您将 <code>Mapbox</code> 地图与同一投影中的其他图层结合使用。</p></blockquote><hr><h1 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h1><hr><h1 id="quadtree"><a href="#quadtree" class="headerlink" title="quadtree"></a><a href="https://www.mapbox.com/help/define-quadtree/" target="_blank" rel="noopener">quadtree</a></h1><blockquote><p><strong>quadtree</strong> 是树数据结构，其中每个节点恰好有4个子节点。 <strong>quadtree</strong>允许您放大和缩小地图。 随着缩放级别的改变，四边形会更改以显示更多（或更少）细节。</p></blockquote><hr><h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><hr><h1 id="raster-data-栅格数据"><a href="#raster-data-栅格数据" class="headerlink" title="raster data (栅格数据)"></a><a href="https://www.mapbox.com/help/define-raster/" target="_blank" rel="noopener">raster data</a> (栅格数据)</h1><blockquote><p><strong>raster data</strong> 是一种基于像素的数据格式，可有效地表示连续曲面。 光栅中的信息存储在网格结构中，每个信息单元或像素具有相同的大小和形状，但值不同。 所有数码照片都以这种格式存储，也称为位图。 这包括卫星图像和正射摄影。</p></blockquote><blockquote><p>您可以将<strong>raster data</strong>上传到 <code>Mapbox Studio</code>，以将自定义数据添加到地图中。 有关<strong>raster data</strong>的更多信息，请查看 <a href="https://www.mapbox.com/studio-manual/overview/geospatial-data/" target="_blank" rel="noopener">Mapbox Studio手动上载页面</a>。</p></blockquote><h1 id="routing-profile-路线配置文件"><a href="#routing-profile-路线配置文件" class="headerlink" title="routing profile (路线配置文件)"></a><a href="https://www.mapbox.com/help/define-routing-profile/" target="_blank" rel="noopener">routing profile</a> (路线配置文件)</h1><blockquote><p><strong>routing profile</strong> 是路线引擎（如 <code>Mapbox Directions API</code>）用于查找两点之间的最佳路由的一组规则。 <strong>routing profile</strong>通常针对用于在位置之间进行的运输模式进行优化。</p></blockquote><blockquote><p>有关 <code>Mapbox Directions API</code> 中使用的路由配置文件的详细信息，请参阅 <a href="https://www.mapbox.com/developers/api/directions" target="_blank" rel="noopener">文档</a> 。</p></blockquote><h1 id="runtime-styling-运行时样式"><a href="#runtime-styling-运行时样式" class="headerlink" title="runtime styling (运行时样式)"></a><a href="https://www.mapbox.com/help/define-runtime-styling/" target="_blank" rel="noopener">runtime styling</a> (运行时样式)</h1><blockquote><p><strong>runtime styling</strong> 允许您实时动态更改 <code>Mapbox</code> 地图上显示的地图样式，允许您自定义地图外观的每个方面，直至最小的细节。</p></blockquote><blockquote><p>您可以更改地图以响应用户交互，上下文，或通过在运行时访问地图的各个层来构建复杂的数据可视化。 例如，您可以根据一天中的时间使地图变亮或变暗，根据用户活动个性化公园的颜色，甚至根据用户偏好更改标签语言。</p></blockquote><blockquote><p>您可以在 <code>Mapbox Studio</code> 中设计任何内容，也可以通过代码实现。 所有依赖 <a href="https://www.mapbox.com/help/define-mapbox-gl/" target="_blank" rel="noopener">Mapbox GL</a> 的产品都提供运行时样式。</p></blockquote><hr><h1 id="S"><a href="#S" class="headerlink" title="S"></a>S</h1><hr><h1 id="shapefile"><a href="#shapefile" class="headerlink" title="shapefile"></a><a href="https://www.mapbox.com/help/define-shapefile/" target="_blank" rel="noopener">shapefile</a></h1><blockquote><p><strong>shapefile</strong> 也称为 <code>Esri shapefile</code>，是用于存储地理矢量数据的文件格式。</p></blockquote><blockquote><p>您可以将<strong>shapefile</strong>上传到 <code>Mapbox Studio</code>，以将自定义数据添加到地图中。 上传<strong>shapefile</strong>时，<code>Mapbox</code> 会将数据转换为矢量切片，以便您可以从中创建样式。</p></blockquote><blockquote><p>上传 <code>shapefile</code> 时，请记住以下几点：</p><ul><li>查看Mapbox Uploads API文档，了解<strong>shapefile</strong>的当前大小限制。 请注意，此限制适用于<strong>shapefile</strong>的未压缩大小，而不是压缩 <code>zip</code> 的大小。</li><li><strong>shapefile</strong>由几个单独的文件组成，在上传之前应该将它们组合成一个 <code>zip</code> 文件。 在这些文件中，<code>Mapbox</code> 可以读取 <code>shp</code>，<code>shx</code>，<code>dbf</code>，<code>prj</code> 和 <code>index</code> 文件。 使用 <code>zip</code>文件上传的任何其他文件都将被忽略。</li></ul></blockquote><blockquote><p>有关上载shapefile的更多信息，请查看<a href="https://www.mapbox.com/studio-manual/overview/geospatial-data/" target="_blank" rel="noopener">Mapbox Studio手册上传页面</a>。<br><a href="https://www.mapbox.com/help/data/stations.zip" target="_blank" rel="noopener"> Download a sample shapefile</a></p></blockquote><h1 id="simplestyle"><a href="#simplestyle" class="headerlink" title="simplestyle "></a><a href="https://www.mapbox.com/help/define-simplestyle/" target="_blank" rel="noopener">simplestyle </a></h1><blockquote><p><strong>Simplestyle</strong> 是一种用于样式化 <code>GeoJSON</code> 数据的开源规范。</p></blockquote><h1 id="source-layer-资源图层"><a href="#source-layer-资源图层" class="headerlink" title="source layer  (资源图层)"></a><a href="https://www.mapbox.com/help/define-source-layer/" target="_blank" rel="noopener">source layer </a> (资源图层)</h1><blockquote><p><strong>source layer</strong> 是矢量资源中的特定图层。 矢量资源可以有多个层。 您可以在以下几个位置找到<strong>source layer</strong>的名称：</p></blockquote><blockquote><ul><li>特定 <code>tileset</code> 的 <code>tileset</code> 信息页面。</li><li>在 <code>Mapbox Studio</code> 的样式编辑器使用<strong><em>Select data tab</em></strong>。</li><li>在 <code>Mapbox Studio</code> 样式编辑器中，使用工具栏中的<strong><em>Style reference</em></strong>选项。</li></ul></blockquote><h4 id="Tileset-信息页面"><a href="#Tileset-信息页面" class="headerlink" title="Tileset 信息页面"></a>Tileset 信息页面</h4><blockquote><p>要在tileset中查找源图层：</p><ol><li>访问您的<a href="https://www.mapbox.com/studio/tilesets/" target="_blank" rel="noopener">Tilesets页面</a>。</li><li>单击其中一个tileset的名称。</li><li>将打开tileset信息页面，您可以在Layer details标题下找到源图层。</li></ol></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5683553-9aadc2caf2c51c98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="image.png"></p><h4 id="在Mapbox-Studio样式编辑器中选择data"><a href="#在Mapbox-Studio样式编辑器中选择data" class="headerlink" title="在Mapbox Studio样式编辑器中选择data"></a>在Mapbox Studio样式编辑器中选择data</h4><blockquote><p>要查找Mapbox样式中使用的源图层的名称，请执行以下操作：</p><ol><li>在Mapbox Studio样式编辑器中打开样式。</li><li>单击图层列表中图层的名称。</li><li>切换到<strong><em>Select data</em></strong>选项卡。</li><li>找到tileset源名称下面列出的源图层。</li></ol></blockquote><blockquote><p>在下面的示例中，图层名为place-city-label-major，源图层是Mapbox Streets图块集源中的place_label图层。<br><img src="https://upload-images.jianshu.io/upload_images/5683553-19fbc96488d5ea9b.gif?imageMogr2/auto-orient/strip" alt="define-source-layer.gif"></p></blockquote><h4 id="Mapbox-Studio-Style-editor中的样式引用"><a href="#Mapbox-Studio-Style-editor中的样式引用" class="headerlink" title="Mapbox Studio Style editor中的样式引用"></a>Mapbox Studio Style editor中的样式引用</h4><blockquote><p>要查找Mapbox样式中使用的源图层的名称，请执行以下操作：</p><ol><li>在Mapbox Studio样式编辑器中打开样式。</li><li>单击右上方工具栏中的样式参考选项。</li></ol></blockquote><blockquote><p>在下面的示例中，源图层称为waterway_label，该图层称为waterway-label。<br><img src="https://upload-images.jianshu.io/upload_images/5683553-35084278722bcb52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="toolbar-style-reference-source-layer.png"></p></blockquote><h1 id="source-数据源"><a href="#source-数据源" class="headerlink" title="source  (数据源)"></a><a href="https://www.mapbox.com/help/define-source/" target="_blank" rel="noopener">source </a> (数据源)</h1><blockquote><p><strong>source</strong> 提供要在Mapbox GL的地图上显示的数据。 <strong>source</strong>由 <code>Mapbox</code> 样式规范定义，并与样式层一起使用，以直观地表示地图上的<strong>source</strong>数据。 根据您正在开发的平台，可能不支持特定的<strong>source</strong>类型，因此在向地图添加<strong>source</strong>时请参阅<a href="https://www.mapbox.com/developers/" target="_blank" rel="noopener">特定于平台的文档</a>。</p></blockquote><h1 id="sprite"><a href="#sprite" class="headerlink" title="sprite"></a><a href="https://www.mapbox.com/help/define-sprite/" target="_blank" rel="noopener">sprite</a></h1><blockquote><p><strong>sprite</strong> 是包含样式中包含的所有图标的单个图像。 <strong>sprite</strong>通常用于网络开发甚至视频游戏，以提高性能。 通过将大量小图像组合成单个图像（<strong>sprite</strong>），您可以减少获取所有图像所需的请求数量，从而提高性能并使地图更快。</p></blockquote><blockquote><p>如果您使用的是 <code>Mapbox Studio</code>，则无需担心<strong>sprite</strong>的技术基础：上传 <code>SVG</code> 图标会自动创建地图将使用的<strong>sprite</strong>。 同样，所有 <code>Mapbox</code> 模板样式都带有自己的<strong>sprite</strong>，其中包含可以与该样式一起使用的图标。 调试面板中的<strong><em>Images</em></strong>选项显示<strong>sprite</strong>中使用的像素数量。<br><img src="https://upload-images.jianshu.io/upload_images/5683553-7130cea4bbe18bd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="spritesheet-usage.png"></p></blockquote><blockquote><p>如果您想自己动手或者对引擎盖下的内容感兴趣，您也可以创建自己的<strong>sprite</strong>。 这是所有术语和<strong>sprite</strong>如何工作的概述。</p></blockquote><blockquote><p><strong>sprite</strong>将许多图标组合成一个图像：<br><img src="https://upload-images.jianshu.io/upload_images/5683553-74fc7f4b276932a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="sprite.png"></p></blockquote><blockquote><p>图标是<strong>sprite</strong>中的单个图像：<br><img src="https://upload-images.jianshu.io/upload_images/5683553-76d9207d9108e03e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/100" alt="airport-15.png"></p></blockquote><blockquote><p><strong>sprite</strong>限制为500个图标。 每个图标最大可以为512x512像素，最大文件大小为400KB。 每个<strong>sprite</strong>都有一个免费的 <code>JSON</code> 文件，用于定义每个图标，包括图标在<strong>sprite</strong>中的大小和位置 - 有点像每个图标的方向：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;airport-15&quot;: &#123;</span><br><span class="line">  &quot;width&quot;: 42,</span><br><span class="line">  &quot;height&quot;: 42,</span><br><span class="line">  &quot;x&quot;: 76,</span><br><span class="line">  &quot;y&quot;: 300,</span><br><span class="line">  &quot;pixelRatio&quot;: 2,</span><br><span class="line">  &quot;visible&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这意味着您可以按名称引用图标，例如 <code>airport-15</code>，我们的地图渲染器将引用 <code>JSON</code> 文件以获取有关图标的数据，然后仅显示该特定图标的<strong>sprite</strong>。</p></blockquote><blockquote><p>要了解有关创建和编辑<strong>sprite</strong>的更多信息，请查看<a href="https://www.mapbox.com/mapbox-gl-style-spec/#sprite" target="_blank" rel="noopener">Mapbox 样式参考：<strong>sprite</strong></a>。</p></blockquote><h1 id="style-ID"><a href="#style-ID" class="headerlink" title="style ID "></a><a href="https://www.mapbox.com/help/define-style-id/" target="_blank" rel="noopener">style ID </a></h1><blockquote><p><strong>style ID</strong> 是与任何 <code>Mapbox</code> 用户名关联的每种样式的唯一标识符。 要使用 <code>Mapbox</code> 样式 <code>API</code>，您需要知道正在使用的地图样式的<strong>style ID</strong>。</p></blockquote><blockquote><p>每次使用 <code>Mapbox Studio</code> 创建样式时，它都会生成样式 <code>URL</code> 。 样式 <code>URL</code> 包括<strong>style ID</strong>(mapbox://styles/{username}/{style_ID}).。 例如，在以下样式URL中，<code>mapbox</code> 是用户名，light-v9是样式ID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapbox://styles/mapbox/light-v9</span><br></pre></td></tr></table></figure></p></blockquote><p><a href="https://www.mapbox.com/help/define-style-url/" target="_blank" rel="noopener">学习更多 style URL</a></p><h1 id="style-optimized-vector-tiles-优化矢量切片"><a href="#style-optimized-vector-tiles-优化矢量切片" class="headerlink" title="style-optimized vector tiles  (优化矢量切片)"></a><a href="https://www.mapbox.com/help/define-style-optimized-vector-tiles/" target="_blank" rel="noopener">style-optimized vector tiles </a> (优化矢量切片)</h1><blockquote><p>通过  <code>Mapbox Maps API</code> 提供的<strong>style-optimized vector tiles</strong>会删除切片中未由 <code>Mapbox</code> 样式表示的任何图层或特征。 <strong>style-optimized vector tiles</strong>较小，通过线上服务，是减少离线缓存大小的好方法。</p></blockquote><blockquote><p>例如，假设您的样式引用了具有四个图层的图块集：露营地，山脉，林地和建筑物。 最终地图包括露营地图标，森林图案和蓝山图案，但不使用建筑物。 在普通的 <code>Mapbox GL</code> 地图中，加载的图块包括所有四个图层，即使它们并非全部都需要。 风格优化的矢量瓷砖仅包括露营地，林地和蓝山。 它会根据属性和缩放级别删除未使用的图层和要素。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5683553-5c072c64ccdff446.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="style-optimized-illustration.png"></p><blockquote><p>您可以在 <code>Mapbox GL JS</code> 中使用<strong>style-optimized vector tiles</strong>，方法是在样式 <code>URL</code> 的末尾添加？optimize = true：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var map = new mapboxgl.Map(&#123;</span><br><span class="line">  container: &apos;map&apos;,</span><br><span class="line">  style: &apos;mapbox://styles/mapbox/outdoors-v9?optimize=true&apos; // optimize=true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="style-URL"><a href="#style-URL" class="headerlink" title="style URL "></a><a href="https://www.mapbox.com/help/define-style-url/" target="_blank" rel="noopener">style URL </a></h1><blockquote><p>每次使用 <code>Mapbox Studio</code> 创建样式时，它都会生成<strong>style URL</strong>。 <strong>style URL</strong>允许您使用 <code>Mapbox GL JS API</code> 或本机 <code>SDK</code> 引用该特定样式。</p></blockquote><blockquote><p>您可以在 <code>Mapbox Studio</code> 的 <a href="https://www.mapbox.com/studio/styles" target="_blank" rel="noopener">Styles page</a> 上找到样式 <code>URL</code>。 单击样式旁边的 <strong><em>Menu</em></strong> 按钮以显示其样式 <code>URL</code> 。 单击图标以复制样式<code>URL</code> 。<br><img src="https://upload-images.jianshu.io/upload_images/5683553-4cf9bb4b95296225.gif?imageMogr2/auto-orient/strip" alt="style-url.gif"></p></blockquote><h1 id="style-样式"><a href="#style-样式" class="headerlink" title="style  (样式)"></a><a href="https://www.mapbox.com/help/define-style/" target="_blank" rel="noopener">style </a> (样式)</h1><blockquote><p><strong>style</strong> 是定义地图视觉外观的文档。 样式使用 <code>Mapbox Studio</code> 样式编辑器创建或单独编写并上载到您的帐户。 它们遵循 <code>Mapbox</code> 样式规范，并包含有关数据源，样式图层，精灵(<a href="https://www.mapbox.com/help/define-sprite/" target="_blank" rel="noopener">sprite</a>)，字形和元数据的信息。 <strong>style</strong> 由<code>Mapbox GL JS</code>，适用于 <a href="https://www.mapbox.com/help/define-android-sdk/" target="_blank" rel="noopener">Mapbox Maps SDK for Android</a> ，适用于 <a href="https://www.mapbox.com/help/define-android-sdk/" target="_blank" rel="noopener">Mapbox Maps SDK for iOS</a> 或 <a href="https://www.mapbox.com/help/define-static-api/" target="_blank" rel="noopener">Mapbox Static API</a>。</p></blockquote><blockquote><p>有关样式的更多信息，请查看 <a href="https://www.mapbox.com/studio-manual/reference/styles/" target="_blank" rel="noopener">Mapbox Studio手册</a>。</p></blockquote><h1 id="SVG-可缩放矢量图形"><a href="#SVG-可缩放矢量图形" class="headerlink" title="SVG (可缩放矢量图形)"></a><a href="https://www.mapbox.com/help/define-svg/" target="_blank" rel="noopener">SVG</a> (可缩放矢量图形)</h1><blockquote><p><strong>SVG</strong> 是一种用于描述二维矢量图形的标记语言。</p></blockquote><blockquote><p>您可以在 <code>Mapbox Studio</code> 样式编辑器中将<strong>SVG</strong>图像上载到自定义样式。 您可以单击调试面板中的 <strong><em>Images</em></strong> 选项来管理您的样式中的<strong>SVG</strong>。<br><img src="https://upload-images.jianshu.io/upload_images/5683553-de5201774fca5e0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="manage-style-images.png"></p></blockquote><p>请参阅以下指南以开始使用：</p><ul><li><p><a href="https://www.mapbox.com/help/add-points-pt-2/" target="_blank" rel="noopener">在Mapbox Studio 和 Mapbox GL JS 中自定义标记</a></p></li><li><p><a href="https://www.mapbox.com/help/studio-troubleshooting-svg/" target="_blank" rel="noopener">故障排除：Mapbox Studio中的SVG资源错误</a></p></li></ul><p><a href="https://www.mapbox.com/help/data/bicycle-24.svg" target="_blank" rel="noopener"> Download sample SVG image</a></p><hr><h1 id="T"><a href="#T" class="headerlink" title="T"></a>T</h1><hr><h1 id="telemetry-测量"><a href="#telemetry-测量" class="headerlink" title="telemetry  (测量)"></a><a href="https://www.mapbox.com/help/define-telemetry/" target="_blank" rel="noopener">telemetry </a> (测量)</h1><blockquote><p><strong>telemetry</strong> 是一个过程，其中自动传感器通过收集关于人们移动的位置和方式的匿名数据来创建和更新地图。 这对于发现丢失的道路，跟踪交通信息等非常有用。</p></blockquote><h1 id="TIFF-文件格式"><a href="#TIFF-文件格式" class="headerlink" title="TIFF  (文件格式)"></a><a href="https://www.mapbox.com/help/define-tiff/" target="_blank" rel="noopener">TIFF </a> (文件格式)</h1><blockquote><p><strong>TIFF</strong>（有时是TIF）是用于保存光栅图像的文件格式。 使用 <code>Mapbox</code> ，<strong>TIFF</strong>通常是<code>GeoTIFF</code>，这意味着文件嵌入了地理配准信息。</p></blockquote><blockquote><p>您可以在 <code>Mapbox Studio</code> 中将TIFF文件作为 <code>tileset</code> 上传，并在 <code>Mapbox Studio</code> 样式编辑器中使用它们。</p></blockquote><blockquote><p>您还可以将<strong>TIFF</strong>文件导入 <code>Mapbox Studio Classic</code> 并以此方式上传到 <code>Mapbox</code> 作为 <code>tileset</code> 。 上传<strong>TIFF</strong>文件时，请记住<a href="https://www.mapbox.com/help/upload-troubleshooting" target="_blank" rel="noopener">TIFF文件当前的大小限制</a>。<br><a href="https://www.mapbox.com/help/data/landsat.tif" target="_blank" rel="noopener"> Download a sample TIFF file</a></p></blockquote><h1 id="TileJSON"><a href="#TileJSON" class="headerlink" title="TileJSON "></a><a href="https://www.mapbox.com/help/define-tilejson/" target="_blank" rel="noopener">TileJSON </a></h1><blockquote><p><strong>TileJSON</strong>是一种用于描述 <code>tileset</code> 的格式。 它会跟踪请求 <code>tileset</code> 的位置，<code>tileset</code> 的名称以及使用 <code>tileset</code> 时所需的任何属性。 您可以使用 <a href="https://www.mapbox.com/api-documentation/#retrieve-tilejson-metadata" target="_blank" rel="noopener">Mapbox Maps API</a> 检索<strong>TileJSON</strong>元数据。</p></blockquote><h1 id="TileMill"><a href="#TileMill" class="headerlink" title="TileMill "></a><a href="https://www.mapbox.com/help/define-tilemill/" target="_blank" rel="noopener">TileMill </a></h1><blockquote><p><strong>TileMill</strong> 是一个用于设计地图的桌面应用程序。 <strong>TileMill</strong>不再处于积极开发阶段。 对于我们最新的地图设计工具，请检查和<a href="https://www.mapbox.com/studio-manual/" target="_blank" rel="noopener">Mapbox Studio</a>。</p></blockquote><h1 id="tileset"><a href="#tileset" class="headerlink" title="tileset "></a><a href="https://www.mapbox.com/help/define-tileset/" target="_blank" rel="noopener">tileset </a></h1><blockquote><p><strong>tileset</strong> 是一组光栅或矢量数据，分为22个预设缩放级别的均匀方块网格。 <strong>tileset</strong>在  <code>Mapbox</code> 库和 <code>SDK</code> 中用作在移动设备或浏览器中显示地图的核心部分。 它们也是我们用于确定地图视图的主要机制。</p></blockquote><blockquote><p><strong>tileset</strong>可高度缓存并快速加载。 <code>Mapbox</code> 在很大程度上依赖于栅格和矢量<strong>tileset</strong>来保持我们的地图快速高效。 有关使用<strong>tileset</strong>的更多信息，请查看<a href="https://www.mapbox.com/studio-manual/reference/tilesets/" target="_blank" rel="noopener">Mapbox Studio手册</a>。</p></blockquote><h4 id="Tilesets可以是Raster或Vector。-差异概述如下："><a href="#Tilesets可以是Raster或Vector。-差异概述如下：" class="headerlink" title="Tilesets可以是Raster或Vector。 差异概述如下："></a>Tilesets可以是<strong>Raster</strong>或<strong>Vector</strong>。 差异概述如下：</h4><h5 id="Raster-tilesets-栅格"><a href="#Raster-tilesets-栅格" class="headerlink" title="Raster tilesets (栅格)"></a>Raster tilesets (栅格)</h5><blockquote><p>将光栅图像作为 <code>TIFF / GeoTIFF</code>上传到 <code>Mapbox Studio</code> 时会创建光栅图块集。 它们在现代和经典 <code>Mapbox</code> 工具中使用，将地图显示为可在必要时在地图上加载的图像网格。 您可以在<a href="https://www.mapbox.com/help/define-mapbox-studio" target="_blank" rel="noopener">Mapbox Studio</a>, <a href="https://www.mapbox.com/help/define-mapbox-gl-js" target="_blank" rel="noopener">Mapbox GL JS</a>, 和 <a href="https://www.mapbox.com/mobile" target="_blank" rel="noopener">Mapbox Mobile SDKs</a> 中使用<strong>Raster tilesets</strong>。</p></blockquote><blockquote><p>传统的Web地图库（如 <code>Mapbox.js</code> 和 <code>Leaflet</code> ）也使用栅格切片在网页上显示地图。  <code>Mapbox Studio Classic</code> 中创建的所有经典样式也包含<strong>Raster tilesets</strong>。</p></blockquote><h5 id="Vector-tilesets-矢量"><a href="#Vector-tilesets-矢量" class="headerlink" title="Vector tilesets (矢量)"></a>Vector tilesets (矢量)</h5><blockquote><p><strong>Vector tilesets</strong> 是栅格tilesets的矢量数据 - 不是以像素的形式存储栅格数据，<strong>Vector tilesets</strong> 以点，线和多边形的形式存储矢量数据作为矢量tile。 <strong>Vector tilesets</strong>可以被操纵和查询。 它们可以用作样式的来源或直接查询以使用 <a href="https://www.mapbox.com/mobile" target="_blank" rel="noopener">Mapbox Mobile SDKs</a> 和 <a href="https://www.mapbox.com/help/define-mapbox-gl-js" target="_blank" rel="noopener">Mapbox GL JS</a> 创建交互式体验。</p></blockquote><blockquote><p>将矢量数据（<a href="https://www.mapbox.com/help/define-geojson" target="_blank" rel="noopener">GeoJSON</a>, <a href="https://www.mapbox.com/help/define-shapefile" target="_blank" rel="noopener">Shapefile</a>, <a href="https://www.mapbox.com/help/define-kml" target="_blank" rel="noopener">KML</a>, 或 <a href="https://www.mapbox.com/help/define-gpx" target="_blank" rel="noopener">GPX</a>）上传到 <code>Mapbox</code> 帐户时，您的数据会自动转换为矢量图块集。</p></blockquote><h1 id="Turf-js"><a href="#Turf-js" class="headerlink" title="Turf.js"></a><a href="https://www.mapbox.com/help/define-turf/" target="_blank" rel="noopener">Turf.js</a></h1><blockquote><p><strong>Turf.js</strong> 是一个用于空间分析的 <code>JavaScript</code> 库。 它包括传统的空间操作，用于创建<code>GeoJSON</code> 数据的辅助函数，以及数据分类和统计工具。 <strong>Turf.js</strong>可以作为客户端插件添加到您的网站，或者您可以使用 <code>Node.js</code> 运行 <code>Turf</code> 服务器端。 你可以在<a href="https://github.com/turfjs/turf" target="_blank" rel="noopener">GitHub</a>上找到源代码。</p></blockquote><hr><h1 id="V"><a href="#V" class="headerlink" title="V"></a>V</h1><hr><h1 id="vector-tiles-矢量切片"><a href="#vector-tiles-矢量切片" class="headerlink" title="vector tiles (矢量切片)"></a><a href="https://www.mapbox.com/help/define-vector-tiles/" target="_blank" rel="noopener">vector tiles</a> (矢量切片)</h1><blockquote><p><strong>vector tiles</strong> 是一种轻量级数据格式，用于存储地理空间矢量数据，例如点，线和多边形。 <code>Mapbox</code> 几乎在我们所有的工具和服务中使用<strong>vector tiles</strong>。</p></blockquote><blockquote><p><strong>vector tiles</strong>根据矢量图块规范对地理信息进行编码，是矢量图块集背后的关键成分。 您可以在<a href="https://www.mapbox.com/developers/vector-tiles" target="_blank" rel="noopener">我们的开发者页面</a>上详细了解<strong>vector tiles</strong>的工作原理以及创建<strong>vector tiles</strong>的工具。</p></blockquote><hr><h1 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h1><hr><h1 id="zoom-extent-缩放范围"><a href="#zoom-extent-缩放范围" class="headerlink" title="zoom extent  (缩放范围)"></a><a href="https://www.mapbox.com/help/define-zoom-extent/" target="_blank" rel="noopener">zoom extent </a> (缩放范围)</h1><blockquote><p><strong>zoom extent</strong> 是图块集可见的缩放级别范围。 您可以通过从 <a href="https://www.mapbox.com/studio/tilesets" target="_blank" rel="noopener">Tilesets page</a> 中选择 <code>tileset</code>来查看 <code>tileset</code> 的<strong>zoom extent</strong>。</p></blockquote><blockquote><p>在 <code>Mapbox Studio</code> 中创建切片集时，会指定缩放范围以限制其可见性并确保地图数据有效呈现。 通过仅在某些缩放级别渲染 <code>tileset</code> ，较低分辨率的数据将不会出现在较高的缩放级别，并且详细数据不会以较低的缩放级别混乱地图。 如果要更改 <code>tileset</code> 的缩放范围，可以使用 <a href="https://www.mapbox.com/help/adjust-tileset-zoom-extent/" target="_blank" rel="noopener">其他Mapbox工具</a>。</p></blockquote><h1 id="zoom-level-缩放级别"><a href="#zoom-level-缩放级别" class="headerlink" title="zoom level (缩放级别)"></a><a href="https://www.mapbox.com/help/define-zoom-level/" target="_blank" rel="noopener">zoom level</a> (缩放级别)</h1><blockquote><p><strong>zoom level</strong> 决定了地图的可见程度：在缩放级别0，您可以看到整个世界，在缩放级别16，您可以看到一条小路。 该数据存储在 <a href="https://www.mapbox.com/help/define-quadtree" target="_blank" rel="noopener">quadtree</a> 数据结构中。 缩放级别还会影响加载的矢量切片的大小。</p></blockquote><hr><hr><p><strong><em>到此Mapbox词汇表相关的术语翻译完成，欢迎 👏 指正。</em></strong></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/11/07/Mapbox词汇表中文文档-查找Mapbox相关的术语及其定义/">https://giantss.github.io/blog/2018/11/07/Mapbox词汇表中文文档-查找Mapbox相关的术语及其定义/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> 地图 </tag>
            
            <tag> Mapbox </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一个mvp框架的简单号码归属地信息查询demo</title>
      <link href="/blog/2018/10/31/%E4%B8%80%E4%B8%AAmvp%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2demo/"/>
      <url>/blog/2018/10/31/%E4%B8%80%E4%B8%AAmvp%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2demo/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><ul><li>Android studio3.1.4</li><li>gradle:3.1.4、minSdkVersion 21、 targetSdkVersion 28</li></ul></blockquote><h1 id="使用到的第三方框架"><a href="#使用到的第三方框架" class="headerlink" title="使用到的第三方框架"></a>使用到的第三方框架</h1><ul><li><a href="https://github.com/google/gson" target="_blank" rel="noopener">gson</a></li><li><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">okhttp</a></li></ul><a id="more"></a><h1 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h1><p>淘宝API：<a href="https://tcc.taobao.com/cc/json/mobile_tel_segment.htm?tel=18888888888" target="_blank" rel="noopener">https://tcc.taobao.com/cc/json/mobile_tel_segment.htm?tel=18888888888</a></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>Android studio3.0+ gradle的引入包的方式使用 “implementation”或者”api” “”代替”compile”。<br>比如</p><blockquote><p>Android studio2.0+使用: compile ‘com.squareup.okio:okio:1.9.0’<br>Android studio3.0+使用: implementation ‘com.squareup.okio:okio:1.9.0’</p></blockquote><h1 id="演示图"><a href="#演示图" class="headerlink" title="演示图"></a>演示图</h1><p><img src="https://upload-images.jianshu.io/upload_images/5683553-c28c19db5774e2e8.gif?imageMogr2/auto-orient/strip" alt="diagram.gif"></p><p><a href="https://github.com/giantss/MVPDemo" target="_blank" rel="noopener">demo下载点击这里</a></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/31/一个mvp框架的简单号码归属地信息查询demo/">https://giantss.github.io/blog/2018/10/31/一个mvp框架的简单号码归属地信息查询demo/</a> 翻版必究</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Redux for react native 指南</title>
      <link href="/blog/2018/10/13/Redux-for-react-native-%E6%8C%87%E5%8D%97/"/>
      <url>/blog/2018/10/13/Redux-for-react-native-%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果要看理论的童鞋点击这里 <a href="https://cn.redux.js.org/" target="_blank" rel="noopener">redux中文文档</a> 或者 <a href="https://redux.js.org/" target="_blank" rel="noopener">redux官方文档</a> ，本文不会太刻意去介绍大篇幅的理论，本文不做框架之间的对比，只给想学<code>redux</code>的童鞋提供实质的、高效的、易理解的学习参考资源，分享自己在学习过程中的得到。文章更新完后会比较长，请耐心阅读理解，仔细品味。不熟悉<code>redux</code>也没关系，可以跟着文章思路，将三个<code>demo</code>敲完，相信你一定获益匪浅。（文后有彩蛋 ）。</p><h3 id="已更新内容"><a href="#已更新内容" class="headerlink" title="已更新内容"></a>已更新内容</h3><ul><li><code>redux</code> 基本使用 (附demo) </li><li><code>redux</code> <code>Middleware</code>使用（附demo）</li><li><code>redux</code> 集成 <code>navigation</code> （附demo）</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5683553-edc8d5126cf1f401?imageMogr2/auto-orient/strip" alt="redux 基本使用"><br>模仿官方 <a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos" target="_blank" rel="noopener">Todos</a>  demo 的<code>react native</code>版。</p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-5aac6009d041bb4d?imageMogr2/auto-orient/strip" alt="redux Middleware使用"><br>模仿官方 <a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/async" target="_blank" rel="noopener">async</a>  demo 的<code>react native</code>版。</p><p><img src="https://upload-images.jianshu.io/upload_images/5683553-6b2ca647d5148423.gif?imageMogr2/auto-orient/strip" alt="集成react-native-navigation后ios演示图"><br><img src="https://upload-images.jianshu.io/upload_images/5683553-c0a2e3f1e8650a6e.gif?imageMogr2/auto-orient/strip" alt="集成react-native-navigation后android演示图"></p><p>集成<code>react-native-navigation</code>后把前两个<code>domo</code>综合。</p><a id="more"></a><h3 id="待更新内容"><a href="#待更新内容" class="headerlink" title="待更新内容"></a>待更新内容</h3><ul><li>待续……</li></ul><h1 id="为什么我要写这个demo"><a href="#为什么我要写这个demo" class="headerlink" title="为什么我要写这个demo"></a>为什么我要写这个demo</h1><p>有的童鞋可能会有疑问</p><p>问：官方不是<code>Todos</code>demo吗？为什么还要写这个demo？</p><p>答：官方的demo都是<code>react</code>的，而并非<code>react native</code>的。我也找过很多关于介绍<code>redux</code>的文章，但我发现找到的资料要么太基础、要么介绍不全面、提供的demo下载无法使用等等各种问题，迫使我有了自己动手造轮的冲动，而且这个<code>demo</code>并非只是介绍关于<code>redux</code>的基础的东西，而是通过三套<code>demo</code>实践连贯的图文的方式，让读者更好的理解，后面还会陆续更新在使用<code>redux</code>过程中的得到，希望大家鼓励支持。</p><h1 id="demo采用的代码规范"><a href="#demo采用的代码规范" class="headerlink" title="demo采用的代码规范"></a>demo采用的代码规范</h1><p>通常一个大项目到后期是需要很多开发者参与的，如果每个开发者都使用自己的一套代码规范做事情，这样带来的后果就是：后期的代码管理工作带来非常大的麻烦，浪费更多的时间去重构，而且也会让新人看代码时理解花更多的时间，还容易把别人带沟里去，所以一个大型项目最初构建架构的时候就必须要遵守一些规范。</p><p>那么我们怎么能敲出清爽而又优雅的代码呢？又如何检查我们代码质量合格呢？<br>我在这里极力推荐遵守<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb/javascript</a>的规范和使用<a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>来检查自己代码的代码质量（是否遵守了规范），因为它们已经得到了很多公司和开发者的认可。（这里过多的介绍<code>airbnb</code> <code>eslint</code>，本文只提供思路，想了解更多自行搜索）</p><p>在没有使用代码规范前我们可能用各自的风格写了很多年的代码了，突然要适应这套规范可能非常不适应，没关系，多敲多练习，时间长了就习惯了，谁还没有一个过程，过程是痛苦的，但痛苦过后会给你带来质的升华，自己慢慢领悟体会吧。好的事物东西是会被世界所接受，差的事物最终是要被替代的，所以做为一个合格的程序员（特别是前端程序员）要拥抱变化，因为它会使你变得更加的优秀，得到大众的认可，除非你不愿意让自己变得更优秀。</p><h1 id="redux能帮我们做什么"><a href="#redux能帮我们做什么" class="headerlink" title="redux能帮我们做什么"></a>redux能帮我们做什么</h1><p>两张图示意：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-7175d0cd962b8ae5?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="未使用redux的大型react native项目"><br><img src="http://upload-images.jianshu.io/upload_images/5683553-65432e3ea152af6b?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="使用redux后的大型react native项目"></p><h1 id="redux特性"><a href="#redux特性" class="headerlink" title="redux特性"></a>redux特性</h1><ul><li><p><strong>单一数据源： 整个应用的 <a href="https://cn.redux.js.org/docs/Glossary.html#state" target="_blank" rel="noopener">state</a> 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 <a href="https://cn.redux.js.org/docs/Glossary.html#store" target="_blank" rel="noopener">store</a> 中。</strong></p></li><li><p><strong>State 是只读的：唯一改变 state 的方法就是触发 <a href="https://cn.redux.js.org/docs/Glossary.html#action" target="_blank" rel="noopener">action</a>，action 是一个用于描述已发生事件的普通对象。</strong></p></li><li><p><strong>使用纯函数来执行修改：为了描述 action 如何改变 state tree ，你需要编写 <a href="https://cn.redux.js.org/docs/Glossary.html#reducer" target="_blank" rel="noopener">reducers</a>。</strong></p></li><li><p><strong>预见性：所有的用户的行为都是你提前定义好的。</strong></p></li><li><strong>统一管理state：所有的状态都在一个store中分配管理。</strong></li></ul><h1 id="哪些开发者和项目适合用redux"><a href="#哪些开发者和项目适合用redux" class="headerlink" title="哪些开发者和项目适合用redux"></a>哪些开发者和项目适合用redux</h1><p>这里只针对<code>react native</code>开发而言：</p><ul><li>初级：刚接触<code>react native</code>我非常不建议去使用，因为你还不知道怎么用它，建议先达到中级。</li><li>中级：使用<code>react native</code>做出一个以上已经上架的<code>不复杂</code>的应用 <code>redux</code>，也可以不使用，因为使用它并不能让你在前期快速的迭代开发，在这样的项目下使用<code>redux</code>就好比<code>大炮打蚊子</code>，副作用很大。但是可以先了解起来，并发现它的优点。这类相对简单的应用：当用户触发一个动作（程序需要<code>setState({xxx:xxx})</code>)的时候应用程序状态流程是这样的：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-feeabfaba82c0c8e?imageMogr2/auto-orient/strip" alt="简单的状态流程"></li></ul><ul><li>高级：使用<code>react native</code>做出一个以上已经上架的<code>复杂</code>的应用(涉及到即时通讯、界面布局比较复杂，组件嵌套太多层次等)，而这类复杂应用：当用户触发一个动作（程序需要<code>setState({xxx:xxx})</code>)的时候应用程序状态流程是这样的：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-47f1d99b529e1dc6?imageMogr2/auto-orient/strip" alt="复杂的状态流程"></li></ul><p>这种状态带来的后果，两方面分析：</p><ul><li>性能：祖父子组件之间多余的状态传递，导致宝贵的内存资源浪费，同时界面渲染的速度也会变慢，自然用户体验就变差了。</li><li>状态管理：当程序不断的迭代，界面布局越来越复杂，必然就会产生许多的<code>state</code>状态，那你是如何有效的管理这些状态？是什么原因导致UI多次渲染？是哪一步操作导致的UI组件的变化？在没有使用<code>redux</code>前你可能已经发现可以使用生命周期函数中的<code>shouldComponentUpdate</code>来减少子组件中没必要的渲染，但终究解决不了状态管理复杂的难题。<br>当你使用<code>redux</code>后，复杂的应用程序状态流程是这样的：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-3b877d8107d761c8?imageMogr2/auto-orient/strip" alt="使用redux后"><br>看完上面图文后，是否很直观的理解了怎样的项目才适合用redux呢，这要感谢<a href="https://segmentfault.com/u/justjavac" target="_blank" rel="noopener"><strong>@justjavac</strong></a>文章提供的动图支持。</li></ul><h1 id="redux-for-react-native-工作逻辑图"><a href="#redux-for-react-native-工作逻辑图" class="headerlink" title="redux for react native 工作逻辑图"></a>redux for react native 工作逻辑图</h1><p>感谢@<a href="https://www.jianshu.com/u/8b645668c3c4" target="_blank" rel="noopener">黑森林工作室</a>作者提供的清晰的逻辑图<br><img src="http://upload-images.jianshu.io/upload_images/5683553-efaef3516df7bb78?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="清晰逻辑图"></p><h1 id="redux工程结构分析"><a href="#redux工程结构分析" class="headerlink" title="redux工程结构分析"></a>redux工程结构分析</h1><p>我对官方的demo小部分位置做了些改造具体看代码分析：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-3ac7fc1272c8ec11?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"></p><h1 id="分工明细"><a href="#分工明细" class="headerlink" title="分工明细"></a>分工明细</h1><ul><li><code>js/actions</code><br>此文件夹下放内容做的事情是：定义用户行为。</li><li><code>js/reducers</code><br>此文件夹下放内容做的事情是：响应用户行为，返回改变后的状态，并发送到 <code>store</code>。</li><li><code>js/components</code><br>此文件夹下放内容做的事情是：自定义的组件。</li><li><code>js/containers</code><br>此文件夹下放内容做的事情是：把<code>components</code>文件夹中涉及到状态变化的组件进行第二次封装。</li><li><code>App.js</code><br>入口文件（store在这里），为什么我要把store定义在这里？ 因为它是唯一的，而且必须使用<code>react-redux</code>提供的<code>Provider</code>组件包裹入口的其他组件才能使<code>redux</code>中的<code>store</code>生效。</li><li><code>global.js</code><br>存放全局定义的变量、常量、方法等。</li></ul><h1 id="需要注意的事"><a href="#需要注意的事" class="headerlink" title="需要注意的事"></a>需要注意的事</h1><ul><li>一个工程中 <code>redux</code> 的 <code>store</code> 是唯一的，不能在多个 <code>store</code>  。</li><li>保持 <code>reducer</code> 纯净非常重要。永远不要在 <code>reducer</code> 里做这些操作：<blockquote><ul><li>修改传入参数；</li><li>执行有副作用的操作，如 <code>API</code> 请求和路由跳转；</li><li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>;</li></ul></blockquote></li><li>使用对象展开运算符<code>...</code>代替<code>Object.assign()</code>才是最好的解决方案。</li><li>组件名首字母要大写，也就是说<code>components</code>和<code>containers</code>文件夹下的文件首字母都要大写。</li><li>应该尽量减少传递到<code>action</code> 中的数据（能传单个数据就不传对象，能传对象就不传数组）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//good</span><br><span class="line">function todoApp(state = initialState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case SET_VISIBILITY_FILTER:</span><br><span class="line">      return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        visibilityFilter: action.filter</span><br><span class="line">      &#125;)</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//best</span><br><span class="line">function todoApp(state = initialState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case SET_VISIBILITY_FILTER:</span><br><span class="line">      return &#123; ...state, visibilityFilter: action.filter &#125;</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h1><p><code>js/actions/types.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//添加列表数据</span><br><span class="line">export const ADD_TODO = &apos;ADD_TODO&apos;;</span><br><span class="line">//筛选</span><br><span class="line">export const SET_VISIBILITY_FILTER = &apos;SET_VISIBILITY_FILTER&apos;;</span><br><span class="line">//文字添加／取消中划线</span><br><span class="line">export const TOGGLE_TODO = &apos;TOGGLE_TODO&apos;;</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em>action定义</em></strong></p><p>为什么我要把用户的<code>action</code>(行为)定义单独抽出来写一个<code>type.js</code>？</p><ul><li>方便状态管理。</li><li>复用性。</li></ul><hr><p><code>js/actions/index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import  &#123;</span><br><span class="line">    ADD_TODO,</span><br><span class="line">    SET_VISIBILITY_FILTER,</span><br><span class="line">    TOGGLE_TODO,</span><br><span class="line">&#125; from &apos;./types&apos;</span><br><span class="line">let nextTodoId = 0;</span><br><span class="line"></span><br><span class="line">export const addTodo = text =&gt; (&#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">    id: nextTodoId++,</span><br><span class="line">    text</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const setVisibilityFilter = (filter) =&gt; (&#123;</span><br><span class="line">    type: SET_VISIBILITY_FILTER,</span><br><span class="line">    filter</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const toggleTodo = id =&gt; (&#123;</span><br><span class="line">    type: TOGGLE_TODO,</span><br><span class="line">    id</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em>Action 创建函数</em></strong> </p><p><code>Action</code> 创建函数 就是生成 <code>action</code> 的方法。“<code>action</code>” 和 “<code>action 创建函数</code>” 这两个概念很容易混在一起，使用时最好注意区分。</p><p>在 <code>Redux</code> 中的 <code>action</code> 创建函数只是简单的返回一个 <code>action</code>:</p><hr><p><code>js/reducers/todos.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import  &#123;</span><br><span class="line">    ADD_TODO,</span><br><span class="line">    TOGGLE_TODO,</span><br><span class="line">&#125; from &apos;../actions/types&apos;</span><br><span class="line"></span><br><span class="line">const todos = (state = [], action) =&gt; &#123;</span><br><span class="line">    let &#123;id, text, type&#125; = action;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case ADD_TODO:</span><br><span class="line">            return [</span><br><span class="line">                ...state,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: id,</span><br><span class="line">                    text: text,</span><br><span class="line">                    completed: false</span><br><span class="line">                &#125;</span><br><span class="line">            ];</span><br><span class="line">        case TOGGLE_TODO:</span><br><span class="line">            return state.map(todo =&gt; (todo.id === id) ? &#123;...todo, completed: !todo.completed&#125; : todo);</span><br><span class="line">        default:</span><br><span class="line">            return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export  default  todos;</span><br></pre></td></tr></table></figure></p><p><code>js/reducers/visibilityFilter.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; SET_VISIBILITY_FILTER &#125; from &apos;../actions/types&apos;</span><br><span class="line">import &#123; visibilityFilters &#125; from &apos;../global&apos;</span><br><span class="line"></span><br><span class="line">const &#123; SHOW_ALL &#125; = visibilityFilters;</span><br><span class="line">const visibilityFilter = (state = SHOW_ALL, action) =&gt; &#123;</span><br><span class="line">    let &#123;type, filter&#125; = action;</span><br><span class="line">    switch (type)&#123;</span><br><span class="line">        case SET_VISIBILITY_FILTER:</span><br><span class="line">            return filter;</span><br><span class="line">        default:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default  visibilityFilter;</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em><code>reducer</code> 就是一个纯函数，接收旧的 <code>state</code> 和 <code>action</code>，返回新的 <code>state</code>（上面两个文件可以看着两个<code>reducer</code>）。</em></strong> </p><p><strong><em>注意：</em></strong> </p><blockquote><ul><li><code>Redux</code> 首次执行时，<code>state</code> 为 <code>undefined</code>，此时需要设置返回应用的初始 <code>state</code>。</li><li>每个 <code>reducer</code> 只负责管理全局 <code>state</code> 中它负责的一部分。每个 <code>reducer</code> 的 <code>state</code> 参数都不同，分别对应它管理的那部分 <code>state</code> 数据。</li></ul></blockquote><hr><p><code>js/reducers/index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &apos;redux&apos;</span><br><span class="line">import todos from &apos;./todos&apos;</span><br><span class="line">import visibilityFilter from &apos;./visibilityFilter&apos;</span><br><span class="line"></span><br><span class="line">export default combineReducers(&#123;</span><br><span class="line">    todos,</span><br><span class="line">    visibilityFilter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong><em>释：</em></strong> </p><p><strong>*<code>combineReducers()</code>所做的只是生成一个函数，这个函数来调用你的一系列 <code>reducer</code>，每个 <code>reducer</code> </strong>根据它们的 key 来筛选出 <code>state</code> 中的一部分数据并处理<strong>，然后这个生成的函数再将所有 <code>reducer</code> 的结果合并成一个大的对象。*</strong> </p><p>表面上看上去<code>combineReducers()</code>的作用就是把多个<code>reducer</code>合成一个的<code>reducer</code>。</p><hr><p><code>js/components/Todo.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    Text,</span><br><span class="line">    TouchableOpacity</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line"></span><br><span class="line">export default class Todo extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        onClick: PropTypes.func.isRequired,</span><br><span class="line">        completed: PropTypes.bool.isRequired,</span><br><span class="line">        text: PropTypes.string.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        let &#123; onClick, completed, text &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;TouchableOpacity</span><br><span class="line">                style=&#123;&#123;</span><br><span class="line">                    flexDirection: &apos;row&apos;,</span><br><span class="line">                    flex: 1,</span><br><span class="line">                    height: 50,</span><br><span class="line">                    alignItems: &apos;center&apos;,</span><br><span class="line">                    justifyContent: &apos;center&apos;,</span><br><span class="line">                    backgroundColor: &apos;#cccccc&apos;,</span><br><span class="line">                    marginTop: 10</span><br><span class="line">                &#125;&#125;</span><br><span class="line">                onPress=&#123;onClick&#125;&gt;</span><br><span class="line">                &lt;Text style=&#123;&#123; textDecorationLine: completed ? &apos;line-through&apos; : &apos;none&apos;&#125;&#125;&gt;&#123;text&#125;&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>js/components/TodoList.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    FlatList</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import Todo from &apos;./Todo&apos;</span><br><span class="line"></span><br><span class="line">export default class TodoList extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        todos: PropTypes.arrayOf(</span><br><span class="line">            PropTypes.shape(&#123;</span><br><span class="line">                id: PropTypes.number.isRequired,</span><br><span class="line">                completed: PropTypes.bool.isRequired,</span><br><span class="line">                text: PropTypes.string.isRequired</span><br><span class="line">            &#125;).isRequired</span><br><span class="line">        ).isRequired,</span><br><span class="line">        toggleTodo: PropTypes.func.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    _renderItem = (data) =&gt; &#123;</span><br><span class="line">       let dataItem = data.item;</span><br><span class="line">       let &#123; id &#125; = dataItem;</span><br><span class="line">       let &#123; toggleTodo &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Todo</span><br><span class="line">                &#123;...dataItem&#125;</span><br><span class="line">                onClick=&#123;() =&gt; toggleTodo(id)&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        let &#123; todos &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;FlatList</span><br><span class="line">                data=&#123;todos&#125;</span><br><span class="line">                keyExtractor=&#123;(item)=&gt;item.id.toString()&#125;</span><br><span class="line">                renderItem=&#123;this._renderItem&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>js/components/Link.js.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    TouchableOpacity,</span><br><span class="line">    Text</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line"></span><br><span class="line">export default class Link extends Component &#123;</span><br><span class="line">    static propTypes = &#123;</span><br><span class="line">        active: PropTypes.bool.isRequired,</span><br><span class="line">        filter: PropTypes.string.isRequired,</span><br><span class="line">        onClick: PropTypes.func.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        let &#123; active,  filter, onClick &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">           &lt;TouchableOpacity</span><br><span class="line">               style=&#123;&#123;</span><br><span class="line">                   marginLeft: 4,</span><br><span class="line">                   height: 40,</span><br><span class="line">                   flex:1,</span><br><span class="line">                   borderWidth: 1,</span><br><span class="line">                   borderColor: &apos;#ccc&apos;,</span><br><span class="line">                   alignItems: &apos;center&apos;,</span><br><span class="line">                   justifyContent:&apos;center&apos;</span><br><span class="line">               &#125;&#125;</span><br><span class="line">               onPress=&#123;onClick&#125;</span><br><span class="line">           &gt;</span><br><span class="line">               &lt;Text style=&#123;&#123;fontSize: 10, color: active ? &apos;black&apos; : &apos;#cccccc&apos;&#125;&#125;&gt;&#123;filter&#125;&lt;/Text&gt;</span><br><span class="line">           &lt;/TouchableOpacity&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>js/components/Filters.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    View,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import FilterLink from &apos;../containers/FilterLink&apos;</span><br><span class="line">import &#123; visibilityFilters &#125; from &apos;../global&apos;</span><br><span class="line"></span><br><span class="line">const &#123; SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE  &#125; = visibilityFilters;</span><br><span class="line"></span><br><span class="line">export default  class Filters extends Component &#123;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;View style=&#123;&#123; flexDirection: &apos;row&apos;, marginTop: 20&#125;&#125;&gt;</span><br><span class="line">                &lt;FilterLink filter=&#123;SHOW_ALL&#125; /&gt;</span><br><span class="line">                &lt;FilterLink filter=&#123;SHOW_COMPLETED&#125; /&gt;</span><br><span class="line">                &lt;FilterLink filter=&#123;SHOW_ACTIVE&#125; /&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-f611ae53f10514e7?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br><strong><em>释：</em></strong> </p><p><strong><em>以上四个文件是自定义的四个UI展示组件，这些组件只定义外观并不关心数据来源和如何改变。传入什么就渲染什么。如果你把代码从 <code>Redux</code> 迁移到别的架构，这些组件可以不做任何改动直接使用。它们并不依赖于 <code>Redux</code>。</em></strong> </p><hr><p><code>js/containers/AddTodo.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    View,</span><br><span class="line">    TextInput,</span><br><span class="line">    Button,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class="line">import &#123; addTodo &#125; from &apos;../actions&apos;</span><br><span class="line"></span><br><span class="line">class AddTodo extends Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.inputValue = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        let &#123; dispatch &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;&#123;flexDirection: &apos;row&apos;&#125;&#125;&gt;</span><br><span class="line">                &lt;TextInput</span><br><span class="line">                    style=&#123;&#123;flex:1, borderWidth: 1, borderColor: &apos;#cccccc&apos;, textAlign: &apos;center&apos;&#125;&#125;</span><br><span class="line">                    onChangeText=&#123;text =&gt; this.inputValue = text&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;Button title=&quot;Add Todo&quot; onPress=&#123;() =&gt; dispatch(addTodo(this.inputValue))&#125;/&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect()(AddTodo)</span><br></pre></td></tr></table></figure></p><p><code>js/containers/FilterLink.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class="line">import &#123; setVisibilityFilter &#125; from &apos;../actions&apos;</span><br><span class="line">import Link from &apos;../components/Link&apos;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state, ownProps) =&gt; (&#123;</span><br><span class="line">    active: ownProps.filter === state.visibilityFilter,</span><br><span class="line">    filterText: ownProps.filter</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch, ownProps) =&gt; (&#123;</span><br><span class="line">    onClick: () =&gt; dispatch(setVisibilityFilter(ownProps.filter))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default connect(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps,</span><br><span class="line">)(Link)</span><br></pre></td></tr></table></figure></p><p><code>js/containers/VisibleTodoList.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class="line">import &#123; toggleTodo &#125; from &apos;../actions&apos;</span><br><span class="line">import TodoList from &apos;../components/TodoList&apos;</span><br><span class="line">import &#123; visibilityFilters &#125; from &apos;../global&apos;</span><br><span class="line"></span><br><span class="line">const &#123; SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE &#125; = visibilityFilters;</span><br><span class="line"></span><br><span class="line">const getVisibleTodos = (todos, filter) =&gt; &#123;</span><br><span class="line">    switch (filter) &#123;</span><br><span class="line">        case SHOW_COMPLETED:</span><br><span class="line">            return todos.filter(t =&gt; t.completed);</span><br><span class="line">        case SHOW_ACTIVE:</span><br><span class="line">            return todos.filter(t =&gt; !t.completed);</span><br><span class="line">        case SHOW_ALL:</span><br><span class="line">            return todos;</span><br><span class="line">        default:</span><br><span class="line">            throw new Error(&apos;Unknown filter: &apos; + filter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = state =&gt; (&#123;</span><br><span class="line">    todos: getVisibleTodos(state.todos, state.visibilityFilter)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = dispatch =&gt; (&#123;</span><br><span class="line">    toggleTodo: id =&gt; dispatch(toggleTodo(id))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default connect(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps,</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em>以上三个是容器组件，作用是把展示组件连接到 <code>Redux</code>。<br>总之：只要记住一句话就可以了：UI展示组件负责 UI 的呈现，容器组件负责管理数据和逻辑。</em></strong><br>有时很难分清到底该使用容器组件还是展示组件。如这个小的组件：</p><blockquote><ul><li><code>AddTodo.js</code> 含有“Add”按钮 和 输入框 </li></ul></blockquote><p>技术上讲可以把它分成两个组件，但一开始就这么做有点早。在一些非常小的组件里混用容器和展示是可以的。当业务变复杂后，如何拆分就很明显了。所以现在就使用混合型的吧。</p><p>上面出现了使用<code>react-redux</code>的<code>connect()</code>方法来把展示组件和容器组件关联在一起，这个方法做了性能优化来避免很多不必要的重复渲染。（这样你就不必为了性能而手动实现 <a href="https://doc.react-china.org/docs/optimizing-performance.html" target="_blank" rel="noopener">React 性能优化建议</a> 中的 <code>shouldComponentUpdate</code> 方法。）</p><p>使用 <code>connect()</code> 前，需要先定义 <code>mapStateToProps</code> 这个函数来指定如何把当前 <code>Redux store state</code> 映射到展示组件的 <code>props</code> 中。例如，<code>VisibleTodoList</code> 需要计算传到 <code>TodoList</code> 中的 <code>todos</code>，所以定义了根据 <code>state.visibilityFilter</code> 来过滤 <code>state.todos</code> 的方法，并在 <code>mapStateToProps</code> 中使用。</p><p>除了读取 <code>state</code>，容器组件还能分发 <code>action</code>。类似的方式，可以定义 <code>mapDispatchToProps()</code> 方法接收 <a href="https://cn.redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener"><code>dispatch()</code></a> 方法并返回期望注入到展示组件的 props 中的回调方法。例如，我们希望 <code>VisibleTodoList</code> 向 <code>TodoList</code> 组件中注入一个叫 <code>onTodoClick</code> 的 props ，还希望 <code>onTodoClick</code>能分发 <code>TOGGLE_TODO</code> 这个 <code>action</code>。<br>最后，使用 <code>connect()</code> 创建 <code>VisibleTodoList</code>，并传入这两个函数。</p><hr><p><code>js/components/Group.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    View</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line">import AddTodo from &apos;../containers/AddTodo&apos;</span><br><span class="line">import Filters from &apos;../components/Filters&apos;</span><br><span class="line">import VisibleTodoList from &apos;../containers/VisibleTodoList&apos;</span><br><span class="line"></span><br><span class="line">export default class Group extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;&#123;paddingHorizontal: 20, paddingVertical: 44&#125;&#125;&gt;</span><br><span class="line">                &lt;AddTodo/&gt;</span><br><span class="line">                &lt;Filters/&gt;</span><br><span class="line">                &lt;VisibleTodoList/&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em><code>Group.js</code> 是把所有的关联后的组件串起来，形成一个完整的界面。</em></strong> </p><hr><p><code>App.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class="line">import Group from &apos;./js/components/Group&apos;</span><br><span class="line">import rootReducer from &apos;./js/reducers&apos;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const store = createStore(rootReducer);</span><br><span class="line">        return (</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;Group /&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>释：</em></strong> </p><p><strong><em>入口文件传入 <code>Store</code></em></strong> </p><ul><li>创建<code>store</code>传入<code>reducers</code>。</li><li>使用<code>Provider</code>组件包裹   <code>Group</code>组件, <code>store</code>作为属性传入<code>Provider</code>。</li></ul><hr><p>进行到这一步，代码分析完毕。本次写作到此结束。我相信大家如果仔细看完的话，多多少少会有些收获吧，如果<code>demo</code>看不太懂，那就跟着代码分析的思路多敲几遍代码，也就理解了，有空我会继续更新未完成的内容。</p><h4 id="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"><a href="#〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️" class="headerlink" title="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"></a>〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️</h4><h4 id="⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️"><a href="#⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️" class="headerlink" title="⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️"></a>⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️</h4><h4 id="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-1"><a href="#〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-1" class="headerlink" title="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"></a>〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️</h4><p>离上次更新已经有好几天了，今天抽空更新的内容是<code>Middleware</code>（中间件）。</p><h1 id="Middleware（中间件）的作用"><a href="#Middleware（中间件）的作用" class="headerlink" title="Middleware（中间件）的作用"></a>Middleware（中间件）的作用</h1><p><code>Middleware</code>是在<code>Actions</code>和<code>Dispatcher</code>之间嵌入的为了解决某些问题、提高我们开发效率而存在的工具。<br>下面介绍三种常用的中间件：</p><ul><li><a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener">redux-thunk</a> 中间件：项目中的异步操作需要用到（例如：请求服务器数据、本地存储等）。</li><li><a href="https://github.com/redux-utilities/redux-actions" target="_blank" rel="noopener">redux-actions</a> 中间件：帮助处理和创建操作<code>actions</code>（本文不做介绍，后续项目复杂后可以使用它来创建）。</li><li><a href="https://github.com/evgenyrodionov/redux-logger" target="_blank" rel="noopener">redux-logger</a> 中间件：用来打印 <code>action</code> 日志。<br>开启<code>react native</code>远程调试模式，操作demo就能在控制台看到打印的状态前后变化。<br><img src="http://upload-images.jianshu.io/upload_images/5683553-f1021a84fc996c5c?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="状态日志"></li></ul><p>加入中间件后的示意图如下：<br><img src="http://upload-images.jianshu.io/upload_images/5683553-30f836fdac15078a?imageMogr2/auto-orient/strip" alt="加入中间件后的示意图"></p><h1 id="核心代码详解"><a href="#核心代码详解" class="headerlink" title="核心代码详解"></a>核心代码详解</h1><p>本次<code>demo</code>代码讲解为了减少文章篇幅，只会讲解涉及到<code>Middleware</code>的部分，也就是说 <code>demo</code>中在<code>reducers</code> 、<code>components</code> 、<code>containers</code>文件加下新增的文件不会做过多的解释，如果不理解，可以返回去把第一次更新的内容再解析一遍。</p><p><code>actions/types.js</code>新增如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//请求帖子列表</span><br><span class="line">export const REQUEST_POSTS = &apos;REQUEST_POSTS&apos;;</span><br><span class="line">//帖子返回数据</span><br><span class="line">export const RECEIVE_POSTS = &apos;RECEIVE_POSTS&apos;;</span><br><span class="line">//切换数据源</span><br><span class="line">export const SELECT_SUBREDDIT = &apos;SELECT_SUBREDDIT&apos;;</span><br><span class="line">//使缓存过期失效</span><br><span class="line">export const INVALIDATE_SUBREDDIT = &apos;INVALIDATE_SUBREDDIT&apos;;</span><br></pre></td></tr></table></figure></p><p><code>actions/index.js</code>新增如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">export const selectSubreddit = subreddit =&gt; (&#123;</span><br><span class="line">    type: SELECT_SUBREDDIT,</span><br><span class="line">    subreddit</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const invalidateSubreddit = subreddit =&gt; (&#123;</span><br><span class="line">    type: INVALIDATE_SUBREDDIT,</span><br><span class="line">    subreddit</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const requestPosts = subreddit =&gt; (&#123;</span><br><span class="line">    type: REQUEST_POSTS,</span><br><span class="line">    subreddit</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const receivePosts = (subreddit, json) =&gt; (&#123;</span><br><span class="line">    type: RECEIVE_POSTS,</span><br><span class="line">    subreddit,</span><br><span class="line">    posts: json.data,</span><br><span class="line">    receivedAt: Date.now()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const fetchPosts = subreddit =&gt; dispatch =&gt; &#123;</span><br><span class="line">    // API 发起请求</span><br><span class="line">    dispatch(requestPosts(subreddit));</span><br><span class="line">    return fetch(`http://localhost:8081/data/$&#123;subreddit&#125;.json`)</span><br><span class="line">        .then(response =&gt; response.json())</span><br><span class="line">        .then(json =&gt; &#123;</span><br><span class="line">            setTimeout(()=&gt;&#123;</span><br><span class="line">                //使用 API 请求结果来更新应用的 state</span><br><span class="line">                dispatch(receivePosts(subreddit, json))</span><br><span class="line">            &#125;,2000);</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const shouldFetchPosts = (state, subreddit) =&gt; &#123;</span><br><span class="line">    const posts = state.postsBySubreddit[subreddit];</span><br><span class="line">    if (!posts) &#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    if (posts.isFetching) &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    return posts.didInvalidate</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const fetchPostsIfNeeded = subreddit =&gt; (dispatch, getState) =&gt; &#123;</span><br><span class="line">    if (shouldFetchPosts(getState(), subreddit)) &#123;</span><br><span class="line">        return dispatch(fetchPosts(subreddit))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong><em>释</em></strong></p><p><strong><em>以上主要需要注意的是</em></strong></p><blockquote><ul><li><code>fetchPosts</code>返回了一个函数，而普通的 <code>Action 创建函数</code> 默认返回一个对象。</li><li>返回的函数的参数是<code>dispatch</code>和<code>getState</code>这两个 <code>Redux</code> 方法，普通的 <code>Action 创建函数</code> 的参数是 <code>Action</code> 的内容。</li><li>在返回的函数之中，先发出一个 <code>Action</code>: <strong>dispatch(requestPosts(subreddit))</strong>，表示操作开始。</li><li>异步操作结束之后，再发出一个 <code>Action</code>: <strong>receivePosts(subreddit, json)</strong>，表示操作结束。</li></ul></blockquote><p><strong><em>demo中数据源解释：</em></strong></p><blockquote><p>本来打算用官方的 <a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/async" target="_blank" rel="noopener">reddit demo</a> API，最终发现官方给出的<code>demo</code>请求数据会报错，所以使用了本地的json数据，延迟两秒模拟网络API加载数据的过程。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5683553-aa5672da45244223?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="官方提供的redditAPI无法使用"></p><hr><p><code>App.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; applyMiddleware, createStore &#125; from &apos;redux&apos;</span><br><span class="line">import &#123; createLogger &#125; from &apos;redux-logger&apos;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;</span><br><span class="line">import LoadPosts from &apos;./js/containers/LoadPosts&apos;</span><br><span class="line">import rootReducer from &apos;./js/reducers&apos;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const logger = createLogger();</span><br><span class="line">        const store = createStore(</span><br><span class="line">            rootReducer,</span><br><span class="line">            applyMiddleware(thunk, logger)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        return (</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;LoadPosts/&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>释</em></strong></p><p>相比前一个<code>demo</code>的<code>App.js</code>，在<code>createStore</code>的时候参数有变化，多了一个<code>applyMiddleware(thunk, logger)</code>中间件的参数。<br>理解了第一次更新内容的童鞋不难看出，<code>Action</code> 是由<code>store.dispatch</code>方法发送的。而<code>store.dispatch</code>方法正常情况下，参数只能是对象，不能是函数。<br>为了解决这个问题，就要使用到中间件<a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="noopener"><code>redux-thunk</code></a>改造<code>store.dispatch</code>，使<code>store.dispatch</code>可以接受函数作为参数。</p><p><strong><em>注意</em></strong></p><blockquote><p>有的中间件有次序要求，使用前要查一下文档。比如，logger就一定要放在最后，否则输出结果会不正确。</p></blockquote><hr><p>到此本次写作到此结束。</p><h4 id="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-2"><a href="#〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-2" class="headerlink" title="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"></a>〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️</h4><h4 id="⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️-1"><a href="#⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️-1" class="headerlink" title="⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️"></a>⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️华丽的分割线⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️</h4><h4 id="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-3"><a href="#〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️-3" class="headerlink" title="〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️"></a>〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️〰️</h4><p>接着更新关于集成<code>navigation</code>的集成，如果使用过比较老版本的<code>react native</code>都知道在<code>react-navigation</code>没有兴起之前，大多数开发者都使用的官方提供的 <code>Navigator</code>，直到 <code>react native</code> <a href="https://github.com/facebook/react-native/tree/v0.44.3" title="v0.44.3" target="_blank" rel="noopener">v0.44.3</a> 发布时宣布已经遗弃<code>Navigator</code>。<br><img src="https://upload-images.jianshu.io/upload_images/5683553-ba9ab49e21680ff5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br>因为我之前项目中只用过 <code>Navigator</code>或者 <code>react-navigation</code>，所以我并不知道市场上还有多少类似的导航解决方案，这次通过项目空档期，又深入了解了一下，目前市场上比较流行的三款导航器：</p><ul><li><h1 id="react-navigation"><a href="#react-navigation" class="headerlink" title="react navigation"></a><a href="https://github.com/react-navigation/react-navigation" target="_blank" rel="noopener">react navigation</a></h1><blockquote><p>这是官方推荐的，在 <code>github</code> 上已有 <code>1.35W+</code> 的 🌟，由<code>React Native</code>社区维护，目前，它是最受欢迎的<code>React Native</code>导航库。它完全用<code>JavaScript</code>编写，而不是使用本机<code>API</code>，它重新创建了一些子集。这个选择允许用户定制导航体验的任何部分，而无需学习<code>iOS</code>或<code>Android</code>导航逻辑。因为<code>React Navigation的</code>大部分逻辑都是在<code>JavaScript</code>中而不是在本机中运行，所以任何阻止<code>JavaScript</code>线程的情况都会造成卡顿显现。另外说明一下 <code>react navigation</code>的v1版本跟v2版本差别挺大的，如果想了解的童鞋可以看我前面写的这篇文章  <a href="https://www.jianshu.com/p/05fd0e9bc12a" target="_blank" rel="noopener"><a href="https://www.jianshu.com/p/05fd0e9bc12a" target="_blank" rel="noopener">react native 强大的navigation V2.0+</a></a>。</p></blockquote></li></ul><p>目前官方文档中已经明确提出:</p><p><strong><em>Warning: in the next major version of React Navigation, to be released in Fall 2018, we will no longer provide any information about how to integrate with Redux and it may cease to work. Issues related to Redux that are posted on the React Navigation issue tracker will be immediately closed. Redux integration may continue to work but it will not be tested against or considered when making any design decisions for the library.</em></strong></p><p><strong><em>Some folks like to have their navigation state stored in the same place as the rest of their application state. </em>Think twice before you consider doing this, there is an incredibly good chance that you do not need to do this!<em>. Storing your React Navigation state in your own Redux store is likely to give you a very difficult time if you don’t know what you’re doing.</em></strong></p><p><strong><em>If your only reason for doing this is that you want to be able to perform navigation actions from outside of your components (eg: from a Redux middleware), you can learn more about this in <a href="https://reactnavigation.org/docs/en/navigating-without-navigation-prop.html" target="_blank" rel="noopener">navigating without the navigation prop</a>.</em></strong></p><p>翻译：</p><p><strong><em>警告: 在下一个大版本的 React Navigation 中, 将在2018年秋季发布, 我们将不再提供有关如何集成 Redux 的任何信息, 并且它可能会停止使用。 发布在 React Navigation issue tracker 中有关 Redux 的 issue，也将立即关闭。 Redux 集成可能会继续工作，但不会在为 library 作出任何设计决策时进行测试或考虑。</em></strong></p><p><strong><em>有些人喜欢将他们的 navigation state 存储在与其他的应用程序的 state 相同的位置。 </em>在你考虑这样做之前请三思, 但是有一个非常好的机会, 你可以不需要这样做!<em>。 如果你不知道自己要做什么，将 React Navigation state 存储在你自己的 Redux store 中可能会会很困难。</em></strong></p><p><strong><em>如果你这样做的唯一原因是希望能够从组件外部执行导航操作 (例如: 从 Redux 中间件), 你可以了解更多关于<a href="https://reactnavigation.org/docs/zh-Hans/navigating-without-navigation-prop.html" target="_blank" rel="noopener"> 不使用 navigation prop 进行导航 </a>的信息。</em></strong></p><p>翻译成通俗易懂的话就是：<code>React Navigation</code>在下个版本中将不会再特意考虑去兼容 <code>Redux</code>，用是可以用，但是出了问题需要自行解决。</p><p>哎，不理解官方为什么要这么做，可能是减少维护成本吧，但是这样做无疑是一个不明智但选择，也说不定会有惊喜，暂时期待一下吧。如果项目中集成了 <code>redux</code> 我个人不太推荐使用<code>React Navigation</code>。</p><ul><li><h1 id="react-native-router-flux"><a href="#react-native-router-flux" class="headerlink" title="react-native-router-flux"></a><a href="https://github.com/RNRF/react-native-router-flux" target="_blank" rel="noopener">react-native-router-flux</a></h1></li></ul><blockquote><p>它是基于 <code>React Navigation</code>，但提供了与其交互的不同<code>API</code>。在 <code>github</code> 上已有 <code>7600+</code> 的 🌟，它允许您在一个中心位置定义场景转换，而无需传递导航器对象，并且可以在代码中的任何位置轻松访问。 </p><p>最新的beta版本 - 4，除了其他更改之外，还介绍了抽屉支持和Mob-X驱动的导航状态机，它将导航逻辑与表示层分开。</p><ul><li><h1 id="react-native-navigation"><a href="#react-native-navigation" class="headerlink" title="react-native-navigation"></a><a href="https://github.com/wix/react-native-navigation" target="_blank" rel="noopener">react-native-navigation</a></h1>另一个流行的导航库是由 <a href="https://zh.wikipedia.org/wiki/Wix.com" target="_blank" rel="noopener">Wix</a> 开源团队开发的<code>React Native Navigation</code>，在 <code>github</code> 上已经接近<code>9000+</code> 的 🌟，它的最大优势是跨平台界面覆盖的100％本机平台导航，具有开箱即用的<code>Redux</code>支持。 </li></ul><p>您需要为<code>iOS</code>和<code>Android</code>单独配置此软件包，其中包括链接<code>iOS</code>库，更新<code>iOS</code>标头搜索路径，在<code>Android</code> <code>MainActivity</code>中扩展<code>SplashActivity</code>而不是<code>ReactActivity</code>以及文档中详细描述的其他几个步骤。完成后，您只需要注册所有应用程序的屏幕并启动应用程序。</p></blockquote><p>目前官方文档中也提出:</p><p><strong><em>Note: example redux is deprecated. Since we did not have enough time and resources to maintain both example projects, we decided to stop maintaining the redux example. This does not mean redux can’t be used with react-native-navigation (In fact, we use redux in the Wix app). For a working example project which uses redux with RNN you can refer to <a href="https://github.com/JuneDomingo/movieapp" target="_blank" rel="noopener">JuneDomingo/movieapp</a>.</em></strong></p><p>翻译：</p><p><strong><em>注意：不推荐使用示例redux。由于我们没有足够的时间和资源来维护这两个示例项目，因此我们决定停止维护redux示例。这并不意味着redux不能与react-native-navigation一起使用（事实上，我们在Wix应用程序中使用redux）。对于使用带RNN的redux的工作示例项目，您可以参考JuneDomingo / movieapp。</em></strong></p><p><strong><em>综上所诉：就个人而言，从<code>react navigation</code> 和 <code>react-native-navigation</code> 官方对 <code>Redux</code>的态度完全是不一样的，至少<code>Wix</code>内部在使用<code>Redux</code>。 如果项目中需要使用<code>Redux</code>，我的第一选择会是<code>React Native Navigation</code>，因为它是纯原生体验，而且对<code>Redux</code>支持很好 。如果在不使用<code>Redux</code> 的项目中，可以尝试前两种导航，这两种导航体验也不错的，非常接近原生体验了。</em></strong></p><h1 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h1><p><strong><em>本文导航选择使用 <code>react-native-navigation</code>，关于<code>react-native-navigation</code>的集成和API使用请参考<a href="https://wix.github.io/react-native-navigation/#/" target="_blank" rel="noopener">官方文档</a>，如果想了解在  <code>React Navigation</code> 中使用 <code>redux</code> <a href="https://reactnavigation.org/docs/en/redux-integration.html" target="_blank" rel="noopener">点这里</a> 或者 <a href="https://medium.com/@relferreira/react-native-redux-react-navigation-ecec4014d648" target="_blank" rel="noopener">这里</a>，以下是这次更新改变和新增的文件代码</em></strong><br><code>index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//discard (废弃)</span><br><span class="line">import &#123; AppRegistry &#125; from &apos;react-native&apos;;</span><br><span class="line">AppRegistry.registerComponent(&apos;ReduxForReactNativeDemo&apos;, () =&gt; App);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//new</span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line">new App();</span><br></pre></td></tr></table></figure><hr><p><code>App.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; applyMiddleware, createStore &#125; from &apos;redux&apos;</span><br><span class="line">import &#123; createLogger &#125; from &apos;redux-logger&apos;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;</span><br><span class="line">import rootReducer from &apos;./js/reducers&apos;</span><br><span class="line">import &#123; Navigation &#125; from &apos;react-native-navigation&apos;</span><br><span class="line">import &#123; registerScreens &#125; from &apos;./js/components/screens&apos;</span><br><span class="line"></span><br><span class="line">const logger = createLogger();</span><br><span class="line">const store = createStore(</span><br><span class="line">    rootReducer,</span><br><span class="line">    applyMiddleware(thunk, logger)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">registerScreens(store, Provider);</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line"></span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">       super(props);</span><br><span class="line">       this._startApp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _startApp = () =&gt; &#123;</span><br><span class="line">        Navigation.startTabBasedApp(&#123;</span><br><span class="line">            tabs: [</span><br><span class="line">                &#123;</span><br><span class="line">                    label: &apos;Home&apos;,</span><br><span class="line">                    screen: &apos;ReduxForReactNativeDemo.HomeScreen&apos;,</span><br><span class="line">                    icon: require(&apos;./res/img/ic_home.png&apos;),</span><br><span class="line">                    // selectedIcon: require(&apos;./img/checkmark.png&apos;),</span><br><span class="line">                    title: &apos;Home&apos;,</span><br><span class="line">                    overrideBackPress: false,</span><br><span class="line">                    navigatorStyle: &#123;&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    label: &apos;Posts&apos;,</span><br><span class="line">                    screen: &apos;ReduxForReactNativeDemo.PostsScreen&apos;,</span><br><span class="line">                    icon: require(&apos;./res/img/ic_news.png&apos;),</span><br><span class="line">                    // selectedIcon: require(&apos;./img/checkmark.png&apos;),</span><br><span class="line">                    title: &apos;Posts&apos;,</span><br><span class="line">                    navigatorStyle: &#123;&#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>比起上个版本的<code>demo</code>，整个<code>App.js</code>文件代码基本都改了</em></strong></p><hr><p><strong><em>其他改变</em></strong></p><p>在<code>components</code>目录下新增<code>screens</code>目录，该文件夹下放一个一个的界面文件，每个界面里面又由多个组件组成。</p><ul><li><code>Group.js</code>改名为<code>HomeScreen.js</code>。</li><li>新增<code>PostsDetail.js</code>、<code>PostsScreen.js</code>、<code>index.js</code>，<code>index.js</code>文件作用是注册所有界面文件。</li><li><code>Posts.js</code>新增<code>item</code>点击事件，点击后进入列表详细界面。</li><li><code>LoadPosts.js</code> <code>68</code> 行新增 <code>{...this.props}</code>，为了在 <code>Posts.js</code>里面可以通过 <code>this.props</code>获取到<code>navigator</code>。</li><li>根目录下新增<code>res</code>资源文件夹。</li></ul><hr><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>本次结构分析就到这里了，说下三个<code>demo</code>版本连贯做下来的感受吧。讲真这次对我本人来说学到很多东西，实践过程中也遇到各种问题，查阅海量资源，有很多疑问，最终一一攻破，答案慢慢浮出水面。看过很多<code>demo</code>千奇百怪的写法都有，很少见到标准的项目工程结构，大多都是为了实现效果为目的，而不能在实际项目中去使用这种项目结构，我文章开始阶段我就介绍我了为什么要花这些时间和精力来写这篇技术文章。我会把这种工程结构运用到以后集成了<code>redux</code> 的项目中。找到一份好的学习资料真的很不容易，如果你也觉得不错的话，不妨把 ❤️ 点亮，让更多人发现它。</p><hr><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>附上  <a href="https://github.com/giantss/ReduxForReactNativeDemo" target="_blank" rel="noopener">demo</a>  ，欢迎 ❤️⭐️👏 指出错误或者发布自己的见解探讨，共勉。🤝</p><p><strong><em>注意</em></strong></p><p>直接 <code>clone</code> 下来运行的话，默认看到是最后一次(v3)更新的内容 <code>demo</code>，<br>执行<code>git tag</code>可以看到的demo有三个 <code>tag</code>，如果切换到前两次更新的 <code>demo</code>内容：根目录下执行:</p><p>切换到v0.1</p><blockquote><p>git checkout -b dev v0.1     </p></blockquote><p>切换到v0.2</p><blockquote><p>git checkout -b dev v0.2      </p></blockquote><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/13/Redux-for-react-native-指南/">https://giantss.github.io/blog/2018/10/13/Redux-for-react-native-指南/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> react native </tag>
            
            <tag> Redux </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react native 强大的navigation V2.0+</title>
      <link href="/blog/2018/10/10/react-native-%E5%BC%BA%E5%A4%A7%E7%9A%84navigation-V2-0/"/>
      <url>/blog/2018/10/10/react-native-%E5%BC%BA%E5%A4%A7%E7%9A%84navigation-V2-0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 笔者在V2版之前使用的版本是 <code>1.5.1</code>，现项目中升级到<code>2.6.2</code>。以下是我使用这两个版本的一些经验，分享给大家，希望节省大家一些宝贵的时间。</p><h1 id="注意-优化项"><a href="#注意-优化项" class="headerlink" title="注意/优化项"></a>注意/优化项</h1><h4 id="导航器导出名字改变"><a href="#导航器导出名字改变" class="headerlink" title="导航器导出名字改变"></a>导航器导出名字改变</h4><p>升级前：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; StackNavigator, TabNavigator, DrawerNavigator&#125; from &apos;react-navigation&apos;</span><br></pre></td></tr></table></figure></p><p>升级后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;  createStackNavigator, createBottomTabNavigator, createDrawerNavigator &#125; from &apos;react-navigation&apos;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="新增getParam-‘id’-‘默认值’"><a href="#新增getParam-‘id’-‘默认值’" class="headerlink" title="新增getParam(‘id’, ‘默认值’);"></a>新增getParam(‘id’, ‘默认值’);</h4><p>通过<code>navigate</code>传餐到下一个界面可以设置默认值了，再也不用在接受的界面使用三元表达式判断传入值是否存在了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123;navigation&#125; = this.props;</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            id: navigation.getParam(&apos;id&apos;, 0) //如果没有接收到id，给id赋值为0</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>我在使用 <code>1.5.1</code>版的时候遇到过下面这样的需求：</p><blockquote><p>需求一：界面跳转：需要实现 <code>A——&gt;B</code>   <code>B——&gt;C</code>   <code>C——&gt;A</code>，甚至更深层次的界面跳转到<code>A</code>。</p></blockquote><blockquote><p>需求二：需要使用多个导航器，而且相互之间不影响。(引导页，登陆，注册，忘记密码的等界面的实现)。</p></blockquote><blockquote><p>需求三：一个界面多次被使用，（比如一个社交的<code>帖子详情</code>，点击头像进入<code>个人主页</code>，在<code>个人主页</code>中点击帖子，又进入到<code>帖子详情</code>，然后再点击帖子中的头像进入到<code>个人主页</code>。这样<code>帖子详情</code> <code>个人主页</code>两个界面会被无限循环调用）。</p></blockquote><blockquote><p>需求四：快速点击时跳转下个界面，不要跳转多个相同的界面（这应该算<code>V1+</code>的一个缺陷）。</p></blockquote><p><strong><em>接下来我就根据上面的几个需求来分析在 <code>V1.0+</code> 和<code>V2.0+</code> 分别是如何实现的：</em></strong></p><blockquote><p>需求一 <code>V1.0+</code>：</p><p>我的实现思路是：<br>使用<code>DeviceEventEmitter</code>在B界面注册了一个返回上一个界面的<code>goback</code>事件, 事件触发时执行<code>this.props.naviagtion.goBack();</code>，然后在C界面先调用<code>DeviceEventEmitter.emit(&#39;B界面注册的事件名&#39;)</code>，然后再调用 <code>this.props.naviagtion.goBack()</code>就能达到  <code>C——&gt;A</code>的效果。虽然实现了，但是心里暗地里说了一句mmp。</p><p>需求一<code>V2.0+</code>：</p><p>直接在<code>C</code>界面调用<code>this.props.naviagtion.navigate(&#39;A&#39;)</code>就可以实现 <code>C——&gt;A</code>的效果，如果A是首页的话可以调用<code>this.props.naviagtion.popToTop()</code>。</p></blockquote><blockquote><p>需求二<code>V1.0+</code>：</p><p>登陆注册界面：使用的是<code>Modal</code>组件，自定义的全屏悬浮窗。</p><p>需求二<code>V2.0+</code>：</p><p>在<code>V2.0</code>中提供了一个<code>createSwitchNavigator</code>,这个组件的作用个人的理解是导航器分离，永远只展示一个导航器，你可以设置多个导航器，并且当多个导航器相互切换的时候都会销毁掉其他导航器。（如何嵌套实现请看最后面的代码）</p></blockquote><blockquote><p>需求三<code>V1.0+</code>：</p><p>正常使用<code>this.props.navigation.navigate(&#39;A&#39;)</code>可以实现这种效果（但是点击太快会多次导航到同一个界面）。</p><p>需求三<code>V2.0+</code>：</p><p>需要注意的是<code>V2.0+</code>实现这种效果需要调用 <code>this.props.navigation.push(&#39;A&#39;)</code>,如果调用了<code>this.props.navigation.navigate(&#39;A&#39;)</code>你会发现当<code>A</code>已经在导航栈中界面跳转效果是返回到这个界面的效果；如果<code>A</code>是当前界面，再次调用<code>navigate(&#39;A&#39;)</code>没有任何效果，但是<code>push(&#39;A&#39;)</code>还可以继续导航到<code>A</code>界面。</p></blockquote><blockquote><p>需求四<code>V1.0+</code>：</p><p>解决方案：在你配置导航器的<code>.js</code>文件最下面 <code>export default xxx</code>之前粘贴下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**解决点击太快跳转连续跳转多个界面**/</span><br><span class="line"></span><br><span class="line">   //主要是这一步</span><br><span class="line">   const navigateOnce = (getStateForAction) =&gt; (action, state) =&gt; &#123;</span><br><span class="line">       const &#123;type, routeName&#125; = action;</span><br><span class="line">       return (</span><br><span class="line">           state &amp;&amp;</span><br><span class="line">           type === NavigationActions.NAVIGATE &amp;&amp;</span><br><span class="line">           routeName === state.routes[state.routes.length - 1].routeName</span><br><span class="line">       ) ? null : getStateForAction(action, state);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   //这是第二步</span><br><span class="line">   MainStackNavigator.router.getStateForAction = navigateOnce(MainStackNavigator.router.getStateForAction);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>需求四<code>V2.0+</code>：</p><p>只需要正常调用<code>this.props.navigation.navigate(&#39;A&#39;)</code>就可以了，官方已经修复了这个bug。</p></blockquote><h1 id="各种导航器嵌套代码"><a href="#各种导航器嵌套代码" class="headerlink" title="各种导航器嵌套代码"></a>各种导航器嵌套代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">    createStackNavigator,</span><br><span class="line">    createBottomTabNavigator,</span><br><span class="line">    createDrawerNavigator,</span><br><span class="line">    createSwitchNavigator,</span><br><span class="line">&#125; from &apos;react-navigation&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const navigationOptions = &#123;</span><br><span class="line">    headerStyle:&#123;</span><br><span class="line">        backgroundColor: &apos;#fff&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    headerTintColor: &apos;#666666&apos;,</span><br><span class="line">    headerBackTitle: null,</span><br><span class="line">    headerTitleStyle: &#123;</span><br><span class="line">        fontWeight: &apos;bold&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">    drawerLockMode:&apos;locked-closed&apos; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">        //首页导航器</span><br><span class="line">const HomeStack = createStackNavigator(</span><br><span class="line">    &#123;</span><br><span class="line">        Home: HomeScreen,</span><br><span class="line">        HomeDetail: HomeDetailScreen,</span><br><span class="line">        //其他首页导航栈下的界面</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        navigationOptions:navigationOptions</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">        //新闻导航器</span><br><span class="line">const NewsStack = createStackNavigator(&#123;</span><br><span class="line">        News: NewsScreen,</span><br><span class="line">        NewsDetail: NewsDetailScreen,</span><br><span class="line">         //其他新闻导航栈下的界面</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        navigationOptions:navigationOptions</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //登陆、注册等导航器</span><br><span class="line">const LoginStack = createStackNavigator(</span><br><span class="line">    &#123;</span><br><span class="line">        Login: LoginScreen,</span><br><span class="line">        Register: RegisterScreen,</span><br><span class="line">        Bind: BindScreen,</span><br><span class="line">        UserProtocol: UserProtocolScreen</span><br><span class="line">      //其他登陆导航栈下的界面</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        navigationOptions:navigationOptions</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //tab点击切换导航器</span><br><span class="line">const Tab = createBottomTabNavigator(&#123;</span><br><span class="line">    Home: HomeStack,</span><br><span class="line">    News: NewsStack</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    initialRouteName: &apos;Home&apos;,</span><br><span class="line">    tabBarOptions: &#123;</span><br><span class="line">        showLabel: false,</span><br><span class="line">        style:&#123;</span><br><span class="line">            height:0 //隐藏底部切换</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    //侧滑导航器</span><br><span class="line">const drawerNavigator = createDrawerNavigator(&#123;</span><br><span class="line">    bottomTab: Tab,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    drawerWidth: width-120,</span><br><span class="line">    contentComponent: CustomDrawerContentComponent</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //最后导出Switch导航器</span><br><span class="line">export default createSwitchNavigator(&#123;</span><br><span class="line">    drawerNavigator: drawerNavigator,</span><br><span class="line">    loginStack: LoginStack,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> <strong><em>本次写作到此，欢迎❤️⭐️👏指出错误或者发布自己的见解探讨，共勉。🤝</em></strong></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/10/react-native-强大的navigation-V2-0/">https://giantss.github.io/blog/2018/10/10/react-native-强大的navigation-V2-0/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> react native </tag>
            
            <tag> react navigation </tag>
            
            <tag> 升级 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于react native 第三方组件安装、卸载的一些注意事项</title>
      <link href="/blog/2018/10/10/%E5%85%B3%E4%BA%8Ereact-native-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E3%80%81%E5%8D%B8%E8%BD%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/blog/2018/10/10/%E5%85%B3%E4%BA%8Ereact-native-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E3%80%81%E5%8D%B8%E8%BD%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>我使用的react native版本是 0.49.5，在开发的过程中经常会遇到安装、卸载的操作，一不小心（没有安装流程做）项目运行的就会报各种错误。建议在把第三方组件引入正式项目工程之前先在demo工程中跑通，否者你会浪费很多不必要的时间。下面是正常安装、卸载流程。</p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>1，正确的安装方式是 <code>npm install xxx --save</code>，经常看到许多组件安装文档上后面没有 <code>--save</code>，如果没有建议加上 否则组件信息不会出现在<code>package.json</code>中，导入组件的时候可能会找不到路径。</p><p>2，安装完成后执行一下 <code>react-native link xxx</code>。<br><a id="more"></a></p><h2 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h2><p>1，在卸载之前先执行 <code>react-native unlink xxx</code>。<br>2，然后在执行 <code>npm uninstall xxx --save</code> 别忘了加<code>--save</code>。</p><p><strong><em>卸载的时候特别注意，如果卸载的组件有<code>link</code>的，<code>uninstall</code>之前一定要先<code>unlink</code>，否则运行项目会报错的（如果你没有在<code>uninstall</code>之前先<code>unlink</code>且运行已经报错了，重新按照安装卸载流程再走一遍就ok了）。</em></strong></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/10/关于react-native-第三方组件安装、卸载的一些注意事项/">https://giantss.github.io/blog/2018/10/10/关于react-native-第三方组件安装、卸载的一些注意事项/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> react native </tag>
            
            <tag> 第三组件 </tag>
            
            <tag> 安装 </tag>
            
            <tag> 卸载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS使用的一些小技巧/高级进阶</title>
      <link href="/blog/2018/10/10/CSS%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/"/>
      <url>/blog/2018/10/10/CSS%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>最近闲暇时间在看鑫爷的<a href="http://www.cssworld.cn/" target="_blank" rel="noopener">《CSS世界》</a>，内容真的是非常精彩，很多细节分析的非常透彻，值得推荐。在日常开发中实现某种效果有很多方式，但是下面的<code>css code</code>我以前都很少用到，原来css还可以这么玩 。。</p><h2 id="实现hover改变成另一张图片效果"><a href="#实现hover改变成另一张图片效果" class="headerlink" title="实现hover改变成另一张图片效果"></a>实现hover改变成另一张图片效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**css**/</span><br><span class="line">img: hover &#123; 　</span><br><span class="line">     content: url( laugh-tear. png);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">/**html code**/</span><br><span class="line">&lt; img src=&quot; laugh. png&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong><em>局限性：content 属性 改变 的 仅仅是 视觉 呈现， 当 我们 以 右键 或 其他 形式 保存 这张 图片 的 时候， 所 保存 的 还是 原来 src 对应 的 图片。</em></strong></p><a id="more"></a><h2 id="显示网站logo"><a href="#显示网站logo" class="headerlink" title="显示网站logo"></a>显示网站logo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt; h1&gt;logo&lt;/ h1&gt;</span><br><span class="line"> h1 &#123; 　 </span><br><span class="line">   content: url( logo. svg);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>优点：</p><blockquote><p>1，不会影响网站SEO。</p><p>2，使用.svg矢量图为了适应移动 端 retina 屏幕（如果用.svg会模<br>糊）。</p></blockquote><p><strong><em>注：千万不要自以为是地把重要的文本信息使用content 属性生成，因为这对可访问性和SEO都很不友好，content 属性只能用来生成 一些 无关紧要的内容， 如装饰性图形或者序号之类； 同样，也不要担心 原本重要的文字信息会被content替换，替换的仅仅是视觉层。</em></strong></p><h2 id="设置内容无法选中、无法复制"><a href="#设置内容无法选中、无法复制" class="headerlink" title="设置内容无法选中、无法复制"></a>设置内容无法选中、无法复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user-select: none</span><br></pre></td></tr></table></figure><h2 id="“三道-杠”-小-图标-示意"><a href="#“三道-杠”-小-图标-示意" class="headerlink" title="“三道 杠” 小 图标 示意"></a>“三道 杠” 小 图标 示意</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd52c529c6?w=314&amp;h=270&amp;f=png&amp;s=300" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.icon-menu &#123; 　</span><br><span class="line">     display: inline-block; 　</span><br><span class="line">     width: 140px; </span><br><span class="line">     height: 10px; 　</span><br><span class="line">     padding: 35px 0; 　</span><br><span class="line">     border-top: 10px solid; 　</span><br><span class="line">     border-bottom: 10px solid; 　</span><br><span class="line">     background-color: currentColor; 　</span><br><span class="line">     background-clip: content-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双层-圆点-图形-示意"><a href="#双层-圆点-图形-示意" class="headerlink" title="双层 圆点 图形 示意"></a>双层 圆点 图形 示意</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd53928d89?w=288&amp;h=280&amp;f=png&amp;s=300" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.icon-dot &#123; 　</span><br><span class="line">     display: inline-block; 　 </span><br><span class="line">      width: 100px; </span><br><span class="line">      height: 100px; 　 </span><br><span class="line">      padding: 10px; 　</span><br><span class="line">      border: 10px solid; 　 　 　 </span><br><span class="line">      border-radius: 50%; 　 </span><br><span class="line">      background-color: currentColor; 　 </span><br><span class="line">      background-clip: content-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去掉最右边的margin-right：20"><a href="#去掉最右边的margin-right：20" class="headerlink" title="去掉最右边的margin-right：20"></a>去掉最右边的margin-right：20</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586ce1588a993?w=317&amp;h=209&amp;f=png&amp;s=908" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  /**方案一：使用css3 nth-of-type属性（不考虑兼容IE8**/</span><br><span class="line">li: nth-of-type(3n) &#123; </span><br><span class="line">　 margin-right: 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  /**方案二：通过给父容器添加margin属性， 增加容器的可用宽度来实现**/</span><br><span class="line">ul &#123; 　</span><br><span class="line">     margin-right: -20px; </span><br><span class="line">&#125;</span><br><span class="line"> ul &gt; li &#123; 　</span><br><span class="line">     float: left; 　</span><br><span class="line">     width: 100px; 　 </span><br><span class="line">     margin-right: 20px;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="margin：auto的妙用"><a href="#margin：auto的妙用" class="headerlink" title="margin：auto的妙用"></a>margin：auto的妙用</h2><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd5555f087?w=311&amp;h=166&amp;f=png&amp;s=372" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;demo&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .father &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            border: red solid 1px;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            position: absolute;  /**key code here**/</span><br><span class="line">            background-color: orange;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            margin: auto;  /**key code here**/</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="左／右对齐效果。"><a href="#左／右对齐效果。" class="headerlink" title="左／右对齐效果。"></a>左／右对齐效果。</h3><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd53c92097?w=320&amp;h=221&amp;f=png&amp;s=454" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        .father &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: red solid 1px;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            margin-right: 50px; /**左对齐margin-right、margin-left值交换**/</span><br><span class="line">            margin-left: auto;  /**key code here**/</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd5593f646?w=318&amp;h=210&amp;f=png&amp;s=455" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        .father &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: red solid 1px;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            margin-right: auto; /**key code here**/</span><br><span class="line">            margin-left: auto;  /**key code here**/</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>###垂直居中<br><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd56bbab63?w=310&amp;h=211&amp;f=png&amp;s=453" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        .father &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            writing-mode: vertical-lr;  /**key code here**/</span><br><span class="line">            border: red solid 1px;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            margin: auto;  /**key code here**/</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="实现最高渲染性能的去除下边框css"><a href="#实现最高渲染性能的去除下边框css" class="headerlink" title="实现最高渲染性能的去除下边框css"></a>实现最高渲染性能的去除下边框css</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div &#123; 　 </span><br><span class="line">    border: 1px solid; 　 </span><br><span class="line">    border-bottom: 0 none;  /**key code here**/</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="优雅的增加icon按钮点击区域"><a href="#优雅的增加icon按钮点击区域" class="headerlink" title="优雅的增加icon按钮点击区域"></a>优雅的增加icon按钮点击区域</h2><p>点击 区域 大小 从 16 × 16 一下子 提升 到 38 × 38，<br><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd7912d56e?w=668&amp;h=138&amp;f=png&amp;s=43797" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.icon- clear &#123; 　</span><br><span class="line">     width: 16px; 　 </span><br><span class="line">      height: 16px; 　 </span><br><span class="line">      border: 11px solid transparent; 　 /**key code here**/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最高性能等边三角图形绘制"><a href="#最高性能等边三角图形绘制" class="headerlink" title="最高性能等边三角图形绘制"></a>最高性能等边三角图形绘制</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd7f1625de?w=112&amp;h=41&amp;f=png&amp;s=168" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">     width: 0;</span><br><span class="line">     border: 10px solid;</span><br><span class="line">     border-color: #f30 transparent transparent;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="最高性能等腰三角图形绘制"><a href="#最高性能等腰三角图形绘制" class="headerlink" title="最高性能等腰三角图形绘制"></a>最高性能等腰三角图形绘制</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd85ba6e7e?w=42&amp;h=41&amp;f=png&amp;s=218" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    border-width: 20px 10px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: #f30 transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="又或者是这种三角形（对话框气泡下的三角形）"><a href="#又或者是这种三角形（对话框气泡下的三角形）" class="headerlink" title="又或者是这种三角形（对话框气泡下的三角形）"></a>又或者是这种三角形（对话框气泡下的三角形）</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd8651cd50?w=56&amp;h=58&amp;f=png&amp;s=251" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    border-width: 20px 10px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: #f30 #f30 transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最高性能梯形图形绘制"><a href="#最高性能梯形图形绘制" class="headerlink" title="最高性能梯形图形绘制"></a>最高性能梯形图形绘制</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd8b57e230?w=114&amp;h=31&amp;f=png&amp;s=166" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 10px;</span><br><span class="line">    height: 10px;</span><br><span class="line">    border: 10px solid;</span><br><span class="line">    border-color: #f30 transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逼真-的-3D-效果"><a href="#逼真-的-3D-效果" class="headerlink" title="逼真 的 3D 效果"></a>逼真 的 3D 效果</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cd9757be69?w=49&amp;h=51&amp;f=png&amp;s=249" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 10px;</span><br><span class="line">    height: 10px;</span><br><span class="line">    border: 10px solid;</span><br><span class="line">    border-color: #f30 #00f #396 #0f0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="被遗忘的ex单位"><a href="#被遗忘的ex单位" class="headerlink" title="被遗忘的ex单位"></a>被遗忘的<code>ex</code>单位</h2><p>实现箭头居中文字垂直方向（不受字体、字号影响）<br><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cda4148848?w=203&amp;h=56&amp;f=png&amp;s=200" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;demo&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">        .icon-arrow &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 1ex;</span><br><span class="line">            background: url(arrow.svg) no-repeat center/20px 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div style=&quot;font-size: 18px&quot;&gt;</span><br><span class="line">       箭头居中对齐</span><br><span class="line">        &lt;i class=&quot;icon-arrow&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="永远居中的dialog（可兼容到IE7）"><a href="#永远居中的dialog（可兼容到IE7）" class="headerlink" title="永远居中的dialog（可兼容到IE7）"></a>永远居中的<code>dialog</code>（可兼容到IE7）</h2><p><img src="https://user-gold-cdn.xitu.io/2018/10/9/166586cdab980a2b?w=455&amp;h=374&amp;f=png&amp;s=300" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;demo&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">       .container &#123;</span><br><span class="line">           position: fixed;</span><br><span class="line">           top:0;</span><br><span class="line">           right: 0;</span><br><span class="line">           left: 0;</span><br><span class="line">           bottom: 0;</span><br><span class="line">           background-color: rgba(0,0,0,.5);</span><br><span class="line">           text-align: center;</span><br><span class="line">           font-size: 0;</span><br><span class="line">           white-space: nowrap;</span><br><span class="line">           overflow: auto;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       .container:after &#123;</span><br><span class="line">           content: &apos;&apos;;</span><br><span class="line">           display: inline-block;</span><br><span class="line">           height: 100%;</span><br><span class="line">           vertical-align: middle;</span><br><span class="line">       &#125;</span><br><span class="line">       .content &#123;</span><br><span class="line">           width: 240px;</span><br><span class="line">           height: 120px;</span><br><span class="line">           padding: 20px;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       .dialog &#123;</span><br><span class="line">           display: inline-block;</span><br><span class="line">           vertical-align: middle;</span><br><span class="line">           border-radius: 6px;</span><br><span class="line">           background-color: #fff;</span><br><span class="line">           font-size: 14px;</span><br><span class="line">           white-space: normal;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;content&quot;&gt;这dialog永远居中&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="去除页面默认滚动条-PC端有效"><a href="#去除页面默认滚动条-PC端有效" class="headerlink" title="去除页面默认滚动条(PC端有效)"></a>去除页面默认滚动条(PC端有效)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**good code**/</span><br><span class="line"> html &#123;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">/**bad code**/</span><br><span class="line"> html, body &#123;    </span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong><em>本次写作到此，欢迎❤️⭐️👏指出错误或者发布自己的见解探讨，共勉。🤝</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react native 国际化(多语言)</title>
      <link href="/blog/2018/10/10/react-native-%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
      <url>/blog/2018/10/10/react-native-%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>效果图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-514187ccb600f7cf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="5ACF79A333C7F62349D712BC29EC5BA9.jpg"></p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-7302a6b7ae026bf3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="C8412602F259771C656EF19DD62A93A0.jpg"><br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/5683553-9ba73124db94d1fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="B20051984E994AB1EE5588476BE245B7.jpg"><br>应留言的要求，我觉得需要花点时间整理一下关于多语言的资料了，献给各位小伙伴希望能带给大家一些思路。由于一些特殊的原因上图项目不好做为开源项目提供给大家，所以我自己写了一个小demo（<code>源码见文尾</code>），废话不多说开始正题。</p><h2 id="准备阶段："><a href="#准备阶段：" class="headerlink" title="准备阶段："></a>准备阶段：</h2><ul><li><a href="https://github.com/AlexanderZaytsev/react-native-i18n" target="_blank" rel="noopener">react-native-i18n</a> 第三方多语言库<br>安装: <code>yarn add react-native-i18n</code> </li><li><a href="[https://github.com/rebeccahughes/react-native-device-info](https://github.com/rebeccahughes/react-native-device-info">react-native-device-info</a><br>)   用户获取系统本地语言环境<br>安装: <code>yarn add react-native-device-info</code> and <code>react-native link react-native-device-info</code><h2 id="实践阶段："><a href="#实践阶段：" class="headerlink" title="实践阶段："></a>实践阶段：</h2>在项目中创建<code>zh.js</code>、<code>en.js</code>、<code>I18n.js</code>三个js文件，<code>DataRepository.js</code>是一个我自定义的数据持久化类，在这个demo中的作用是存取用户改变后的语言环境，直接拷贝过去就可以用(不是必须的)。<br><img src="http://upload-images.jianshu.io/upload_images/5683553-ab5d5a207b19973d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br>代码分别为：<br><code>zh.js</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    english: &apos;英文&apos;,</span><br><span class="line">    chinese: &apos;中文&apos;,</span><br><span class="line">    changeToEnglish: &apos;切换到英文&apos;,</span><br><span class="line">    changeToChinese: &apos;切换到中文&apos;,</span><br><span class="line">    changeToSystem: &apos;切换到系统语言&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>en.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    english: &apos;english&apos;,</span><br><span class="line">    chinese: &apos;chinese&apos;,</span><br><span class="line">    changeToEnglish: &apos;change to english&apos;,</span><br><span class="line">    changeToChinese: &apos;change to chinese&apos;,</span><br><span class="line">    changeToSystem: &apos;change to System&apos;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>I18n.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import I18n,&#123; getLanguages &#125; from &apos;react-native-i18n&apos;</span><br><span class="line">import DeviceInfo from &apos;react-native-device-info&apos;</span><br><span class="line">import DataRepository from &apos;../dao/DataRepository&apos;</span><br><span class="line">import en from &apos;./en&apos;</span><br><span class="line">import zh from &apos;./zh&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">I18n.defaultLocale = &apos;en&apos;;</span><br><span class="line"></span><br><span class="line">I18n.fallbacks = true;</span><br><span class="line"></span><br><span class="line">I18n.translations = &#123;</span><br><span class="line">    en,</span><br><span class="line">    zh,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">I18n.localeLanguage = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    new DataRepository().fetchLocalRepository(&apos;localLanguage&apos;)</span><br><span class="line">        .then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">            I18n.locale = res;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">            I18n.locale = DeviceInfo.getDeviceLocale();</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    return I18n.locale;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export &#123; I18n, getLanguages &#125;;</span><br></pre></td></tr></table></figure></p><h2 id="重点方法、属性讲解"><a href="#重点方法、属性讲解" class="headerlink" title="重点方法、属性讲解"></a>重点方法、属性讲解</h2><ul><li><code>I18n.t()</code> : 使用频率是最高的，举个栗子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">            &#123;I18n.t(&apos;english&apos;)&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br></pre></td></tr></table></figure></li></ul><p>以上<code>I18n.t(&#39;english&#39;)</code>中的<code>english</code>参数就是在<code>zh.js</code>、<code>en.js</code>文件中的语言配置项<br><img src="http://upload-images.jianshu.io/upload_images/5683553-f81ddb8b7c482946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/5683553-b9a76745699fe6d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br>具体显示内容会随着语言环境调用相应的语言配置文件，呈现给用户相应的语言内容。</p><ul><li><code>I18n.getLanguages</code> 获取用户首选的语言环境</li><li><code>I18n.locale</code> : 设置本地语言环境。</li><li><code>I18n.defaultLocale</code> 首选默认语言</li><li><code>I18n.fallbacks</code> : 看文档说明我理解的意思是：如果获取到的系统语言类似<code>en_US</code> <code>en-GB</code>这样的，插件初始化的时候发现没有<code>en_US.js</code> <code>en-GB.js</code>，这个时候如果设置了<code>I18n.fallbacks = true;</code>系统就会按这样的（<code>en_US</code> <code>en.js</code>）顺序去查找文件，就会去找有一个<code>en.js</code>这样的文件， 官方建议使用<code>I18n.fallbacks = true;</code><h4 id="更多关于i18n-js-的属性和方法请-点击这里查看"><a href="#更多关于i18n-js-的属性和方法请-点击这里查看" class="headerlink" title="更多关于i18n-js 的属性和方法请 点击这里查看"></a>更多关于<code>i18n-js</code> 的属性和方法请 <a href="https://github.com/fnando/i18n-js#setting-up" target="_blank" rel="noopener">点击这里查看</a></h4></li></ul><h1 id="ios需要配置语言环境："><a href="#ios需要配置语言环境：" class="headerlink" title="ios需要配置语言环境："></a>ios需要配置语言环境：</h1><p><img src="http://upload-images.jianshu.io/upload_images/5683553-87934a28a3fb8eb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"></p><h1 id="使用过程中发现一个刷新的问题："><a href="#使用过程中发现一个刷新的问题：" class="headerlink" title="使用过程中发现一个刷新的问题："></a>使用过程中发现一个刷新的问题：</h1><p>我在使用过程中发现调用了<code>I18n.locale=‘我设置的语言’</code>后，当前的界面语言并没有改变，而其他界面的语言已经改变了，就比如说我上面截图的侧滑菜单，当我在侧滑菜单切换语言后发现侧滑菜单里面的语言并没有发现变化，而首页的语言环境已经改变了，我不知道为什么，摸索最后找到了一种解决方案（可能不是最佳方案，但是解决了刷新当前界面语言的问题，如果有更好的方法欢迎👏分享），解决方案：调用一下<code>setState</code>（无论设置的这个<code>state</code>属性在<code>render</code>中有没有被使用，都有效）。 具体代码看<code>App.js</code>，我项目中有使用<code>localeLanguage</code>所以我把改变后的语言存到<code>state</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">           localeLanguage: I18n.locale</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5683553-79a2f1e3eb27e3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/5683553-9edd85731af59d47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="image.png"></p><p><strong><em><a href="https://github.com/giantss/RNInternationalizedDemo" target="_blank" rel="noopener">demo</a> 在此 ，本次写作到此，欢迎❤️⭐️👏指出错误或者发布自己的见解探讨，共勉。🤝</em></strong></p><p>本文原创出自 <a href="https://giantss.github.io/blog/2018/10/10/react-native-国际化-多语言/">https://giantss.github.io/blog/2018/10/10/react-native-国际化-多语言/</a> 翻版必究</p>]]></content>
      
      
      
        <tags>
            
            <tag> react native </tag>
            
            <tag> 国际化 </tag>
            
            <tag> 多语言 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
